{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\_]+"},"docs":[{"location":"","text":"Welcome to the Automotive Grade Linux (AGL) documentation. This current page provides you with a brief overview of the AGL Distribution and with an introduction to selected topics that can help you get a quick start using AGL for development. What is Automotive Grade Linux? Automotive Grade Linux is a collaborative, open source project that brings together automakers, suppliers, and technology companies for the purpose of building Linux-based, open source software platforms for automotive applications that can serve as de facto industry standards. AGL address all software in the vehicle: infotainment, instrument cluster, heads-up-display (HUD), telematics, connected car, advanced driver assistance systems (ADAS), functional safety, and autonomous driving. Adopting a shared platform across the industry reduces fragmentation and allows automakers and suppliers to reuse the same code base, which leads to rapid innovation and faster time-to-market for new products. AGL is a Linux Foundation project and its goals are as follows: Build a single platform for the entire industry Develop 70 to 80% of the starting point for a production project Reduce fragmentation by combining the best of open source Develop an ecosystem of developers, suppliers, and expertise that all use a single platform You can find additional overview information on the \" About Automotive Grade Linux \" page. You can find information on the AGL Unified Code Base on the \" Unified Code Base \" page. What Can I Do Right Away Using AGL? The \"Getting Started\" topics allow you to quickly accomplish some work using AGL. You can use the \"Getting Started\" sections to do the following: Quickstart to quickly install the pre-built images into an emulation or hardware platform. Learn How to Build an AGL Image by working through fundamental steps that show you how to build for various supported hardware targets (e.g. Raspberry PI boards). Learn How to Create an Application using the application development workflow. The AGL community is diverse and supportive. You can become an active community member that contributes feedback, ideas, suggestions, bugs and documentation. Join the IRC conversation using the #automotive channel on irc.freenode.net . Subscribe to the AGL discussions mailing list at automotive-discussions . Learn about AGL distribution by visiting the \" AGL Distribution \" wiki page. Explore further \"Getting Started\" information by visiting the \" Getting Started with AGL \" wiki page. Learn how to contribute by visiting the \" Contributing to the AGL Distro \" wiki page.","title":"Home"},{"location":"#welcome-to-the-automotive-grade-linux-agl-documentation","text":"This current page provides you with a brief overview of the AGL Distribution and with an introduction to selected topics that can help you get a quick start using AGL for development.","title":"Welcome to the Automotive Grade Linux (AGL) documentation."},{"location":"#what-is-automotive-grade-linux","text":"Automotive Grade Linux is a collaborative, open source project that brings together automakers, suppliers, and technology companies for the purpose of building Linux-based, open source software platforms for automotive applications that can serve as de facto industry standards. AGL address all software in the vehicle: infotainment, instrument cluster, heads-up-display (HUD), telematics, connected car, advanced driver assistance systems (ADAS), functional safety, and autonomous driving. Adopting a shared platform across the industry reduces fragmentation and allows automakers and suppliers to reuse the same code base, which leads to rapid innovation and faster time-to-market for new products. AGL is a Linux Foundation project and its goals are as follows: Build a single platform for the entire industry Develop 70 to 80% of the starting point for a production project Reduce fragmentation by combining the best of open source Develop an ecosystem of developers, suppliers, and expertise that all use a single platform You can find additional overview information on the \" About Automotive Grade Linux \" page. You can find information on the AGL Unified Code Base on the \" Unified Code Base \" page.","title":"What is Automotive Grade Linux?"},{"location":"#what-can-i-do-right-away-using-agl","text":"The \"Getting Started\" topics allow you to quickly accomplish some work using AGL. You can use the \"Getting Started\" sections to do the following: Quickstart to quickly install the pre-built images into an emulation or hardware platform. Learn How to Build an AGL Image by working through fundamental steps that show you how to build for various supported hardware targets (e.g. Raspberry PI boards). Learn How to Create an Application using the application development workflow. The AGL community is diverse and supportive. You can become an active community member that contributes feedback, ideas, suggestions, bugs and documentation. Join the IRC conversation using the #automotive channel on irc.freenode.net . Subscribe to the AGL discussions mailing list at automotive-discussions . Learn about AGL distribution by visiting the \" AGL Distribution \" wiki page. Explore further \"Getting Started\" information by visiting the \" Getting Started with AGL \" wiki page. Learn how to contribute by visiting the \" Contributing to the AGL Distro \" wiki page.","title":"What Can I Do Right Away Using AGL?"},{"location":"0_Getting_Started/1_Quickstart/Using_Ready_Made_Images/","text":"AGL provides a number of pre-built ready-made images of various versions. x86 (Emulation and Hardware) 1. QEMU (Emulation) Download the compressed prebuilt image . Download the compressed kernel image . Install QEMU : $ apt-get install qemu Install vinagre : $ sudo apt install vinagre Create boot directory and copy compressed images (prebuilt & kernel) into them : $ mkdir ~/agl-demo/ $ cp ~/Downloads/agl-demo-platform-crosssdk-qemux86-64.ext4.xz ~/agl-demo/ $ cp ~/Downloads/bzImage ~/agl-demo/ $ cd ~/agl-demo $ sync Extract prebuilt compressed image : $ xz -v -d agl-demo-platform-crosssdk-qemux86-64.ext4.xz Launch QEMU with vinagre (for scaling), remove - snapshot \\ if you want to save changes to the image files : $ ( sleep 5 && vinagre --vnc-scale localhost ) > /tmp/vinagre.log 2 > & 1 & qemu-system-x86_64 -device virtio-net-pci,netdev = net0,mac = 52 :54:00:12:35:02 -netdev user,id = net0,hostfwd = tcp::2222-:22 \\ -drive file = agl-demo-platform-crosssdk-qemux86-64.ext4,if = virtio,format = raw -show-cursor -usb -usbdevice tablet -device virtio-rng-pci \\ -snapshot -vga virtio \\ -vnc :0 -soundhw hda -machine q35 -cpu kvm64 -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt -enable-kvm \\ -m 2048 -serial mon:vc -serial mon:stdio -serial null -kernel bzImage \\ -append 'root=/dev/vda rw console=tty0 mem=2048M ip=dhcp oprofile.timer=1 console=ttyS0,115200n8 verbose fstab=no' Login into AGL : Automotive Grade Linux 9 .99.4+snapshot qemux86-64 ttyS1 qemux86-64 login: root Shutdown QEMU : $ poweroff , otherwise QEMU will run in the background. To use vnc-viewer instead of vinagre : $ ( sleep 5 && vncviewer ) & qemu-system-x86_64 -device virtio-net-pci,netdev = net0,mac = 52 :54:00:12:35:02 -netdev user,id = net0,hostfwd = tcp::2222-:22 \\ -drive file = agl-demo-platform-crosssdk-qemux86-64.ext4,if = virtio,format = raw -show-cursor -usb -usbdevice tablet -device virtio-rng-pci \\ -snapshot -vga virtio \\ -vnc :0 -soundhw hda -machine q35 -cpu kvm64 -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt -enable-kvm \\ -m 2048 -serial mon:vc -serial mon:stdio -serial null -kernel bzImage \\ -append 'root=/dev/vda rw console=tty0 mem=2048M ip=dhcp oprofile.timer=1 console=ttyS0,115200n8 verbose fstab=no' 2. Virtual Box (Emulation) Download the compressed vbox disk image . Install and set up Virtual Box . Extract the vmdk file : $ xz -v -d agl-demo-platform-crosssdk-qemux86-64.wic.vmdk.xz Configure virtual box for AGL : Click on New or Add . Enter Name as agl-demo . Type as Linux . Version as Other Linux (64-bit) , click on Next . Select Memory size. Recommended is 2048 MB , click on Next . Click on Use an existing virtual hard disk file , and select the extracted agl-demo-platform-crosssdk-qemux86-64.wic.vmdk file, click on Create . Go to Settings , and into System . Select Chipset : IHC9 . Check on Enable EFI (special OSes only) and click on OK . Go to Storage , and change the attribute to Type : AHCI and click on OK . Click on Start . For troubleshooting, you can refer here . 3. x86 physical system NOTE : UEFI enabled system is required. Download the compressed prebuilt image . Extract the image into USB drive : $ lsblk $ sudo umount <usb_device_name> $ xzcat agl-demo-platform-crosssdk-qemux86-64.wic.xz | sudo dd of = <usb_device_name> bs = 4M $ sync Boot from USB drive on the x86 system. Raspberry Pi 4 Download the compressed prebuilt image . Extract the image into the SD card of Raspberry Pi 4 : $ lsblk $ sudo umount <sdcard_device_name> $ xzcat agl-demo-platform-crosssdk-raspberrypi4-64.wic.xz | sudo dd of = <sdcard_device_name> bs = 4M $ sync IMPORTANT NOTE: Before re-writing any device on your Build Host, you need to be sure you are actually writing to the removable MicroSD card and not some other device. Each computer is different and removable devices can change from time to time. Consequently, you should repeat the previous operation with the MicroSD card to confirm the device name every time you write to the card. To summarize this example so far, we have the following: The first SATA drive is /dev/sda and /dev/sdc corresponds to the MicroSD card, and is also marked as a removable device.You can see this in the output of the lsblk command where \"1\" appears in the \"RM\" column for that device. SSH into Raspberry Pi : Connect Raspberry Pi to network : Homescreen > Settings , IP address mentioned here. ssh root@<Raspberry-Pi-ip-address> Serial Debugging : When things go wrong, you can take steps to debug your Raspberry Pi. For debugging, you need a 3.3 Volt USB Serial cable to fascilitate communication between your Raspberry Pi board and your build host. You can reference the following diagram for information on the following steps: Connect the TTL cable to the Universal Asynchronous Receiver-Transmitter (UART) connection on your Raspberry Pi board. Do not connect the USB side of the cable to your build host at this time. CAUTION: No warranty is provided using the following procedure. Pay particular attention to the collors of your cable as they could vary depending on the vendor. Connect the cable's BLUE wire to pin 6 (i.e. Ground) of the UART. Connect the able's GREEN RX line to pin 8 (i.e. the TXD line) of the UART. Connect the cable's RED TX line to pin 10 (i.e. the RXD line) of the UART. Plug the USB connector of the cable into your build host's USB port. Use your favorite tool for serial communication between your build host and your Raspberry Pi. For example, if your build host is a native Linux machine (e.g. Ubuntu) you could use screen as follows from a terminal on the build host: $ sudo screen /dev/ttyUSB0 115200 R-Car H3SK (H3ULCB board) NOTE : The prebuilt image doesn't support graphics (as of yet) and will run headless. For graphical support, a local build with the neccesary graphics driver is required. Update the firmware using files from here . Download the compressed prebuilt image . Extract the image into the boot device : $ lsblk $ sudo umount <boot_device_name> $ xzcat agl-image-ivi-crosssdk-h3ulcb.wic.xz | sudo dd of = <boot_device_name> bs = 4M $ sync Serial into the board for debugging. For example, if your build host is a native Linux machine (e.g. Ubuntu) you could use screen as follows from a terminal on the build host: $ sudo screen /dev/ttyUSB0 115200","title":"Using Ready Made Images"},{"location":"0_Getting_Started/1_Quickstart/Using_Ready_Made_Images/#x86-emulation-and-hardware","text":"","title":"x86 (Emulation and Hardware)"},{"location":"0_Getting_Started/1_Quickstart/Using_Ready_Made_Images/#1-qemu-emulation","text":"Download the compressed prebuilt image . Download the compressed kernel image . Install QEMU : $ apt-get install qemu Install vinagre : $ sudo apt install vinagre Create boot directory and copy compressed images (prebuilt & kernel) into them : $ mkdir ~/agl-demo/ $ cp ~/Downloads/agl-demo-platform-crosssdk-qemux86-64.ext4.xz ~/agl-demo/ $ cp ~/Downloads/bzImage ~/agl-demo/ $ cd ~/agl-demo $ sync Extract prebuilt compressed image : $ xz -v -d agl-demo-platform-crosssdk-qemux86-64.ext4.xz Launch QEMU with vinagre (for scaling), remove - snapshot \\ if you want to save changes to the image files : $ ( sleep 5 && vinagre --vnc-scale localhost ) > /tmp/vinagre.log 2 > & 1 & qemu-system-x86_64 -device virtio-net-pci,netdev = net0,mac = 52 :54:00:12:35:02 -netdev user,id = net0,hostfwd = tcp::2222-:22 \\ -drive file = agl-demo-platform-crosssdk-qemux86-64.ext4,if = virtio,format = raw -show-cursor -usb -usbdevice tablet -device virtio-rng-pci \\ -snapshot -vga virtio \\ -vnc :0 -soundhw hda -machine q35 -cpu kvm64 -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt -enable-kvm \\ -m 2048 -serial mon:vc -serial mon:stdio -serial null -kernel bzImage \\ -append 'root=/dev/vda rw console=tty0 mem=2048M ip=dhcp oprofile.timer=1 console=ttyS0,115200n8 verbose fstab=no' Login into AGL : Automotive Grade Linux 9 .99.4+snapshot qemux86-64 ttyS1 qemux86-64 login: root Shutdown QEMU : $ poweroff , otherwise QEMU will run in the background. To use vnc-viewer instead of vinagre : $ ( sleep 5 && vncviewer ) & qemu-system-x86_64 -device virtio-net-pci,netdev = net0,mac = 52 :54:00:12:35:02 -netdev user,id = net0,hostfwd = tcp::2222-:22 \\ -drive file = agl-demo-platform-crosssdk-qemux86-64.ext4,if = virtio,format = raw -show-cursor -usb -usbdevice tablet -device virtio-rng-pci \\ -snapshot -vga virtio \\ -vnc :0 -soundhw hda -machine q35 -cpu kvm64 -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt -enable-kvm \\ -m 2048 -serial mon:vc -serial mon:stdio -serial null -kernel bzImage \\ -append 'root=/dev/vda rw console=tty0 mem=2048M ip=dhcp oprofile.timer=1 console=ttyS0,115200n8 verbose fstab=no'","title":"1. QEMU (Emulation)"},{"location":"0_Getting_Started/1_Quickstart/Using_Ready_Made_Images/#2-virtual-box-emulation","text":"Download the compressed vbox disk image . Install and set up Virtual Box . Extract the vmdk file : $ xz -v -d agl-demo-platform-crosssdk-qemux86-64.wic.vmdk.xz Configure virtual box for AGL : Click on New or Add . Enter Name as agl-demo . Type as Linux . Version as Other Linux (64-bit) , click on Next . Select Memory size. Recommended is 2048 MB , click on Next . Click on Use an existing virtual hard disk file , and select the extracted agl-demo-platform-crosssdk-qemux86-64.wic.vmdk file, click on Create . Go to Settings , and into System . Select Chipset : IHC9 . Check on Enable EFI (special OSes only) and click on OK . Go to Storage , and change the attribute to Type : AHCI and click on OK . Click on Start . For troubleshooting, you can refer here .","title":"2. Virtual Box (Emulation)"},{"location":"0_Getting_Started/1_Quickstart/Using_Ready_Made_Images/#3-x86-physical-system","text":"NOTE : UEFI enabled system is required. Download the compressed prebuilt image . Extract the image into USB drive : $ lsblk $ sudo umount <usb_device_name> $ xzcat agl-demo-platform-crosssdk-qemux86-64.wic.xz | sudo dd of = <usb_device_name> bs = 4M $ sync Boot from USB drive on the x86 system.","title":"3. x86 physical system"},{"location":"0_Getting_Started/1_Quickstart/Using_Ready_Made_Images/#raspberry-pi-4","text":"Download the compressed prebuilt image . Extract the image into the SD card of Raspberry Pi 4 : $ lsblk $ sudo umount <sdcard_device_name> $ xzcat agl-demo-platform-crosssdk-raspberrypi4-64.wic.xz | sudo dd of = <sdcard_device_name> bs = 4M $ sync IMPORTANT NOTE: Before re-writing any device on your Build Host, you need to be sure you are actually writing to the removable MicroSD card and not some other device. Each computer is different and removable devices can change from time to time. Consequently, you should repeat the previous operation with the MicroSD card to confirm the device name every time you write to the card. To summarize this example so far, we have the following: The first SATA drive is /dev/sda and /dev/sdc corresponds to the MicroSD card, and is also marked as a removable device.You can see this in the output of the lsblk command where \"1\" appears in the \"RM\" column for that device. SSH into Raspberry Pi : Connect Raspberry Pi to network : Homescreen > Settings , IP address mentioned here. ssh root@<Raspberry-Pi-ip-address> Serial Debugging : When things go wrong, you can take steps to debug your Raspberry Pi. For debugging, you need a 3.3 Volt USB Serial cable to fascilitate communication between your Raspberry Pi board and your build host. You can reference the following diagram for information on the following steps: Connect the TTL cable to the Universal Asynchronous Receiver-Transmitter (UART) connection on your Raspberry Pi board. Do not connect the USB side of the cable to your build host at this time. CAUTION: No warranty is provided using the following procedure. Pay particular attention to the collors of your cable as they could vary depending on the vendor. Connect the cable's BLUE wire to pin 6 (i.e. Ground) of the UART. Connect the able's GREEN RX line to pin 8 (i.e. the TXD line) of the UART. Connect the cable's RED TX line to pin 10 (i.e. the RXD line) of the UART. Plug the USB connector of the cable into your build host's USB port. Use your favorite tool for serial communication between your build host and your Raspberry Pi. For example, if your build host is a native Linux machine (e.g. Ubuntu) you could use screen as follows from a terminal on the build host: $ sudo screen /dev/ttyUSB0 115200","title":"Raspberry Pi 4"},{"location":"0_Getting_Started/1_Quickstart/Using_Ready_Made_Images/#r-car-h3sk-h3ulcb-board","text":"NOTE : The prebuilt image doesn't support graphics (as of yet) and will run headless. For graphical support, a local build with the neccesary graphics driver is required. Update the firmware using files from here . Download the compressed prebuilt image . Extract the image into the boot device : $ lsblk $ sudo umount <boot_device_name> $ xzcat agl-image-ivi-crosssdk-h3ulcb.wic.xz | sudo dd of = <boot_device_name> bs = 4M $ sync Serial into the board for debugging. For example, if your build host is a native Linux machine (e.g. Ubuntu) you could use screen as follows from a terminal on the build host: $ sudo screen /dev/ttyUSB0 115200","title":"R-Car H3SK (H3ULCB board)"},{"location":"0_Getting_Started/2_Building_AGL_Image/0_Build_Process/","text":"The AGL image development workflow consists of setting up the system (i.e. the build host) that builds the image and finishes with using the Yocto Project to create an image targeted towards specific hardware. The following figure and list overview the AGL image development process. You can learn about the steps in the process by reading through the remaining sections. NOTE: This procedure uses information from many other procedures in the AGL Documentation set. Links are provided when a set of steps is required that is documented elsewhere. Prepare your build host to be able to use the tools needed to build your image. Download the AGL software into a local Git repository on your build host. Run the build environment script to initialize variables and paths needed for the build. Make sure your build configuration is defined exactly how you want it for your build. Use BitBake to build your image.","title":"Build Process Overview"},{"location":"0_Getting_Started/2_Building_AGL_Image/1_Preparing_Your_Build_Host/","text":"Preparing your build host so that it can build an AGL image means making sure your system is set up to use the Yocto Project OpenEmbedded build system, which is based on BitBake . This section presents minimal information so you can prepare the build host to use the \"Dunfell\" version of the Yocto Project (i.e. version 3.1.2). If you want more details on how the Yocto Project works, you can reference the Yocto Project documentation here . NOTE: This entire section presumes you want to build an image. You can skip the entire build process if you want to use a ready-made development image. The supported images exist for several boards as well as for the Quick EMUlator (QEMU). See the \" Quickstart \" section for more information on the ready-made images. Use a Supported Linux Distribution: To use the AGL software, it is recommended that your build host is a native Linux machine that runs a Yocto Project supported distribution as described by the \" Supported Linux Distributions \" section in the Yocto Project Reference Manual. Basically, you should be running a recent version of Ubuntu, Fedora, openSUSE, CentOS, or Debian. Be Sure Your Build Host Has Enough Free Disk Space: Your build host should have at least 100 Gbytes. Be Sure Tools are Recent: You need to have recent versions for the following tools: Git 1.8.3.1 or greater Tar 1.27 or greater Python 3.4.0 or greater If your distribution does not meet these minimal requirements, see the \" Required Git, tar, and Python Versions \" section in the Yocto Project Reference Manual for steps that you can take to be sure you have these tools. Install Essential, Graphical, and Eclipse Plug-in Build Host Packages: Your build host needs certain host packages. Depending on the Linux distribution you are using, the list of host packages differ. See \" The Build Host Packages \" section of the Yocto Project Quick Start for information on the packages you need. NOTE: If you are using the CentOS distribution, you need to separately install the epel-release package and run the makecache command as described in \" The Build Host Packages \" section of the Yocto Project Quick Start. Aside from the packages listed in the previous section, you need the following: Ubuntu and Debian: curl Fedora: curl OpenSUSE: glibc-locale curl CentOS: curl","title":"Preparing Your Build Host"},{"location":"0_Getting_Started/2_Building_AGL_Image/2_Downloading_AGL_Software/","text":"Once you have determined the build host can build an AGL image, you need to download the AGL source files. The AGL source files, which includes the Yocto Project layers, are maintained on the AGL Gerrit server. For information on how to create accounts for Gerrit, see the Getting Started with AGL wiki page. NOTE: Further information about Download and Build AGL Source Code available at AGL wiki . The remainder of this section provides steps on how to download the AGL source files: Define Your Top-Level Directory: You can define an environment variable as your top-level AGL workspace folder. Following is an example that defines the $HOME/workspace_agl folder using an environment variable named \"AGL_TOP\": $ export AGL_TOP = $HOME /AGL $ echo 'export AGL_TOP=$HOME/AGL' >> $HOME /.bashrc $ mkdir -p $AGL_TOP Download the repo Tool and Set Permissions: AGL Uses the repo tool for managing repositories. Use the following commands to download the tool and then set its permissions to allow for execution: $ mkdir -p $HOME /bin $ export PATH = $HOME /bin: $PATH $ echo 'export PATH=$HOME/bin:$PATH' >> $HOME /.bashrc $ curl https://storage.googleapis.com/git-repo-downloads/repo > $HOME /bin/repo $ chmod a+x $HOME /bin/repo NOTE: See the \" Repo Command Reference \" for more information on the repo tool. Download the AGL Source Files: Depending on your development goals, you can either download the latest stable AGL release branch, or the \"cutting-edge\" (i.e. \"master\" branch) files. Stable Release: Using the latest stable release gives you a solid snapshot of the latest know release. The release is static, tested, and known to work. To download the latest stable release branch (i.e. Jellyfish), use the following commands: $ cd $AGL_TOP $ mkdir jellyfish $ cd jellyfish $ repo init -b jellyfish -u https://gerrit.automotivelinux.org/gerrit/AGL/AGL-repo $ repo sync Cutting-Edge Files: Using the \"cutting-edge\" AGL files gives you a snapshot of the \"master\" branch. The resulting local repository you download is dynamic and changes frequently depending on community contributions. The advantage of using \"cutting-edge\" AGL files is that you have the absolute latest features, which are often under development, for AGL. To download the \"cutting-edge\" AGL files, use the following commands: $ cd $AGL_TOP $ mkdir master $ cd master $ repo init -u https://gerrit.automotivelinux.org/gerrit/AGL/AGL-repo $ repo sync Once you sync the repository, you have the AGL files in the form of \"layers\" (e.g. meta-* folders). You also have the poky repository in your AGL workspace. Listing out the resulting directory structure appears as follows: $ tree -L 1 . \u251c\u2500\u2500 bsp \u251c\u2500\u2500 external \u251c\u2500\u2500 meta-agl \u251c\u2500\u2500 meta-agl-cluster-demo \u251c\u2500\u2500 meta-agl-demo \u251c\u2500\u2500 meta-agl-devel \u251c\u2500\u2500 meta-agl-extra \u2514\u2500\u2500 meta-agl-telematics-demo","title":"Downloading AGL Software"},{"location":"0_Getting_Started/2_Building_AGL_Image/3_Initializing_Your_Build_Environment/","text":"Part of the downloaded AGL software is a setup script that you must run to initialize the build environment. aglsetup.sh Script You can find this script here: $AGL_TOP /master/meta-agl/scripts/aglsetup.sh The script accepts many options that allow you to define build parameters such as the target hardware (i.e. the machine), build directory, and so forth. Use the following commands to see the available options and script syntax: $ cd $AGL_TOP /master $ source meta-agl/scripts/aglsetup.sh -h AGL Machines (board support) Your target platform will be selected with the -m flag. The MACHINE can be selected from the templates in meta-agl/templates/machine/* . Note: This is also the place where you can add new boards. Following is a list of the available machines (level of support varies!): Available machines: [ meta-agl ] bbe # BeagleBoneEnhanced beaglebone # BeagleBone cubox-i # multiple i.MX6 boards cyclone5 # CycloneV dra7xx-evm # TI DRA7xx-EVM 'vayu' dragonboard-410c # Qualcomm Dragonboard 410c dragonboard-820c # Qualcomm Dragonboard 820c ebisu # Renesas RCar Ebisu h3-salvator-x # Renesas RCar Salvator/H3 h3ulcb # Renesas RCar H3 h3ulcb-kf # Renesas RCar H3 w Kingfisher Board h3ulcb-nogfx # Renesas RCar H3 w/o gfx blobs hsdk # ARC HS imx6qdlsabreauto # i.MX6 sabreauto imx8mqevk # i.MX8 w etnaviv imx8mqevk-viv # i.MX8 w vivante intel-corei7-64 # x86-64 (Intel flavour) m3-salvator-x # Renesas RCar Salvator/M3 m3ulcb # Renesas RCar M3 m3ulcb-kf # Renesas RCar M3 w Kingfisher Board m3ulcb-nogfx # Renesas RCAR M3 w/o gfx blobs nitrogen6x # i.MX6 nitrogen board qemuarm # Qemu ARM qemuarm64 # Qemu AArch 64 (ARM 64bit) * qemux86-64 # Qemu x86-64 raspberrypi4 # Raspberry Pi 4 AGL Features Before running the aglsetup.sh , you should understand what AGL features you want to include as part of your image. The script's help output lists available features and shows you the layers in which they reside. Following is a list of the available features: Available features: [ meta-agl ] agl-all-features : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-netboot ) agl-appfw-smack agl-archiver agl-buildstats agl-ci agl-ci-change-features : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-devel agl-netboot agl-pipewire agl-cloudproxy agl-buildstats agl-ptest ) agl-ci-change-features-nogfx : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-devel agl-netboot agl-pipewire agl-cloudproxy agl-buildstats agl-ptest ) agl-ci-snapshot-features : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-devel agl-netboot agl-archiver agl-pipewire agl-buildstats agl-ptest ) agl-ci-snapshot-features-nogfx : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-devel agl-netboot agl-archiver agl-pipewire agl-buildstats agl-ptest ) agl-devel agl-fossdriver agl-gplv2 agl-hmi-framework agl-netboot agl-pipewire agl-profile-cluster : ( agl-profile-graphical ) agl-profile-cluster-qt5 : ( agl-profile-graphical-qt5 agl-profile-graphical ) agl-profile-graphical agl-profile-graphical-html5 : ( agl-profile-graphical ) agl-profile-graphical-qt5 : ( agl-profile-graphical ) agl-profile-hud agl-profile-telematics agl-ptest agl-sign-wgts agl-sota agl-virt agl-virt-guest-xen agl-virt-xen : ( agl-virt ) agl-weston-remoting : ( agl-profile-graphical ) [ meta-agl-cluster-demo ] agl-cluster-demo : ( agl-profile-cluster-qt5 agl-profile-graphical-qt5 agl-profile-graphical agl-hmi-framework ) agl-cluster-demo-preload [ meta-agl-demo ] agl-cloudproxy agl-cluster-demo-support : ( agl-weston-remoting agl-profile-graphical ) agl-demo : ( agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework ) agl-demo-preload agl-demo-soundmanager : ( agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-audio-soundmanager-framework ) [ meta-agl-devel ] agl-jailhouse agl-speech-framework agl-voiceagent-alexa : ( agl-speech-framework ) agl-voiceagent-alexa-wakeword : ( agl-voiceagent-alexa agl-speech-framework ) [ meta-agl-extra ] agl-localdev [ meta-agl-telematics-demo ] agl-telematics-demo : ( agl-profile-telematics ) To find out exactly what a feature provides, check out the respective layer and its README. An AGL feature is a configuration that accounts for specific settings and dependencies needed for a particular build. For example, specifying the \"agl-demo\" feature makes sure that the aglsetup.sh script creates configuration files needed to build the image for the AGL demo. Following are brief descriptions of the AGL features you can specify on the aglsetup.sh command line: agl-all-features : A set of AGL default features. Do not think of this set of features as all the AGL features. agl-appfw-smack : Enables IoT.bzh Application Framework plus SMACK and Cynara. agl-archiver : Enables the archiver class for releases. agl-ci : Flags used for Continuous Integration (CI). Using this feature changes the value of the IMAGE_FSTYPES variable. agl-ci-change-features : Enables features for CI builds for Gerrit changes. agl-ci-change-features-nogfx : Enables features for CI builds for Gerrit changes for targets that use binary graphics drivers (i.e. builds without graphics). agl-ci-snapshot-features : Enables features for CI daily snapshot builds. agl-ci-snapshot-features-nogfx : Enables features for CI daily snapshot builds for targets that use binary graphics drivers (i.e. builds without graphics). agl-devel : Activates development options such as an empty root password, debuggers, strace, valgrind, and so forth. agl-netboot : Enables network boot support through Trivial File Transfer Protocol (TFTP) and Network Block Device (NBD) protocol. Netboot is needed for CI and useful for development to avoid writing sdcards. Needs additional setup. agl-ptest : Enables Ptest as part of the build. agl-sota : Enables Software Over-the-Air (SOTA) components and dependencies. Includes meta-updater, meta-updater-qemux86-64, meta-filesystems, and meta-python. agl-demo : Enables the layers meta-agl-demo and meta-qt5. You need agl-demo if you are going to build the agl-demo-platform. agl-sdl : Enables or adds SDL to the build. agl-pipewire : Enables AGLs pipewire support. agl-audio-soundmanager-framework : Enables Soundmanager framework, which is an exclusive switch for audio framework. agl-localdev : Adds a local layer named \"meta-localdev\" in the meta directory and a local.dev.inc configuration file when that file is present. This feature provides a shortcut for using the layer meta-localdev in the top-level folder for easy modifications to your own recipes. Example Following is an example that initializes the build environment, selects \"beaglebone\" for the machine, and chooses the \"agl-demo\" feature, which also includes the \"agl-appfw-smack\", \"agl-devel\", and \"agl-hmi-framework\" features: $ source meta-agl/scripts/aglsetup.sh -m qemux86-64 -b qemux86-64 agl-demo agl-devel aglsetup.sh: Starting Generating configuration files: Build dir: /home/scottrif/workspace_agl/build Machine: qemux86-64 Features: agl-appfw-smack agl-demo agl-devel Running /home/scottrif/workspace_agl/poky/oe-init-build-env Templates dir: /home/scottrif/workspace_agl/meta-agl/templates/base Config: /home/scottrif/workspace_agl/build/conf/bblayers.conf Config: /home/scottrif/workspace_agl/build/conf/local.conf Setup script: /home/scottrif/workspace_agl/build/conf/setup.sh Executing setup script ... --- beginning of setup script fragment /home/scottrif/workspace_agl/meta-agl/templates/base/01_setup_EULAfunc.sh fragment /home/scottrif/workspace_agl/meta-agl/templates/base/99_setup_EULAconf.sh end of setup script OK Generating setup file: /home/scottrif/workspace_agl/build/agl-init-build-env ... OK aglsetup.sh: Done Shell environment set up for builds. You can now run 'bitbake target' Common targets are: - meta-agl: ( core system ) agl-image-minimal agl-image-minimal-qa agl-image-ivi agl-image-ivi-qa agl-image-ivi-crosssdk agl-image-weston - meta-agl-demo: ( demo with UI ) agl-demo-platform ( * default demo target ) agl-demo-platform-qa agl-demo-platform-crosssdk agl-demo-platform-html5 Running the script creates the Build Directory if it does not already exist. The default Build Directory is $AGL_TOP/<release-branch-name>/build , and the nomenclature to be used throughout this doc is going to be $AGL_TOP/<release-branch-name>/<build-dir> For this example, the Build Directory is $AGL_TOP/master/qemux86-64 . The script's output also indicates the machine and AGL features selected for the build. The script creates two primary configuration files used for the build: local.conf and bblayers.conf . Both these configuration files are located in the Build Directory in the conf folder. If you were to examine these files, you would find standard Yocto Project configurations along with AGL configuration fragments, which are driven by the machine (i.e. beaglebone) and the AGL features specified as part of the script's command line. The end result is configuration files specific for your build in the AGL development environment. Finally, part of the aglsetup.sh script makes sure that any End User License Agreements (EULA) are considered. You can see that processing in the script's output as well. NOTE: Use of the local.conf and bblayers.conf configuration files is fundamental in the Yocto Project build environment. Consequently, it is fundamental in the AGL build environment. You can find lots of information on configuring builds in the Yocto Project documentation set. Here are some references if you want to dig into configuration further: Customizing Images Using local.conf Local build/conf/local.conf build/conf/bblayers.conf BBLAYERS User Configuration Enabling Your Layer","title":"Initializing Your Build Environment"},{"location":"0_Getting_Started/2_Building_AGL_Image/3_Initializing_Your_Build_Environment/#aglsetupsh-script","text":"You can find this script here: $AGL_TOP /master/meta-agl/scripts/aglsetup.sh The script accepts many options that allow you to define build parameters such as the target hardware (i.e. the machine), build directory, and so forth. Use the following commands to see the available options and script syntax: $ cd $AGL_TOP /master $ source meta-agl/scripts/aglsetup.sh -h","title":"aglsetup.sh Script"},{"location":"0_Getting_Started/2_Building_AGL_Image/3_Initializing_Your_Build_Environment/#agl-machines-board-support","text":"Your target platform will be selected with the -m flag. The MACHINE can be selected from the templates in meta-agl/templates/machine/* . Note: This is also the place where you can add new boards. Following is a list of the available machines (level of support varies!): Available machines: [ meta-agl ] bbe # BeagleBoneEnhanced beaglebone # BeagleBone cubox-i # multiple i.MX6 boards cyclone5 # CycloneV dra7xx-evm # TI DRA7xx-EVM 'vayu' dragonboard-410c # Qualcomm Dragonboard 410c dragonboard-820c # Qualcomm Dragonboard 820c ebisu # Renesas RCar Ebisu h3-salvator-x # Renesas RCar Salvator/H3 h3ulcb # Renesas RCar H3 h3ulcb-kf # Renesas RCar H3 w Kingfisher Board h3ulcb-nogfx # Renesas RCar H3 w/o gfx blobs hsdk # ARC HS imx6qdlsabreauto # i.MX6 sabreauto imx8mqevk # i.MX8 w etnaviv imx8mqevk-viv # i.MX8 w vivante intel-corei7-64 # x86-64 (Intel flavour) m3-salvator-x # Renesas RCar Salvator/M3 m3ulcb # Renesas RCar M3 m3ulcb-kf # Renesas RCar M3 w Kingfisher Board m3ulcb-nogfx # Renesas RCAR M3 w/o gfx blobs nitrogen6x # i.MX6 nitrogen board qemuarm # Qemu ARM qemuarm64 # Qemu AArch 64 (ARM 64bit) * qemux86-64 # Qemu x86-64 raspberrypi4 # Raspberry Pi 4","title":"AGL Machines (board support)"},{"location":"0_Getting_Started/2_Building_AGL_Image/3_Initializing_Your_Build_Environment/#agl-features","text":"Before running the aglsetup.sh , you should understand what AGL features you want to include as part of your image. The script's help output lists available features and shows you the layers in which they reside. Following is a list of the available features: Available features: [ meta-agl ] agl-all-features : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-netboot ) agl-appfw-smack agl-archiver agl-buildstats agl-ci agl-ci-change-features : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-devel agl-netboot agl-pipewire agl-cloudproxy agl-buildstats agl-ptest ) agl-ci-change-features-nogfx : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-devel agl-netboot agl-pipewire agl-cloudproxy agl-buildstats agl-ptest ) agl-ci-snapshot-features : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-devel agl-netboot agl-archiver agl-pipewire agl-buildstats agl-ptest ) agl-ci-snapshot-features-nogfx : ( agl-demo agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework agl-devel agl-netboot agl-archiver agl-pipewire agl-buildstats agl-ptest ) agl-devel agl-fossdriver agl-gplv2 agl-hmi-framework agl-netboot agl-pipewire agl-profile-cluster : ( agl-profile-graphical ) agl-profile-cluster-qt5 : ( agl-profile-graphical-qt5 agl-profile-graphical ) agl-profile-graphical agl-profile-graphical-html5 : ( agl-profile-graphical ) agl-profile-graphical-qt5 : ( agl-profile-graphical ) agl-profile-hud agl-profile-telematics agl-ptest agl-sign-wgts agl-sota agl-virt agl-virt-guest-xen agl-virt-xen : ( agl-virt ) agl-weston-remoting : ( agl-profile-graphical ) [ meta-agl-cluster-demo ] agl-cluster-demo : ( agl-profile-cluster-qt5 agl-profile-graphical-qt5 agl-profile-graphical agl-hmi-framework ) agl-cluster-demo-preload [ meta-agl-demo ] agl-cloudproxy agl-cluster-demo-support : ( agl-weston-remoting agl-profile-graphical ) agl-demo : ( agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-pipewire agl-speech-framework ) agl-demo-preload agl-demo-soundmanager : ( agl-appfw-smack agl-hmi-framework agl-profile-graphical-qt5 agl-profile-graphical agl-audio-soundmanager-framework ) [ meta-agl-devel ] agl-jailhouse agl-speech-framework agl-voiceagent-alexa : ( agl-speech-framework ) agl-voiceagent-alexa-wakeword : ( agl-voiceagent-alexa agl-speech-framework ) [ meta-agl-extra ] agl-localdev [ meta-agl-telematics-demo ] agl-telematics-demo : ( agl-profile-telematics ) To find out exactly what a feature provides, check out the respective layer and its README. An AGL feature is a configuration that accounts for specific settings and dependencies needed for a particular build. For example, specifying the \"agl-demo\" feature makes sure that the aglsetup.sh script creates configuration files needed to build the image for the AGL demo. Following are brief descriptions of the AGL features you can specify on the aglsetup.sh command line: agl-all-features : A set of AGL default features. Do not think of this set of features as all the AGL features. agl-appfw-smack : Enables IoT.bzh Application Framework plus SMACK and Cynara. agl-archiver : Enables the archiver class for releases. agl-ci : Flags used for Continuous Integration (CI). Using this feature changes the value of the IMAGE_FSTYPES variable. agl-ci-change-features : Enables features for CI builds for Gerrit changes. agl-ci-change-features-nogfx : Enables features for CI builds for Gerrit changes for targets that use binary graphics drivers (i.e. builds without graphics). agl-ci-snapshot-features : Enables features for CI daily snapshot builds. agl-ci-snapshot-features-nogfx : Enables features for CI daily snapshot builds for targets that use binary graphics drivers (i.e. builds without graphics). agl-devel : Activates development options such as an empty root password, debuggers, strace, valgrind, and so forth. agl-netboot : Enables network boot support through Trivial File Transfer Protocol (TFTP) and Network Block Device (NBD) protocol. Netboot is needed for CI and useful for development to avoid writing sdcards. Needs additional setup. agl-ptest : Enables Ptest as part of the build. agl-sota : Enables Software Over-the-Air (SOTA) components and dependencies. Includes meta-updater, meta-updater-qemux86-64, meta-filesystems, and meta-python. agl-demo : Enables the layers meta-agl-demo and meta-qt5. You need agl-demo if you are going to build the agl-demo-platform. agl-sdl : Enables or adds SDL to the build. agl-pipewire : Enables AGLs pipewire support. agl-audio-soundmanager-framework : Enables Soundmanager framework, which is an exclusive switch for audio framework. agl-localdev : Adds a local layer named \"meta-localdev\" in the meta directory and a local.dev.inc configuration file when that file is present. This feature provides a shortcut for using the layer meta-localdev in the top-level folder for easy modifications to your own recipes.","title":"AGL Features"},{"location":"0_Getting_Started/2_Building_AGL_Image/3_Initializing_Your_Build_Environment/#example","text":"Following is an example that initializes the build environment, selects \"beaglebone\" for the machine, and chooses the \"agl-demo\" feature, which also includes the \"agl-appfw-smack\", \"agl-devel\", and \"agl-hmi-framework\" features: $ source meta-agl/scripts/aglsetup.sh -m qemux86-64 -b qemux86-64 agl-demo agl-devel aglsetup.sh: Starting Generating configuration files: Build dir: /home/scottrif/workspace_agl/build Machine: qemux86-64 Features: agl-appfw-smack agl-demo agl-devel Running /home/scottrif/workspace_agl/poky/oe-init-build-env Templates dir: /home/scottrif/workspace_agl/meta-agl/templates/base Config: /home/scottrif/workspace_agl/build/conf/bblayers.conf Config: /home/scottrif/workspace_agl/build/conf/local.conf Setup script: /home/scottrif/workspace_agl/build/conf/setup.sh Executing setup script ... --- beginning of setup script fragment /home/scottrif/workspace_agl/meta-agl/templates/base/01_setup_EULAfunc.sh fragment /home/scottrif/workspace_agl/meta-agl/templates/base/99_setup_EULAconf.sh end of setup script OK Generating setup file: /home/scottrif/workspace_agl/build/agl-init-build-env ... OK aglsetup.sh: Done Shell environment set up for builds. You can now run 'bitbake target' Common targets are: - meta-agl: ( core system ) agl-image-minimal agl-image-minimal-qa agl-image-ivi agl-image-ivi-qa agl-image-ivi-crosssdk agl-image-weston - meta-agl-demo: ( demo with UI ) agl-demo-platform ( * default demo target ) agl-demo-platform-qa agl-demo-platform-crosssdk agl-demo-platform-html5 Running the script creates the Build Directory if it does not already exist. The default Build Directory is $AGL_TOP/<release-branch-name>/build , and the nomenclature to be used throughout this doc is going to be $AGL_TOP/<release-branch-name>/<build-dir> For this example, the Build Directory is $AGL_TOP/master/qemux86-64 . The script's output also indicates the machine and AGL features selected for the build. The script creates two primary configuration files used for the build: local.conf and bblayers.conf . Both these configuration files are located in the Build Directory in the conf folder. If you were to examine these files, you would find standard Yocto Project configurations along with AGL configuration fragments, which are driven by the machine (i.e. beaglebone) and the AGL features specified as part of the script's command line. The end result is configuration files specific for your build in the AGL development environment. Finally, part of the aglsetup.sh script makes sure that any End User License Agreements (EULA) are considered. You can see that processing in the script's output as well. NOTE: Use of the local.conf and bblayers.conf configuration files is fundamental in the Yocto Project build environment. Consequently, it is fundamental in the AGL build environment. You can find lots of information on configuring builds in the Yocto Project documentation set. Here are some references if you want to dig into configuration further: Customizing Images Using local.conf Local build/conf/local.conf build/conf/bblayers.conf BBLAYERS User Configuration Enabling Your Layer","title":"Example"},{"location":"0_Getting_Started/2_Building_AGL_Image/4_Customizing_Your_Build/","text":"Because the build process is based on BitBake and the Yocto Project, build customizations are driven through configuration files used during the build. Lots of configuration files exist that define a build. However, the primary one that acts as a global configuration mechanism is the local.conf file, which is found in the Build Directory in a folder named \"conf\". Before you start your build process, you should open up the local.conf file and look through it to be sure the general configurations are correct. The file is well commented so you should be able to understand what the various variables accomplish. To view and customize the local.conf file, use any text editor: $ vim $AGL_TOP /<release-branch-name>/<build-dir>/conf/local.conf As mentioned in the \" Initializing Your Build Environment \" section, the local.conf file gets augmented with AGL configuration fragments based on how you execute the aglsetup.sh script. You can see those fragments at the end the configuration file. Even though your build should work fine after running the aglsetup.sh script, you might consider editing your local.conf file to use one or more of the following configurations. Capturing Build History You can enable build history to help maintain the quality of your build output. You can use it to highlight unexpected and possibly unwanted changes in the build output. Basically, with build history enabled, you get a record of information about the contents of each package and image. That information is committed to a local Git repository where you can examine it. To enable build history, make sure the following two lines are in your local.conf file: INHERIT += \"buildhistory\" BUILDHISTORY_COMMIT = \"1\" See the \" Maintaining Build Output Quality \" section in the Yocto Project Reference Manual for a complete discussion on build history. Deleting Temporary Workspace During a build, the build system uses a lot of disk space to store temporary files. You can ease the burden on your system and speed up the build by configuring the build to remove temporary workspace. You need to inherit the rm_work class by using this statement in the local.conf file: INHERIT += \"rm_work\" You can read about the class in the \" rm_work.bbclass \" section of the Yocto Project Reference Manual for more information. Pointing at Shared State Cache Locations The build system creates everything from scratch unless BitBake can determine that parts do not need to be rebuilt. Fundamentally, building from scratch is attractive as it means all parts are built fresh and there is no possibility of stale data causing problems. When developers hit problems, they typically default back to building from scratch so they know the state of things from the start. The build process uses Shared State Cache (sstate) to speed up subsequent builds. This cache retains artifacts that can be re-used once it is determined that they would not be different as compared to a re-built module. For the AGL build, you can specify the location for sstate files by including the following in the local.conf file: SSTATE_DIR = \" ${ AGL_TOP } /sstate-cache\" Also, in the local.conf file, you can specify additional directories in which the build system can look for shared state information. Use the following form in your file to list out the directories you want the build process to look at for sstate information: SSTATE_MIRRORS ? = \"\\ file://.* http://someserver.tld/share/sstate/PATH;downloadfilename=PATH \\n \\ file://.* file:///some/local/dir/sstate/PATH\" If you want to know more about the Yocto Project sstate mechanism, see the \" Shared State Cache \" section in the Yocto Project Reference Manual. Preserving the Download Directory During the initial build, the system downloads many different source code tarballs from various upstream projects. Downloading these files can take a while, particularly if your network connection is slow. The process downloads files into a \" download directory \". The DL_DIR variable defines the download directory. For subsequent builds, you can preserve this directory to speed up the download part of a build. The default download directory is in a folder named \"downloads\". For the AGL build you can set the download directory by adding the following to your local.conf file: DL_DIR = \" ${ AGL_TOP } /downloads\" Using a Shared State (sstate) Mirror The underlying Yocto Project build system uses Shared State Mirrors to cache artifacts from previous builds. You can significantly speed up builds and guard against fetcher failures by using mirrors. To use mirrors, add this line to your local.conf file in the Build directory: SSTATE_MIRRORS_append = \" file://.* https://download.automotivelinux.org/sstate-mirror/master/ ${ DEFAULTTUNE } /PATH \\n \" You can learn more about shared state and how it is used in the \" Shared State Cache \" section of the Yocto Project Reference Manual. Common Settings using Symbolic Link with site.conf $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ cd $AGL_TOP /master/qemux86-64/ $ ln -sf $AGL_TOP /site.conf conf/ In General ; $ cd $AGL_TOP /<release-branch-name>/<build-dir>/ $ ln -sf $AGL_TOP /site.conf conf/","title":"Customizing Your Build"},{"location":"0_Getting_Started/2_Building_AGL_Image/4_Customizing_Your_Build/#capturing-build-history","text":"You can enable build history to help maintain the quality of your build output. You can use it to highlight unexpected and possibly unwanted changes in the build output. Basically, with build history enabled, you get a record of information about the contents of each package and image. That information is committed to a local Git repository where you can examine it. To enable build history, make sure the following two lines are in your local.conf file: INHERIT += \"buildhistory\" BUILDHISTORY_COMMIT = \"1\" See the \" Maintaining Build Output Quality \" section in the Yocto Project Reference Manual for a complete discussion on build history.","title":"Capturing Build History"},{"location":"0_Getting_Started/2_Building_AGL_Image/4_Customizing_Your_Build/#deleting-temporary-workspace","text":"During a build, the build system uses a lot of disk space to store temporary files. You can ease the burden on your system and speed up the build by configuring the build to remove temporary workspace. You need to inherit the rm_work class by using this statement in the local.conf file: INHERIT += \"rm_work\" You can read about the class in the \" rm_work.bbclass \" section of the Yocto Project Reference Manual for more information.","title":"Deleting Temporary Workspace"},{"location":"0_Getting_Started/2_Building_AGL_Image/4_Customizing_Your_Build/#pointing-at-shared-state-cache-locations","text":"The build system creates everything from scratch unless BitBake can determine that parts do not need to be rebuilt. Fundamentally, building from scratch is attractive as it means all parts are built fresh and there is no possibility of stale data causing problems. When developers hit problems, they typically default back to building from scratch so they know the state of things from the start. The build process uses Shared State Cache (sstate) to speed up subsequent builds. This cache retains artifacts that can be re-used once it is determined that they would not be different as compared to a re-built module. For the AGL build, you can specify the location for sstate files by including the following in the local.conf file: SSTATE_DIR = \" ${ AGL_TOP } /sstate-cache\" Also, in the local.conf file, you can specify additional directories in which the build system can look for shared state information. Use the following form in your file to list out the directories you want the build process to look at for sstate information: SSTATE_MIRRORS ? = \"\\ file://.* http://someserver.tld/share/sstate/PATH;downloadfilename=PATH \\n \\ file://.* file:///some/local/dir/sstate/PATH\" If you want to know more about the Yocto Project sstate mechanism, see the \" Shared State Cache \" section in the Yocto Project Reference Manual.","title":"Pointing at Shared State Cache Locations"},{"location":"0_Getting_Started/2_Building_AGL_Image/4_Customizing_Your_Build/#preserving-the-download-directory","text":"During the initial build, the system downloads many different source code tarballs from various upstream projects. Downloading these files can take a while, particularly if your network connection is slow. The process downloads files into a \" download directory \". The DL_DIR variable defines the download directory. For subsequent builds, you can preserve this directory to speed up the download part of a build. The default download directory is in a folder named \"downloads\". For the AGL build you can set the download directory by adding the following to your local.conf file: DL_DIR = \" ${ AGL_TOP } /downloads\"","title":"Preserving the Download Directory"},{"location":"0_Getting_Started/2_Building_AGL_Image/4_Customizing_Your_Build/#using-a-shared-state-sstate-mirror","text":"The underlying Yocto Project build system uses Shared State Mirrors to cache artifacts from previous builds. You can significantly speed up builds and guard against fetcher failures by using mirrors. To use mirrors, add this line to your local.conf file in the Build directory: SSTATE_MIRRORS_append = \" file://.* https://download.automotivelinux.org/sstate-mirror/master/ ${ DEFAULTTUNE } /PATH \\n \" You can learn more about shared state and how it is used in the \" Shared State Cache \" section of the Yocto Project Reference Manual.","title":"Using a Shared State (sstate) Mirror"},{"location":"0_Getting_Started/2_Building_AGL_Image/4_Customizing_Your_Build/#common-settings-using-symbolic-link-with-siteconf","text":"$ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ cd $AGL_TOP /master/qemux86-64/ $ ln -sf $AGL_TOP /site.conf conf/ In General ; $ cd $AGL_TOP /<release-branch-name>/<build-dir>/ $ ln -sf $AGL_TOP /site.conf conf/","title":"Common Settings using Symbolic Link with site.conf"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_0_Building_the_AGL_Image/","text":"Building the AGL image involves running BitBake with a specified target. Depending on whether you are building the image for the first time or if this is a subsequent build, the time needed for the build could be significant. It is critical that you specify the correct options and configurations for the build before executing the bitbake command. The previous sections in the \"Image Development Workflow\" have treated this setup in a generic fashion. AGL has both Qt based and HTML5 based IVI demos, where in the build process is almost the same except few changes in the build enviroment. This section, provides links to topics with instructions needed to create images for three types of supported platforms and for emulation using Quick EMUlator (QEMU) or VirtualBox: x86 (Emulation and Hardware) Raspberry Pi 4 R Car Gen 3","title":"Building the AGL Image"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_1_x86_Emulation_and_Hardware/","text":"Building an image for emulation allows you to simulate your image without actual target hardware. This section describes the steps you need to take to build the AGL demo image for emulation using either Quick EMUlator (QEMU) or VirtualBox, and later the same image can be used to boot any hardware. 1. Making Sure Your Build Environment is Correct The \" Initializing Your Build Environment \" section presented generic information for setting up your build environment using the aglsetup.sh script. If you are building the AGL demo image for emulation, you need to specify some specific options when you run the script: Qt based IVI demo : $ source meta-agl/scripts/aglsetup.sh -f -m qemux86-64 -b qemux86-64 agl-demo agl-devel $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ ln -sf $AGL_TOP /site.conf conf/ HTML5 based IVI demo : $ source meta-agl/scripts/aglsetup.sh -f -m qemux86-64 -b qemux86-64 agl-demo agl-devel agl-profile-graphical-html5 $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ ln -sf $AGL_TOP /site.conf conf/ The \"-m\" option specifies the \"qemux86-64\" machine. The list of AGL features used with script are appropriate for development of the AGL demo image suited for either QEMU or VirtualBox. 2. Using BitBake Start the build using the bitbake command. NOTE: An initial build can take many hours depending on your CPU and and Internet connection speeds. The build also takes approximately 100G-bytes of free disk space. Qt based IVI demo : The target is agl-demo-platform . $ time bitbake agl-demo-platform By default, the build process puts the resulting image in the Build Directory and further exporting that as $IMAGE_NAME : <build_directory>/tmp/deploy/images/qemux86-64/agl-demo-platform-qemux86-64.vmdk.xz $ export IMAGE_NAME = agl-demo-platform-qemux86-64.vmdk.xz HTML5 based IVI demo : The target is agl-demo-platform-html5 . $ time bitbake agl-demo-platform-html5 By default, the build process puts the resulting image in the Build Directory and further exporting that as $IMAGE_NAME : <build_directory>/tmp/deploy/images/qemux86-64/agl-demo-platform-html5-qemux86-64.vmdk.xz $ export IMAGE_NAME = agl-demo-platform-html5-qemux86-64.vmdk.xz 3. Deploying the AGL Demo Image Deploying the image consists of decompressing the image and then booting it using either QEMU, VirtualBox or physical system. 3.1 QEMU Depending on your Linux distribution, use these commands to install QEMU: If you built your image with bitbake, you can now just use the runqemu wrapper, after sourcing agl-init-build-env inside the build-dir : For this example : $ source $AGL_TOP /master/qemux86-64/agl-init-build-env In general : $ source $AGL_TOP /<release-branch-name>/<build-dir>/ And further use runqemu to boot the image : $ runqemu tmp/deploy/images/qemux86-64/agl-demo-platform-qemux86-64.qemuboot.conf kvm serialstdio slirp publicvnc audio If you need to run it outside of the bitbake environment or need special settings for hardware pass-through using qemu : NOTE: if you have created an AGL crosssdk, it will contain a QEMU binary for the build host. This SDK QEMU binary does not support graphics. Consequently, you cannot use it to boot the AGL image and need to call your host's qemu binary instead. NOTE: the VM images need UEFI in the emulator to boot. Thus you need to install the necessary files with below commands (ovmf). If your build host is running Arch Linux , use the following commands: sudo pacman -S qemu ovmf export OVMF_PATH = /usr/share/ovmf/x64/OVMF_CODE.fd If your build host is running Debian or Ubuntu, use the following commands: sudo apt-get install qemu-system-x86 ovmf export OVMF_PATH = /usr/share/ovmf/OVMF.fd If you build host is running Fedora, use the following commands: sudo yum install qemu qemu-kvm edk2-ovmf export OVMF_PATH = /usr/share/edk2/ovmf/OVMF_CODE.fd Note: Once QEMU is installed, boot the image with KVM support: qemu-system-x86_64 -enable-kvm -m 2048 \\ -bios ${ OVMF_PATH } \\ -hda ${ IMAGE_NAME } \\ -cpu kvm64 -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt \\ -vga virtio -show-cursor \\ -device virtio-rng-pci \\ -serial mon:stdio -serial null \\ -soundhw hda \\ -net nic \\ -net user,hostfwd = tcp::2222-:22 NOTE: KVM may not be supported within a virtualized environment such as VirtualBox. This is indicated by the qemu command above giving the error message Could not access KVM kernel module: No such file or directory or the kernel log output contains the error message kvm: no hardware support . The image can be booted in such an environment by removing -enable-kvm from the qemu command line, however this will result in lower perfromance within the AGL demo. 3.2 VirtualBox Once VirtualBox is installed, follow these steps to boot the image: Install and set up Virtual Box . Extract the vmdk file : cd tmp/deploy/images/qemux86-64 xz -d ${ IMAGE_NAME } Configure virtual box for AGL : Click on New or Add . Enter Name as agl-demo . Type as Linux . Version as Other Linux (64-bit) , click on Next . Select Memory size. Recommended is 2048 MB , click on Next . Click on Use an existing virtual hard disk file , and select the extracted agl-demo-platform-qemux86-64.vmdk.xz or <html5-image?> file, click on Create . Go to Settings , and into System . Select Chipset : IHC9 . Check on Enable EFI (special OSes only) and click on OK . Go to Storage , and change the attribute to Type : AHCI and click on OK . Click on Start . For troubleshooting, you can refer here . 3.3 x86 physical system NOTE : UEFI enabled system is required. Extract the image into USB drive : $ cd tmp/deploy/images/qemux86-64 $ lsblk $ sudo umount <usb_device_name> $ xzcat agl-demo-platform-qemux86-64.wic.xz | sudo dd of = <usb_device_name> bs = 4M $ sync Boot from USB drive on the x86 system.","title":"Building for x86 (Emulation and Hardware)"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_1_x86_Emulation_and_Hardware/#1-making-sure-your-build-environment-is-correct","text":"The \" Initializing Your Build Environment \" section presented generic information for setting up your build environment using the aglsetup.sh script. If you are building the AGL demo image for emulation, you need to specify some specific options when you run the script: Qt based IVI demo : $ source meta-agl/scripts/aglsetup.sh -f -m qemux86-64 -b qemux86-64 agl-demo agl-devel $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ ln -sf $AGL_TOP /site.conf conf/ HTML5 based IVI demo : $ source meta-agl/scripts/aglsetup.sh -f -m qemux86-64 -b qemux86-64 agl-demo agl-devel agl-profile-graphical-html5 $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ ln -sf $AGL_TOP /site.conf conf/ The \"-m\" option specifies the \"qemux86-64\" machine. The list of AGL features used with script are appropriate for development of the AGL demo image suited for either QEMU or VirtualBox.","title":"1. Making Sure Your Build Environment is Correct"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_1_x86_Emulation_and_Hardware/#2-using-bitbake","text":"Start the build using the bitbake command. NOTE: An initial build can take many hours depending on your CPU and and Internet connection speeds. The build also takes approximately 100G-bytes of free disk space. Qt based IVI demo : The target is agl-demo-platform . $ time bitbake agl-demo-platform By default, the build process puts the resulting image in the Build Directory and further exporting that as $IMAGE_NAME : <build_directory>/tmp/deploy/images/qemux86-64/agl-demo-platform-qemux86-64.vmdk.xz $ export IMAGE_NAME = agl-demo-platform-qemux86-64.vmdk.xz HTML5 based IVI demo : The target is agl-demo-platform-html5 . $ time bitbake agl-demo-platform-html5 By default, the build process puts the resulting image in the Build Directory and further exporting that as $IMAGE_NAME : <build_directory>/tmp/deploy/images/qemux86-64/agl-demo-platform-html5-qemux86-64.vmdk.xz $ export IMAGE_NAME = agl-demo-platform-html5-qemux86-64.vmdk.xz","title":"2. Using BitBake"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_1_x86_Emulation_and_Hardware/#3-deploying-the-agl-demo-image","text":"Deploying the image consists of decompressing the image and then booting it using either QEMU, VirtualBox or physical system. 3.1 QEMU Depending on your Linux distribution, use these commands to install QEMU: If you built your image with bitbake, you can now just use the runqemu wrapper, after sourcing agl-init-build-env inside the build-dir : For this example : $ source $AGL_TOP /master/qemux86-64/agl-init-build-env In general : $ source $AGL_TOP /<release-branch-name>/<build-dir>/ And further use runqemu to boot the image : $ runqemu tmp/deploy/images/qemux86-64/agl-demo-platform-qemux86-64.qemuboot.conf kvm serialstdio slirp publicvnc audio If you need to run it outside of the bitbake environment or need special settings for hardware pass-through using qemu : NOTE: if you have created an AGL crosssdk, it will contain a QEMU binary for the build host. This SDK QEMU binary does not support graphics. Consequently, you cannot use it to boot the AGL image and need to call your host's qemu binary instead. NOTE: the VM images need UEFI in the emulator to boot. Thus you need to install the necessary files with below commands (ovmf). If your build host is running Arch Linux , use the following commands: sudo pacman -S qemu ovmf export OVMF_PATH = /usr/share/ovmf/x64/OVMF_CODE.fd If your build host is running Debian or Ubuntu, use the following commands: sudo apt-get install qemu-system-x86 ovmf export OVMF_PATH = /usr/share/ovmf/OVMF.fd If you build host is running Fedora, use the following commands: sudo yum install qemu qemu-kvm edk2-ovmf export OVMF_PATH = /usr/share/edk2/ovmf/OVMF_CODE.fd Note: Once QEMU is installed, boot the image with KVM support: qemu-system-x86_64 -enable-kvm -m 2048 \\ -bios ${ OVMF_PATH } \\ -hda ${ IMAGE_NAME } \\ -cpu kvm64 -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt \\ -vga virtio -show-cursor \\ -device virtio-rng-pci \\ -serial mon:stdio -serial null \\ -soundhw hda \\ -net nic \\ -net user,hostfwd = tcp::2222-:22 NOTE: KVM may not be supported within a virtualized environment such as VirtualBox. This is indicated by the qemu command above giving the error message Could not access KVM kernel module: No such file or directory or the kernel log output contains the error message kvm: no hardware support . The image can be booted in such an environment by removing -enable-kvm from the qemu command line, however this will result in lower perfromance within the AGL demo. 3.2 VirtualBox Once VirtualBox is installed, follow these steps to boot the image: Install and set up Virtual Box . Extract the vmdk file : cd tmp/deploy/images/qemux86-64 xz -d ${ IMAGE_NAME } Configure virtual box for AGL : Click on New or Add . Enter Name as agl-demo . Type as Linux . Version as Other Linux (64-bit) , click on Next . Select Memory size. Recommended is 2048 MB , click on Next . Click on Use an existing virtual hard disk file , and select the extracted agl-demo-platform-qemux86-64.vmdk.xz or <html5-image?> file, click on Create . Go to Settings , and into System . Select Chipset : IHC9 . Check on Enable EFI (special OSes only) and click on OK . Go to Storage , and change the attribute to Type : AHCI and click on OK . Click on Start . For troubleshooting, you can refer here . 3.3 x86 physical system NOTE : UEFI enabled system is required. Extract the image into USB drive : $ cd tmp/deploy/images/qemux86-64 $ lsblk $ sudo umount <usb_device_name> $ xzcat agl-demo-platform-qemux86-64.wic.xz | sudo dd of = <usb_device_name> bs = 4M $ sync Boot from USB drive on the x86 system.","title":"3. Deploying the AGL Demo Image"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_2_Raspberry_Pi_4/","text":"The Raspberry Pi is a small computer that is ideal for learning computing and computer languages. The AGL Project supports building images for the Raspberry Pi 4 board. These board comes in a variety of models. See the Raspberry Pi Product Page for more information. This section describes the steps you need to take to build the AGL demo image for the Raspberry Pi 4 board. 1. Making Sure Your Build Environment is Correct The \" Initializing Your Build Environment \" section presented generic information for setting up your build environment using the aglsetup.sh script. If you are building the AGL demo image for a Raspberry Pi 4 board, you need to specify some specific options when you run the script : Qt based IVI demo : $ source meta-agl/scripts/aglsetup.sh -f -m raspberrypi4 -b raspberrypi4 agl-demo agl-devel $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ ln -sf $AGL_TOP /site.conf conf/ HTML5 based IVI demo : $ source meta-agl/scripts/aglsetup.sh -f -m raspberrypi4 -b raspberrypi4 agl-demo agl-devel agl-profile-graphical-html5 $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ ln -sf $AGL_TOP /site.conf conf/ In each case, the \"-m\" option specifies the machine and the list of AGL features used with script are appropriate for development of the AGL demo image suited for Raspberry Pi 4. 2. Configuring the Build to Include Packages Under a Commercial License Before launching the build, it is good to be sure your build configuration is set up correctly ( /build/conf/local.conf file). The \" Customizing Your Build \" section highlights some common configurations that are useful when building any AGL image. For the Raspberry Pi platforms, you need to take an additional configuration step if you want to include any packages under a commercial license. For example, suppose you want to include an implementation of the OpenMAX Intagration Library ( libomxil ) under a commercial license as part of your AGL image. If so, you must include the following two lines in your /build/conf/local.conf file: # For libomxil LICENSE_FLAGS_WHITELIST = \"commercial\" IMAGE_INSTALL_append = \"libomxil\" 3. Using BitBake This section shows the bitbake command used to build the AGL image. Start the build using the bitbake command. NOTE: An initial build can take many hours depending on your CPU and and Internet connection speeds. The build also takes approximately 100G-bytes of free disk space. Qt Based IVI demo : The target is agl-demo-platform . $ time bitbake agl-demo-platform By default, the build process puts the resulting image in the Build Directory and further exporting that as $IMAGE_NAME . Here is example for the Raspberry Pi 4 board for Qt Based demo: <build_dir>/tmp/deploy/images/raspberrypi4/agl-demo-platform-raspberrypi4.wic.xz $ export IMAGE_NAME = agl-demo-platform-raspberrypi4.wic.xz HTML5 Based IVI demo : The target is agl-demo-platform-html5 . $ time bitbake agl-demo-platform-html5 By default, the build process puts the resulting image in the Build Directory and further exporting that as $IMAGE_NAME . Here is example for the Raspberry Pi 4 board for HTML5 Based demo: <build_dir>/tmp/deploy/images/raspberrypi4/agl-demo-platform-html5-raspberrypi4-64.wic.xz $ export IMAGE_NAME = agl-demo-platform-html5-raspberrypi4-64.wic.xz 4. Deploying the AGL Demo Image Deploying the AGL demo image consists of copying the image on a MicroSD card, plugging the card into the Raspberry Pi board, and then booting the board. Follow these steps to copy the image to a MicroSD card and boot the image on the Raspberry Pi 4 board: Plug your MicroSD card into your Build Host (i.e. the system that has your build output). Extract the image into the SD card of Raspberry Pi 4 : NOTE: For Raspberry Pi 4, the image is at <build-dir>/tmp/deploy/images/raspberrypi4/${IMAGE_NAME} . Be sure you are root, provide the actual device name for sdcard_device_name , and the actual image name for image_name . $ lsblk $ sudo umount <sdcard_device_name> $ xzcat ${ IMAGE_NAME } | sudo dd of = <sdcard_device_name> bs = 4M $ sync IMPORTANT NOTE: Before re-writing any device on your Build Host, you need to be sure you are actually writing to the removable MicroSD card and not some other device. Each computer is different and removable devices can change from time to time. Consequently, you should repeat the previous operation with the MicroSD card to confirm the device name every time you write to the card. To summarize this example so far, we have the following: The first SATA drive is /dev/sda and /dev/sdc corresponds to the MicroSD card, and is also marked as a removable device.You can see this in the output of the lsblk command where \"1\" appears in the \"RM\" column for that device. SSH into Raspberry Pi : Connect Raspberry Pi to network : Homescreen > Settings , IP address mentioned here. SSH : $ ssh root@<Raspberry-Pi-ip-address> Serial Debugging : When things go wrong, you can take steps to debug your Raspberry Pi. For debugging, you need a 3.3 Volt USB Serial cable to fascilitate communication between your Raspberry Pi board and your build host. You can reference the following diagram for information on the following steps: Connect the TTL cable to the Universal Asynchronous Receiver-Transmitter (UART) connection on your Raspberry Pi board. Do not connect the USB side of the cable to your build host at this time. CAUTION: No warranty is provided using the following procedure. Pay particular attention to the collors of your cable as they could vary depending on the vendor. Connect the cable's BLUE wire to pin 6 (i.e. Ground) of the UART. Connect the able's GREEN RX line to pin 8 (i.e. the TXD line) of the UART. Connect the cable's RED TX line to pin 10 (i.e. the RXD line) of the UART. Plug the USB connector of the cable into your build host's USB port. Use your favorite tool for serial communication between your build host and your Raspberry Pi. For example, if your build host is a native Linux machine (e.g. Ubuntu) you could use screen as follows from a terminal on the build host: $ sudo screen /dev/ttyUSB0 115200 SOTA Follow the step below to build AGL for Raspberry Pi with enabled software over the air (SOTA) updates: Include agl-sota feature. In bblayers.conf replace meta-updater-qemux86-64 with meta-updater-raspberrypi . In local.conf set SOTA_PACKED_CREDENTIALS and OSTREE_BRANCHNAME . More details are available here .","title":"Building for Raspberry Pi 4"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_2_Raspberry_Pi_4/#1-making-sure-your-build-environment-is-correct","text":"The \" Initializing Your Build Environment \" section presented generic information for setting up your build environment using the aglsetup.sh script. If you are building the AGL demo image for a Raspberry Pi 4 board, you need to specify some specific options when you run the script : Qt based IVI demo : $ source meta-agl/scripts/aglsetup.sh -f -m raspberrypi4 -b raspberrypi4 agl-demo agl-devel $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ ln -sf $AGL_TOP /site.conf conf/ HTML5 based IVI demo : $ source meta-agl/scripts/aglsetup.sh -f -m raspberrypi4 -b raspberrypi4 agl-demo agl-devel agl-profile-graphical-html5 $ echo '# reuse download directories' >> $AGL_TOP /site.conf $ echo 'DL_DIR = \"$HOME/downloads/\"' >> $AGL_TOP /site.conf $ echo 'SSTATE_DIR = \"$AGL_TOP/sstate-cache/\"' >> $AGL_TOP /site.conf $ ln -sf $AGL_TOP /site.conf conf/ In each case, the \"-m\" option specifies the machine and the list of AGL features used with script are appropriate for development of the AGL demo image suited for Raspberry Pi 4.","title":"1. Making Sure Your Build Environment is Correct"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_2_Raspberry_Pi_4/#2-configuring-the-build-to-include-packages-under-a-commercial-license","text":"Before launching the build, it is good to be sure your build configuration is set up correctly ( /build/conf/local.conf file). The \" Customizing Your Build \" section highlights some common configurations that are useful when building any AGL image. For the Raspberry Pi platforms, you need to take an additional configuration step if you want to include any packages under a commercial license. For example, suppose you want to include an implementation of the OpenMAX Intagration Library ( libomxil ) under a commercial license as part of your AGL image. If so, you must include the following two lines in your /build/conf/local.conf file: # For libomxil LICENSE_FLAGS_WHITELIST = \"commercial\" IMAGE_INSTALL_append = \"libomxil\"","title":"2. Configuring the Build to Include Packages Under a Commercial License"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_2_Raspberry_Pi_4/#3-using-bitbake","text":"This section shows the bitbake command used to build the AGL image. Start the build using the bitbake command. NOTE: An initial build can take many hours depending on your CPU and and Internet connection speeds. The build also takes approximately 100G-bytes of free disk space. Qt Based IVI demo : The target is agl-demo-platform . $ time bitbake agl-demo-platform By default, the build process puts the resulting image in the Build Directory and further exporting that as $IMAGE_NAME . Here is example for the Raspberry Pi 4 board for Qt Based demo: <build_dir>/tmp/deploy/images/raspberrypi4/agl-demo-platform-raspberrypi4.wic.xz $ export IMAGE_NAME = agl-demo-platform-raspberrypi4.wic.xz HTML5 Based IVI demo : The target is agl-demo-platform-html5 . $ time bitbake agl-demo-platform-html5 By default, the build process puts the resulting image in the Build Directory and further exporting that as $IMAGE_NAME . Here is example for the Raspberry Pi 4 board for HTML5 Based demo: <build_dir>/tmp/deploy/images/raspberrypi4/agl-demo-platform-html5-raspberrypi4-64.wic.xz $ export IMAGE_NAME = agl-demo-platform-html5-raspberrypi4-64.wic.xz","title":"3. Using BitBake"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_2_Raspberry_Pi_4/#4-deploying-the-agl-demo-image","text":"Deploying the AGL demo image consists of copying the image on a MicroSD card, plugging the card into the Raspberry Pi board, and then booting the board. Follow these steps to copy the image to a MicroSD card and boot the image on the Raspberry Pi 4 board: Plug your MicroSD card into your Build Host (i.e. the system that has your build output). Extract the image into the SD card of Raspberry Pi 4 : NOTE: For Raspberry Pi 4, the image is at <build-dir>/tmp/deploy/images/raspberrypi4/${IMAGE_NAME} . Be sure you are root, provide the actual device name for sdcard_device_name , and the actual image name for image_name . $ lsblk $ sudo umount <sdcard_device_name> $ xzcat ${ IMAGE_NAME } | sudo dd of = <sdcard_device_name> bs = 4M $ sync IMPORTANT NOTE: Before re-writing any device on your Build Host, you need to be sure you are actually writing to the removable MicroSD card and not some other device. Each computer is different and removable devices can change from time to time. Consequently, you should repeat the previous operation with the MicroSD card to confirm the device name every time you write to the card. To summarize this example so far, we have the following: The first SATA drive is /dev/sda and /dev/sdc corresponds to the MicroSD card, and is also marked as a removable device.You can see this in the output of the lsblk command where \"1\" appears in the \"RM\" column for that device. SSH into Raspberry Pi : Connect Raspberry Pi to network : Homescreen > Settings , IP address mentioned here. SSH : $ ssh root@<Raspberry-Pi-ip-address> Serial Debugging : When things go wrong, you can take steps to debug your Raspberry Pi. For debugging, you need a 3.3 Volt USB Serial cable to fascilitate communication between your Raspberry Pi board and your build host. You can reference the following diagram for information on the following steps: Connect the TTL cable to the Universal Asynchronous Receiver-Transmitter (UART) connection on your Raspberry Pi board. Do not connect the USB side of the cable to your build host at this time. CAUTION: No warranty is provided using the following procedure. Pay particular attention to the collors of your cable as they could vary depending on the vendor. Connect the cable's BLUE wire to pin 6 (i.e. Ground) of the UART. Connect the able's GREEN RX line to pin 8 (i.e. the TXD line) of the UART. Connect the cable's RED TX line to pin 10 (i.e. the RXD line) of the UART. Plug the USB connector of the cable into your build host's USB port. Use your favorite tool for serial communication between your build host and your Raspberry Pi. For example, if your build host is a native Linux machine (e.g. Ubuntu) you could use screen as follows from a terminal on the build host: $ sudo screen /dev/ttyUSB0 115200 SOTA Follow the step below to build AGL for Raspberry Pi with enabled software over the air (SOTA) updates: Include agl-sota feature. In bblayers.conf replace meta-updater-qemux86-64 with meta-updater-raspberrypi . In local.conf set SOTA_PACKED_CREDENTIALS and OSTREE_BRANCHNAME . More details are available here .","title":"4. Deploying the AGL Demo Image"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/","text":"Building for Supported Renesas Boards AGL supports building for several automotive Renesas board kits. Renesas is the number one supplier of vehicle control microcontrollers and System on a Chip (SoC) products for the automotive industry. This section provides the build and deploy steps you need to create an image for the following Renesas platforms: Renesas R-Car Starter Kit Pro Board Renesas R-Car Starter Kit Premier Board Renesas Salvator-X Board Renesas Kingfisher Infotainment Board NOTE: You can find similar information for the Pro and Premier board kits on the R-Car/Boards/Yocto-Gen3 page. The information on this page describes setup and build procedures for both these Renesas development kits. 1. Downloading Proprietary Drivers Before setting up the build environment, you need to download proprietary drivers from the R-Car H3/M3 Software library and Technical document site. Follow these steps to download the drivers you need: Determine the Files You Need: Run the setup_mm_packages.sh script as follows to display the list of ZIP files containing the drivers you need. Following is an example: grep -rn ZIP_. = $AGL_TOP /meta-agl/meta-agl-bsp/meta-rcar-gen3/scripts/setup_mm_packages.sh The script's output identifies the files you need to download from the page. Get Your Board Support Package (BSP) Version: Be sure to have the correct BSP version of the R-Car Starter Kit based on the version of the AGL software you are using. Find the appropriate download links on the R-Car H3/M3 Software library and Technical document site. The file pairs are grouped according to the Yocto Project version you are using with the AGL software. Use the following table to map the Renesas version to your AGL software: AGL Version Renesas version AGL master 4.1.0 Download the Files: Start the download process by clicking the download link. If you do not have an account with Renesas, you will be asked to register a free account. You must register and follow the \"Click Through\" licensing process in order to download these proprietary files. If needed, follow the instructions to create the free account by providing the required account information. Once the account is registered and you are logged in, you can download the files. NOTE: You might have to re-access the original page that contains the download links you need after creating the account and logging in. Create an Environment Variable to Point to Your Download Area: Create and export an environment variable named XDG_DOWNLOAD_DIR that points to your download directory. Here is an example: $ export XDG_DOWNLOAD_DIR = $HOME /Downloads Be Sure the Files Have Rights: Be sure you have the necessary rights for the files you downloaded. You can use the following command: chmod a+x $XDG_DOWNLOAD_DIR /*.zip Check to be Sure the Files are Downloaded and Have the Correct Rights: Do a quick listing of the files to ensure they are in the download directory and they have the correct access rights. Here is an example: $ ls -l $XDG_DOWNLOAD_DIR /*.zip -rw-rw-r-- 1 scottrif scottrif 4662080 Nov 19 14 :48 /home/scottrif/Downloads/R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-weston8-20200923.zip -rw-rw-r-- 1 scottrif scottrif 3137626 Nov 19 14 :49 /home/scottrif/Downloads/R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-weston8-20200923.zip 2. Getting More Software Get the bmaptool : Download this tool from the bmap-tools repository. The site has pre-built packages (DEB or RPM) for the supported host operating systems. 3. Getting Your Hardware Together Gather together this list of hardware items, which is not exhaustive. Having these items ahead of time saves you from having to try and collect hardware during development: Supported Starter Kit Gen3 board with its 5V power supply. Micro USB-A cable for serial console. This cable is optional if you are using Ethernet and an SSH connection. USB 2.0 Hub. The hub is optional but makes it easy to connect multiple USB devices. Ethernet cable. The cable is optional if you are using a serial console. HDMI type D (Micro connector) cable and an associated display. 4 Gbyte minimum MicroSD Card. It is recommended that you use a class 10 type. USB touch screen device such as the GeChic 1502i/1503i. A touch screen device is optional. NOTE: The Salvator-X Board has NDA restrictions. Consequently, less documentation is available for this board both here and across the Internet. 4. Making Sure Your Build Environment is Correct The \" Initializing Your Build Environment \" section presented generic information for setting up your build environment using the aglsetup.sh script. If you are building an image for a supported Renesas board, you need to take steps to make sure your build host is set up correctly. Define Your Board: Depending on your Renesas board, define and export a MACHINE variable as follows: Board MACHINE Setting Starter Kit Pro/M3 MACHINE =m3ulcb Starter Kit Pro/M3 + kingfisher support MACHINE =m3ulcb-kf Starter Kit Pro/M3 without graphic MACHINE =m3ulcb-nogfx Starter Kit Premier/H3 MACHINE =h3ulcb Starter Kit Premier/H3 + kingfisher support MACHINE =h3ulcb-kf Starter Kit Premier/H3 without graphic MACHINE =h3ulcb-nogfx Salvator-X MACHINE =h3-salvator-x For example, the following command defines and exports the MACHINE variable for the Starter Kit Pro/M3 Board: $ export MACHINE = m3ulcb Run the aglsetup.sh Script: Use the following commands to run the AGL Setup script: $ cd $AGL_TOP $ source meta-agl/scripts/aglsetup.sh -m $MACHINE -b build agl-devel agl-demo NOTE: Running the aglsetup.sh script automatically places you in the working directory (i.e. $AGL_TOP/build ). You can change this default behavior by adding the \"-f\" option to the script's command line. In the previous command, the \"-m\" option sets your machine to the previously defined MACHINE variable. The \"-b\" option defines your Build Directory, which is the default $AGL_TOP/build . Finally, the AGL features are provided to support building the AGL Demo image for the Renesas board. You can learn more about the AGL Features in the \" Initializing Your Build Environment \" section. Examine the Script's Log: Running the aglsetup.sh script creates the setup.log file, which is in the build/conf folder. You can examine this log to see the results of the script. For example, suppose the graphics drivers were missing or could not be extracted when you ran the script. In case of missing graphics drivers, you could notice an error message similar to the following: [snip] --- fragment /home/working/workspace_agl_master/meta-agl/templates/machine/h3ulcb/50_setup.sh /home/working/workspace_agl_master /home/working/workspace_agl_master/build_gen3 The graphics and multimedia acceleration packages for the R-Car Gen3 board can be downloaded from: https://www.renesas.com/en-us/solutions/automotive/rcar-demoboard-2.html These 2 files from there should be store in your'/home/devel/Downloads' directory. R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-weston5-20190802.zip R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-weston5-20190802.zip /home/working/workspace_agl_master/build_gen3 --- fragment /home/working/workspace_agl_master/meta-agl/templates/base/99_setup_EULAconf.sh --- end of setup script OK Generating setup file: /home/working/workspace_agl_master/build_gen3/agl-init-build-env ... OK ------------ aglsetup.sh: Done [snip] If you encounter this issue, or any other unwanted behavior, you can fix the error mentioned, remove the $AGL_TOP/build directory, and then re-launch the aglsetup.sh again. Here is another example that indicates the driver files could not be extracted from the downloads directory: [snip] ~/workspace_agl/build/conf $ cat setup.log --- beginning of setup script --- fragment /home/working/workspace_agl/meta-agl/templates/base/01_setup_EULAfunc.sh --- fragment /home/working/workspace_agl/meta-agl/templates/machine/m3ulcb/50_setup.sh ~/workspace_agl ~/workspace_agl/build ERROR: FILES \"+/home/working/Downloads/R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-weston5-20190802.zip+\" NOT EXTRACTING CORRECTLY ERROR: FILES \"+/home/working/Downloads/R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-weston5-20190802.zip+\" NOT EXTRACTING CORRECTLY The graphics and multimedia acceleration packages for the R-Car Gen3 board BSP can be downloaded from: These 2 files from there should be stored in your '/home/working/Downloads' directory. R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-weston5-20190802.zip R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-weston5-20190802.zip ERROR: Script /home/working/workspace_agl/build/conf/setup.sh failed [snip] 5. Checking Your Configuration Aside from environment variables and parameters you establish through running the aglsetup.sh script, you can ensure your build's configuration is just how you want it by examining the local.conf configuration file. You can find this configuration file in the Build Directory (e.g. \"$TOP_DIR/build/conf/local.conf\"). In general, the defaults along with the configuration fragments the aglsetup.sh script applies in the local.conf file are good enough. However, you can customize aspects by editing the local.conf file. See the \" Customizing Your Build \" section for common configurations you might want to consider. NOTE: For detailed explanations of the configurations you can make in the local.conf file, consult the Yocto Project Documentation . A quick way to see if you have the $MACHINE variable set correctly is to use the following command: grep -w -e \"^MACHINE =\" $AGL_TOP /build/conf/local.conf Depending on the Renesas board you are using, you should see output as follows: MACHINE = \"h3ulcb\" or MACHINE = \"m3ulcb\" or MACHINE = \"h3-salvator-x\" If you ran the aglsetup.sh script as described in the \" Making Sure Your Build Environment is Correct \" section earlier, the \"agl-devel\", \"agl-demo\", \"agl-netboot\", \"agl-appfw-smack\", and \"agl-localdev\" AGL features will be in effect. These features provide the following: A debugger (gdb) Some tweaks, including a disabled root password A SFTP server The TCF Agent for easier application deployment and remote debugging Some extra system tools such as USB and bluetooth Support for the AGL demo platform Network boot support through TFTP and NBD protocols IoT.bzh Application Framework plus SMACK and Cynara Support for local development including localdev.inc when present 6. Using BitBake This section shows the bitbake command used to build the AGL image. Before running BitBake to start your build, it is good to be reminded that AGL does provide pre-built images for developers that work with supported hardware. You can find these pre-built images on the AGL Download web site . Start the build using the bitbake command. NOTE: An initial build can take many hours depending on your CPU and and Internet connection speeds. The build also takes approximately 100G-bytes of free disk space. For this example, the target is \"agl-demo-platform\": bitbake agl-demo-platform The build process puts the resulting image in the Build Directory: <build_directory>/tmp/deploy/images/$MACHINE 7. Booting the Image Using a MicroSD Card To boot your image on the Renesas board, you need to do three things: Update all firmware on the board. Prepare the MicroSD card to you can boot from it. Boot the board. NOTE: For subsequent builds, you only have to re-write the MicroSD card with a new image. Updating the Board's Firmware Follow these steps to update the firmware: Update the Sample Loader and MiniMonitor: You only need to make these updates one time per device. Follow the procedure found on the eLinux.org wiki to update to at least version 3.02, which is mandatory to run the AGL image ( R-car loader update ). Update the Firmware Stack: You only need to update the firmware stack if you are using the Eel or later (5.0) version of AGL software. M3 and H3 Renesas board are AArch64 platforms. As such, they have a firmware stack that is divided across: ARM Trusted Firmware , OP-Tee and U-Boot . If you are using the Eel (5.0) version or later of the AGL software, you must update the firmware using the [h3ulcb] R-car h3ulcb firmware update or [m3ulcb] R-car m3ulcb firmware update links from the Embedded Linux Wiki (i.e. elinux.org ). The table in the wiki lists the files you need to flash the firmware. You can find these files in the following directory: $AGL_TOP /build/tmp/deploy/images/ $MACHINE NOTE: The Salvator-X firmware update process is not documented on eLinux. Preparing the MicroSD Card Plug the MicroSD card into your Build Host. After plugging in the device, use the `dmesg` command as follows to discover the device name: $ dmesg | tail -4 [ 1971.462160] sd 6:0:0:0: [sdc] Mode Sense: 03 00 00 00 [ 1971.462277] sd 6:0:0:0: [sdc] No Caching mode page found [ 1971.462278] sd 6:0:0:0: [sdc] Assuming drive cache: write through [ 1971.463870] sdc: sdc1 sdc2 In the previous example, the MicroSD card is attached to the device /dev/sdc . You can also use the `lsblk` command to show all your devices. Here is an example that shows the MicroSD card as `/dev/sdc`: $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 167,7G 0 disk \u251c\u2500sda1 8:1 0 512M 0 part /boot/efi \u251c\u2500sda2 8:2 0 159,3G 0 part / \u2514\u2500sda3 8:3 0 7,9G 0 part [SWAP] sdb 8:16 0 931,5G 0 disk \u2514\u2500sdb1 8:17 0 931,5G 0 part /media/storage sdc 8:32 1 14,9G 0 disk \u251c\u2500sdc1 8:33 1 40M 0 part \u2514\u2500sdc2 8:34 1 788M 0 part IMPORTANT NOTE: Before re-writing any device on your Build Host, you need to be sure you are actually writing to the removable MicroSD card and not some other device. Each computer is different and removable devices can change from time to time. Consequently, you should repeat the previous operation with the MicroSD card to confirm the device name every time you write to the card. To summarize this example so far, we have the following: The first SATA drive is /dev/sda . /dev/sdc corresponds to the MicroSD card, and is also marked as a removable device. You can see this in the output of the lsblk command where \"1\" appears in the \"RM\" column for that device. Now that you have identified the device you are going to be writing the image on, you can use the bmaptool to copy the image to the MicroSD card. Your desktop system might offer a choice to mount the MicroSD automatically in some directory. For this example, assume that the MicroSD card mount directory is stored in the $SDCARD variable. Following are example commands that write the image to the MicroSD card: cd $AGL_TOP /build/tmp/deploy/images/ $MACHINE bmaptool copy ./agl-demo-platform- $MACHINE .wic.xz <boot_device_name> Alternatively, you can leave the image in an uncompressed state and write it to the MicroSD card: sudo umount <boot_device_name> xzcat ./agl-demo-platform- $MACHINE .wic.xz | sudo dd of = <boot_device_name> bs = 4M sync Booting the Board Follow these steps to boot the board: Use the board's power switch to turn off the board. Insert the MicroSD card into the board. Verify that you have plugged in the following: An external monitor into the board's HDMI port An input device (e.g. keyboard, mouse, touchscreen, and so forth) into the board's USB ports. Use the board's power switch to turn on the board. After a few seconds, you will see the AGL splash screen on the display and you will be able to log in at the console's terminal or using the graphic screen. 8. Setting Up the Serial Console Setting up the Serial Console involves the following: Installing a serial client on your build host Connecting your build host to your Renesas board's serial port Powering on the board to get a shell at the console Configuring U-Boot parameters Logging into the console Determining the board's IP address Installing a Serial Client on Your Build Host You need to install a serial client on your build host. Some examples are GNU Screen , picocom , and Minicom . Of these three, \"picocom\" has less dependencies and is therefore considered the \"lightest\" solution. Connecting Your Build Host to Your Renesas Board's Serial Port You need to physically connect your build host to the Renesas board using a USB cable from the host to the serial CP2102 USP port (i.e. Micro USB-A port) on the Renesas board. Once you connect the board, determine the device created for the serial link. Use the ``dmesg`` command on your build host. Here is an example: dmesg | tail 9 [2097783.287091] usb 2-1.5.3: new full-speed USB device number 24 using ehci-pci [2097783.385857] usb 2-1.5.3: New USB device found, idVendor=0403, idProduct=6001 [2097783.385862] usb 2-1.5.3: New USB device strings: Mfr=1, Product=2, SerialNumber=3 [2097783.385864] usb 2-1.5.3: Product: FT232R USB UART [2097783.385866] usb 2-1.5.3: Manufacturer: FTDI [2097783.385867] usb 2-1.5.3: SerialNumber: AK04WWCE [2097783.388288] ftdi_sio 2-1.5.3:1.0: FTDI USB Serial Device converter detected [2097783.388330] usb 2-1.5.3: Detected FT232RL [2097783.388658] usb 2-1.5.3: FTDI USB Serial Device converter now attached to ttyUSB0 The device created is usually \"/dev/ttyUSB0\". However, the number might vary depending on other USB serial ports connected to the host. To use the link, you need to launch the client. Here are three commands, which vary based on the serial client, that show how to launch the client: $ picocom -b 115200 /dev/ttyUSB0 or $ minicom -b 115200 -D /dev/ttyUSB0 or $ screen /dev/ttyUSB0 115200 Powering on the Board to Get a Shell at the Console Both the Pro and Premier kits (e.g. m3ulcb and h3ulcb ) have nine switches (SW1 through SW9). To power on the board, \"short-press\" SW8, which is the power switch. Following, is console output for the power on process for each kit: h3ulcb: NOTICE: BL2: R-Car Gen3 Initial Program Loader(CA57) Rev.1.0.7 NOTICE: BL2: PRR is R-Car H3 ES1.1 NOTICE: BL2: LCM state is CM NOTICE: BL2: DDR1600(rev.0.15) NOTICE: BL2: DRAM Split is 4ch NOTICE: BL2: QoS is Gfx Oriented(rev.0.30) NOTICE: BL2: AVS setting succeeded. DVFS_SetVID=0x52 NOTICE: BL2: Lossy Decomp areas NOTICE: Entry 0: DCMPAREACRAx:0x80000540 DCMPAREACRBx:0x570 NOTICE: Entry 1: DCMPAREACRAx:0x40000000 DCMPAREACRBx:0x0 NOTICE: Entry 2: DCMPAREACRAx:0x20000000 DCMPAREACRBx:0x0 NOTICE: BL2: v1.1(release):41099f4 NOTICE: BL2: Built : 19:20:52, Jun 9 2016 NOTICE: BL2: Normal boot NOTICE: BL2: dst=0xe63150c8 src=0x8180000 len=36(0x24) NOTICE: BL2: dst=0x43f00000 src=0x8180400 len=3072(0xc00) NOTICE: BL2: dst=0x44000000 src=0x81c0000 len=65536(0x10000) NOTICE: BL2: dst=0x44100000 src=0x8200000 len=524288(0x80000) NOTICE: BL2: dst=0x49000000 src=0x8640000 len=1048576(0x100000) U-Boot 2015.04 (Jun 09 2016 - 19:21:52) CPU: Renesas Electronics R8A7795 rev 1.1 Board: H3ULCB I2C: ready DRAM: 3.9 GiB MMC: sh-sdhi: 0, sh-sdhi: 1 In: serial Out: serial Err: serial Net: Board Net Initialization Failed No ethernet found. Hit any key to stop autoboot: 0 => m3ulcb: NOTICE: BL2: R-Car Gen3 Initial Program Loader(CA57) Rev.1.0.14 NOTICE: BL2: PRR is R-Car M3 Ver1.0 NOTICE: BL2: Board is Starter Kit Rev1.0 NOTICE: BL2: Boot device is HyperFlash(80MHz) NOTICE: BL2: LCM state is CM NOTICE: BL2: AVS setting succeeded. DVFS_SetVID=0x52 NOTICE: BL2: DDR1600(rev.0.22)NOTICE: [COLD_BOOT]NOTICE: ..0 NOTICE: BL2: DRAM Split is 2ch NOTICE: BL2: QoS is default setting(rev.0.17) NOTICE: BL2: Lossy Decomp areas NOTICE: Entry 0: DCMPAREACRAx:0x80000540 DCMPAREACRBx:0x570 NOTICE: Entry 1: DCMPAREACRAx:0x40000000 DCMPAREACRBx:0x0 NOTICE: Entry 2: DCMPAREACRAx:0x20000000 DCMPAREACRBx:0x0 NOTICE: BL2: v1.3(release):4eef9a2 NOTICE: BL2: Built : 00:25:19, Aug 25 2017 NOTICE: BL2: Normal boot NOTICE: BL2: dst=0xe631e188 src=0x8180000 len=512(0x200) NOTICE: BL2: dst=0x43f00000 src=0x8180400 len=6144(0x1800) NOTICE: BL2: dst=0x44000000 src=0x81c0000 len=65536(0x10000) NOTICE: BL2: dst=0x44100000 src=0x8200000 len=524288(0x80000) NOTICE: BL2: dst=0x50000000 src=0x8640000 len=1048576(0x100000) U-Boot 2015.04-dirty (Aug 25 2017 - 10:55:49) CPU: Renesas Electronics R8A7796 rev 1.0 Board: M3ULCB I2C: ready DRAM: 1.9 GiB MMC: sh-sdhi: 0, sh-sdhi: 1 In: serial Out: serial Err: serial Net: ravb Hit any key to stop autoboot: 0 => 9. Setting-up U-boot Configuring U-Boot Parameters Follow these steps to configure the board to use the MicroSD card as the boot device and also to set the screen resolution: As the board is powering up, press any key to stop the autoboot process. You need to press a key quickly as you have just a few seconds in which to press a key. Once the autoboot process is interrupted, use the board's serial console to enter printenv to check if you have correct parameters for booting your board: Here is an example using the h3ulcb board: => printenv baudrate=115200 bootargs=console=ttySC0,115200 root=/dev/mmcblk1p1 rootwait ro rootfstype=ext4 bootcmd=run load_ker; run load_dtb; booti 0x48080000 - 0x48000000 bootdelay=3 fdt_high=0xffffffffffffffff initrd_high=0xffffffffffffffff load_dtb=ext4load mmc 0:1 0x48000000 /boot/r8a7795-h3ulcb.dtb load_ker=ext4load mmc 0:1 0x48080000 /boot/Image stderr=serial stdin=serial stdout=serial ver=U-Boot 2015.04 (Jun 09 2016 - 19:21:52) Environment size: 648/131068 bytes Here is a second example using the m3ulcb board: => printenv baudrate=115200 bootargs=console=ttySC0,115200 root=/dev/mmcblk1p1 rootwait ro rootfstype=ext4 bootcmd=run load_ker; run load_dtb; booti 0x48080000 - 0x48000000 bootdelay=3 fdt_high=0xffffffffffffffff filesize=cdeb initrd_high=0xffffffffffffffff load_dtb=ext4load mmc 0:1 0x48000000 /boot/r8a7796-m3ulcb.dtb load_ker=ext4load mmc 0:1 0x48080000 /boot/Image stderr=serial stdin=serial stdout=serial ver=U-Boot 2015.04 (Nov 30 2016 - 18:25:18) Environment size: 557/131068 bytes To boot your board using the MicroSD card, be sure your environment is set up as follows: setenv bootargs console = ttySC0,115200 ignore_loglevel vmalloc = 384M video = HDMI-A-1:1920x1080-32@60 root = /dev/mmcblk1p1 rw rootfstype = ext4 rootwait rootdelay = 2 setenv bootcmd run load_ker \\; run load_dtb \\; booti 0x48080000 - 0x48000000 setenv load_ker ext4load mmc 0 :1 0x48080000 /boot/Image Loading dtb : NOTE : Refer here for more information. Make sure your load_dtb is set as follows : H3SK v2.0(DDR 4GB) : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7795-h3ulcb.dtb H3SK v2.0(DDR 8GB)/v3.0(DDR 8GB) : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7795-h3ulcb-4x2g.dtb M3SK v1.0 : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7796-m3ulcb.dtb M3SK v3.0 : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7796-m3ulcb-2x4g.dtb H3SK with a Kingfisher board : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7795-h3ulcb-kf.dtb M3SK with a Kingfisher board : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7796-m3ulcb-kf.dtb Save the boot environment: saveenv Boot the board: run bootcmd 10. Troubleshooting Logging Into the Console Once the board boots, you should see the Wayland display on the external monitor. A login prompt should appear as follows depending on your board: h3ulcb : Automotive Grade Linux ${ AGL_VERSION } h3ulcb ttySC0 h3ulcb login: root m3ulcb : Automotive Grade Linux ${ AGL_VERSION } m3ulcb ttySC0 m3ulcb login: root At the prompt, login by using root as the login. The password is \"empty\" so you should not be prompted for the password. Determining the Board's IP Address If your board is connected to a local network using Ethernet and if a DHCP server is able to distribute IP addresses, you can determine the board's IP address and log in using ssh . Here is an example for the m3ulcb board: m3ulcb login: root Last login: Tue Dec 6 09:55:15 UTC 2016 on tty2 root@m3ulcb:~# ip -4 a 1: lo: mtu 65536 qdisc noqueue state UNKNOWN group default inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 3: eth0: mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 inet 10.0.0.27/24 brd 10.0.0.255 scope global eth0 valid_lft forever preferred_lft forever root@m3ulcb:~# In the previous example, IP address is 10.0.0.27. Once you know the address, you can use `ssh` to login. Following is an example that shows logging into SSH and then displaying the contents of the `/etc/os-release` file: $ ssh root@10.0.0.27 Last login: Tue Dec 6 10:01:11 2016 from 10.0.0.13 root@m3ulcb:~# cat /etc/os-release ID=\"poky-agl\" NAME=\"Automotive Grade Linux\" VERSION=\"3.0.0+snapshot-20161202 (chinook)\" VERSION_ID=\"3.0.0-snapshot-20161202\" PRETTY_NAME=\"Automotive Grade Linux 3.0.0+snapshot-20161202 (chinook)\" NOTE: More generics troubleshooting can be found here : Generic issues 11. Supplementary Information R-Car Generation 3 Information Refer to the following for more information from eLinux website . Proprietary libraries for meta-rcar-gen3 The meta-rcar-gen3 layer of meta-renesas is supported Graphic GLES(GSX) libraries, proprietary library of multimedia, and ICCOM software. Build with Renesas multimedia libraries Multimedia portions depend on GLES portions. A. Configuration for Multimedia features Please copy proprietary libraries to the directory of recipes. Please set local.conf the following. Enable multimedia features. This provides package group of plug-ins of the GStreamer, multimedia libraries and kernel drivers. MACHINE_FEATURES_append = \" multimedia\" B. Configuration for optional codecs and middleware Please copy proprietary libraries to the directory of recipes. Add features to DISTRO_FEATURES_append to local.conf **Additional configuration in OMX module** \" h263dec_lib\" - for OMX Media Component H263 Decoder Library \" h264dec_lib\" - for OMX Media Component H264 Decoder Library \" h264enc_lib\" - for OMX Media Component H.264 Encoder Library \" h265dec_lib\" - for OMX Media Component H265 Decoder Library \" mpeg2dec_lib\" - for OMX Media Component MPEG2 Decoder Library \" mpeg4dec_lib\" - for OMX Media Component MPEG4 Decoder Library \" vc1dec_lib\" - for OMX Media Component VC-1 Decoder Library \" divxdec_lib\" - for OMX Media Component DivX Decoder Library \" rvdec_lib\" - for OMX Media Component RealVideo Decoder Library \" alacdec_lib\" - for OMX Media Component ALAC Decoder Library \" flacdec_lib\" - for OMX Media Component FLAC Decoder Library \" aaclcdec_lib\" - for OMX Media Component AAC-LC Decoder Library \" aaclcdec_mdw\" - for AAC-LC 2ch Decoder Middleware for Linux \" aacpv2dec_lib\" - for OMX Media Component aacPlus V2 Decoder Library \" aacpv2dec_mdw\" - for aacPlus V2 Decoder Middleware for Linux \" dddec_lib\" - for OMX Media Component Dolby(R) Digital Decoder Library \" dddec_mdw\" - for Dolby(R) Digital Decoder Middleware for Linux \" aaclcenc_lib\" - for OMX Media Component AAC-LC Encoder Library \" vp8dec_lib\" - for OMX Media Component VP8 Decoder Library for Linux \" vp8enc_lib\" - for OMX Media Component VP8 Encoder Library for Linux \" vp9dec_lib\" - for OMX Media Component VP9 Decoder Library for Linux \" aaclcenc_mdw\" - for AAC-LC Encoder Middleware for Linux \" dtv\" - for ISDB-T DTV Software Package for Linux \" dvd\" - for DVD Core-Middleware for Linux \" adsp\" - for ADSP driver, ADSP interface and ADSP framework for Linux \" avb\" - for AVB Software Package for Linux Ex: ```sh DISTRO_FEATURES_append = \" h264dec_lib h265dec_lib mpeg2dec_lib aaclcdec_lib aaclcdec_mdw\" ``` C. Configuration for test packages Must ensure that Multimedia features have been enabled. (Please refer to III/A to enable Multimedia.) Please add feature to DISTRO_FEATURES_append to local.conf. Configuration for multimedia test package DISTRO_FEATURES_append = \"mm-test\" Enable Linux ICCOM driver and Linux ICCOM library For Linux ICCOM driver and Linux ICCOM library Please copy proprietary libraries to the directory of recipes. Please set local.conf the following. DISTRO_FEATURES_append = \"iccom\"","title":"Building for Supported Renesas Boards"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#building-for-supported-renesas-boards","text":"AGL supports building for several automotive Renesas board kits. Renesas is the number one supplier of vehicle control microcontrollers and System on a Chip (SoC) products for the automotive industry. This section provides the build and deploy steps you need to create an image for the following Renesas platforms: Renesas R-Car Starter Kit Pro Board Renesas R-Car Starter Kit Premier Board Renesas Salvator-X Board Renesas Kingfisher Infotainment Board NOTE: You can find similar information for the Pro and Premier board kits on the R-Car/Boards/Yocto-Gen3 page. The information on this page describes setup and build procedures for both these Renesas development kits.","title":"Building for Supported Renesas Boards"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#1-downloading-proprietary-drivers","text":"Before setting up the build environment, you need to download proprietary drivers from the R-Car H3/M3 Software library and Technical document site. Follow these steps to download the drivers you need: Determine the Files You Need: Run the setup_mm_packages.sh script as follows to display the list of ZIP files containing the drivers you need. Following is an example: grep -rn ZIP_. = $AGL_TOP /meta-agl/meta-agl-bsp/meta-rcar-gen3/scripts/setup_mm_packages.sh The script's output identifies the files you need to download from the page. Get Your Board Support Package (BSP) Version: Be sure to have the correct BSP version of the R-Car Starter Kit based on the version of the AGL software you are using. Find the appropriate download links on the R-Car H3/M3 Software library and Technical document site. The file pairs are grouped according to the Yocto Project version you are using with the AGL software. Use the following table to map the Renesas version to your AGL software: AGL Version Renesas version AGL master 4.1.0 Download the Files: Start the download process by clicking the download link. If you do not have an account with Renesas, you will be asked to register a free account. You must register and follow the \"Click Through\" licensing process in order to download these proprietary files. If needed, follow the instructions to create the free account by providing the required account information. Once the account is registered and you are logged in, you can download the files. NOTE: You might have to re-access the original page that contains the download links you need after creating the account and logging in. Create an Environment Variable to Point to Your Download Area: Create and export an environment variable named XDG_DOWNLOAD_DIR that points to your download directory. Here is an example: $ export XDG_DOWNLOAD_DIR = $HOME /Downloads Be Sure the Files Have Rights: Be sure you have the necessary rights for the files you downloaded. You can use the following command: chmod a+x $XDG_DOWNLOAD_DIR /*.zip Check to be Sure the Files are Downloaded and Have the Correct Rights: Do a quick listing of the files to ensure they are in the download directory and they have the correct access rights. Here is an example: $ ls -l $XDG_DOWNLOAD_DIR /*.zip -rw-rw-r-- 1 scottrif scottrif 4662080 Nov 19 14 :48 /home/scottrif/Downloads/R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-weston8-20200923.zip -rw-rw-r-- 1 scottrif scottrif 3137626 Nov 19 14 :49 /home/scottrif/Downloads/R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-weston8-20200923.zip","title":"1. Downloading Proprietary Drivers"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#2-getting-more-software","text":"Get the bmaptool : Download this tool from the bmap-tools repository. The site has pre-built packages (DEB or RPM) for the supported host operating systems.","title":"2. Getting More Software"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#3-getting-your-hardware-together","text":"Gather together this list of hardware items, which is not exhaustive. Having these items ahead of time saves you from having to try and collect hardware during development: Supported Starter Kit Gen3 board with its 5V power supply. Micro USB-A cable for serial console. This cable is optional if you are using Ethernet and an SSH connection. USB 2.0 Hub. The hub is optional but makes it easy to connect multiple USB devices. Ethernet cable. The cable is optional if you are using a serial console. HDMI type D (Micro connector) cable and an associated display. 4 Gbyte minimum MicroSD Card. It is recommended that you use a class 10 type. USB touch screen device such as the GeChic 1502i/1503i. A touch screen device is optional. NOTE: The Salvator-X Board has NDA restrictions. Consequently, less documentation is available for this board both here and across the Internet.","title":"3. Getting Your Hardware Together"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#4-making-sure-your-build-environment-is-correct","text":"The \" Initializing Your Build Environment \" section presented generic information for setting up your build environment using the aglsetup.sh script. If you are building an image for a supported Renesas board, you need to take steps to make sure your build host is set up correctly. Define Your Board: Depending on your Renesas board, define and export a MACHINE variable as follows: Board MACHINE Setting Starter Kit Pro/M3 MACHINE =m3ulcb Starter Kit Pro/M3 + kingfisher support MACHINE =m3ulcb-kf Starter Kit Pro/M3 without graphic MACHINE =m3ulcb-nogfx Starter Kit Premier/H3 MACHINE =h3ulcb Starter Kit Premier/H3 + kingfisher support MACHINE =h3ulcb-kf Starter Kit Premier/H3 without graphic MACHINE =h3ulcb-nogfx Salvator-X MACHINE =h3-salvator-x For example, the following command defines and exports the MACHINE variable for the Starter Kit Pro/M3 Board: $ export MACHINE = m3ulcb Run the aglsetup.sh Script: Use the following commands to run the AGL Setup script: $ cd $AGL_TOP $ source meta-agl/scripts/aglsetup.sh -m $MACHINE -b build agl-devel agl-demo NOTE: Running the aglsetup.sh script automatically places you in the working directory (i.e. $AGL_TOP/build ). You can change this default behavior by adding the \"-f\" option to the script's command line. In the previous command, the \"-m\" option sets your machine to the previously defined MACHINE variable. The \"-b\" option defines your Build Directory, which is the default $AGL_TOP/build . Finally, the AGL features are provided to support building the AGL Demo image for the Renesas board. You can learn more about the AGL Features in the \" Initializing Your Build Environment \" section. Examine the Script's Log: Running the aglsetup.sh script creates the setup.log file, which is in the build/conf folder. You can examine this log to see the results of the script. For example, suppose the graphics drivers were missing or could not be extracted when you ran the script. In case of missing graphics drivers, you could notice an error message similar to the following: [snip] --- fragment /home/working/workspace_agl_master/meta-agl/templates/machine/h3ulcb/50_setup.sh /home/working/workspace_agl_master /home/working/workspace_agl_master/build_gen3 The graphics and multimedia acceleration packages for the R-Car Gen3 board can be downloaded from: https://www.renesas.com/en-us/solutions/automotive/rcar-demoboard-2.html These 2 files from there should be store in your'/home/devel/Downloads' directory. R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-weston5-20190802.zip R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-weston5-20190802.zip /home/working/workspace_agl_master/build_gen3 --- fragment /home/working/workspace_agl_master/meta-agl/templates/base/99_setup_EULAconf.sh --- end of setup script OK Generating setup file: /home/working/workspace_agl_master/build_gen3/agl-init-build-env ... OK ------------ aglsetup.sh: Done [snip] If you encounter this issue, or any other unwanted behavior, you can fix the error mentioned, remove the $AGL_TOP/build directory, and then re-launch the aglsetup.sh again. Here is another example that indicates the driver files could not be extracted from the downloads directory: [snip] ~/workspace_agl/build/conf $ cat setup.log --- beginning of setup script --- fragment /home/working/workspace_agl/meta-agl/templates/base/01_setup_EULAfunc.sh --- fragment /home/working/workspace_agl/meta-agl/templates/machine/m3ulcb/50_setup.sh ~/workspace_agl ~/workspace_agl/build ERROR: FILES \"+/home/working/Downloads/R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-weston5-20190802.zip+\" NOT EXTRACTING CORRECTLY ERROR: FILES \"+/home/working/Downloads/R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-weston5-20190802.zip+\" NOT EXTRACTING CORRECTLY The graphics and multimedia acceleration packages for the R-Car Gen3 board BSP can be downloaded from: These 2 files from there should be stored in your '/home/working/Downloads' directory. R-Car_Gen3_Series_Evaluation_Software_Package_for_Linux-weston5-20190802.zip R-Car_Gen3_Series_Evaluation_Software_Package_of_Linux_Drivers-weston5-20190802.zip ERROR: Script /home/working/workspace_agl/build/conf/setup.sh failed [snip]","title":"4. Making Sure Your Build Environment is Correct"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#5-checking-your-configuration","text":"Aside from environment variables and parameters you establish through running the aglsetup.sh script, you can ensure your build's configuration is just how you want it by examining the local.conf configuration file. You can find this configuration file in the Build Directory (e.g. \"$TOP_DIR/build/conf/local.conf\"). In general, the defaults along with the configuration fragments the aglsetup.sh script applies in the local.conf file are good enough. However, you can customize aspects by editing the local.conf file. See the \" Customizing Your Build \" section for common configurations you might want to consider. NOTE: For detailed explanations of the configurations you can make in the local.conf file, consult the Yocto Project Documentation . A quick way to see if you have the $MACHINE variable set correctly is to use the following command: grep -w -e \"^MACHINE =\" $AGL_TOP /build/conf/local.conf Depending on the Renesas board you are using, you should see output as follows: MACHINE = \"h3ulcb\" or MACHINE = \"m3ulcb\" or MACHINE = \"h3-salvator-x\" If you ran the aglsetup.sh script as described in the \" Making Sure Your Build Environment is Correct \" section earlier, the \"agl-devel\", \"agl-demo\", \"agl-netboot\", \"agl-appfw-smack\", and \"agl-localdev\" AGL features will be in effect. These features provide the following: A debugger (gdb) Some tweaks, including a disabled root password A SFTP server The TCF Agent for easier application deployment and remote debugging Some extra system tools such as USB and bluetooth Support for the AGL demo platform Network boot support through TFTP and NBD protocols IoT.bzh Application Framework plus SMACK and Cynara Support for local development including localdev.inc when present","title":"5. Checking Your Configuration"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#6-using-bitbake","text":"This section shows the bitbake command used to build the AGL image. Before running BitBake to start your build, it is good to be reminded that AGL does provide pre-built images for developers that work with supported hardware. You can find these pre-built images on the AGL Download web site . Start the build using the bitbake command. NOTE: An initial build can take many hours depending on your CPU and and Internet connection speeds. The build also takes approximately 100G-bytes of free disk space. For this example, the target is \"agl-demo-platform\": bitbake agl-demo-platform The build process puts the resulting image in the Build Directory: <build_directory>/tmp/deploy/images/$MACHINE","title":"6. Using BitBake"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#7-booting-the-image-using-a-microsd-card","text":"To boot your image on the Renesas board, you need to do three things: Update all firmware on the board. Prepare the MicroSD card to you can boot from it. Boot the board. NOTE: For subsequent builds, you only have to re-write the MicroSD card with a new image.","title":"7. Booting the Image Using a MicroSD Card"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#updating-the-boards-firmware","text":"Follow these steps to update the firmware: Update the Sample Loader and MiniMonitor: You only need to make these updates one time per device. Follow the procedure found on the eLinux.org wiki to update to at least version 3.02, which is mandatory to run the AGL image ( R-car loader update ). Update the Firmware Stack: You only need to update the firmware stack if you are using the Eel or later (5.0) version of AGL software. M3 and H3 Renesas board are AArch64 platforms. As such, they have a firmware stack that is divided across: ARM Trusted Firmware , OP-Tee and U-Boot . If you are using the Eel (5.0) version or later of the AGL software, you must update the firmware using the [h3ulcb] R-car h3ulcb firmware update or [m3ulcb] R-car m3ulcb firmware update links from the Embedded Linux Wiki (i.e. elinux.org ). The table in the wiki lists the files you need to flash the firmware. You can find these files in the following directory: $AGL_TOP /build/tmp/deploy/images/ $MACHINE NOTE: The Salvator-X firmware update process is not documented on eLinux.","title":"Updating the Board's Firmware"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#preparing-the-microsd-card","text":"Plug the MicroSD card into your Build Host. After plugging in the device, use the `dmesg` command as follows to discover the device name: $ dmesg | tail -4 [ 1971.462160] sd 6:0:0:0: [sdc] Mode Sense: 03 00 00 00 [ 1971.462277] sd 6:0:0:0: [sdc] No Caching mode page found [ 1971.462278] sd 6:0:0:0: [sdc] Assuming drive cache: write through [ 1971.463870] sdc: sdc1 sdc2 In the previous example, the MicroSD card is attached to the device /dev/sdc . You can also use the `lsblk` command to show all your devices. Here is an example that shows the MicroSD card as `/dev/sdc`: $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 167,7G 0 disk \u251c\u2500sda1 8:1 0 512M 0 part /boot/efi \u251c\u2500sda2 8:2 0 159,3G 0 part / \u2514\u2500sda3 8:3 0 7,9G 0 part [SWAP] sdb 8:16 0 931,5G 0 disk \u2514\u2500sdb1 8:17 0 931,5G 0 part /media/storage sdc 8:32 1 14,9G 0 disk \u251c\u2500sdc1 8:33 1 40M 0 part \u2514\u2500sdc2 8:34 1 788M 0 part IMPORTANT NOTE: Before re-writing any device on your Build Host, you need to be sure you are actually writing to the removable MicroSD card and not some other device. Each computer is different and removable devices can change from time to time. Consequently, you should repeat the previous operation with the MicroSD card to confirm the device name every time you write to the card. To summarize this example so far, we have the following: The first SATA drive is /dev/sda . /dev/sdc corresponds to the MicroSD card, and is also marked as a removable device. You can see this in the output of the lsblk command where \"1\" appears in the \"RM\" column for that device. Now that you have identified the device you are going to be writing the image on, you can use the bmaptool to copy the image to the MicroSD card. Your desktop system might offer a choice to mount the MicroSD automatically in some directory. For this example, assume that the MicroSD card mount directory is stored in the $SDCARD variable. Following are example commands that write the image to the MicroSD card: cd $AGL_TOP /build/tmp/deploy/images/ $MACHINE bmaptool copy ./agl-demo-platform- $MACHINE .wic.xz <boot_device_name> Alternatively, you can leave the image in an uncompressed state and write it to the MicroSD card: sudo umount <boot_device_name> xzcat ./agl-demo-platform- $MACHINE .wic.xz | sudo dd of = <boot_device_name> bs = 4M sync","title":"Preparing the MicroSD Card"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#booting-the-board","text":"Follow these steps to boot the board: Use the board's power switch to turn off the board. Insert the MicroSD card into the board. Verify that you have plugged in the following: An external monitor into the board's HDMI port An input device (e.g. keyboard, mouse, touchscreen, and so forth) into the board's USB ports. Use the board's power switch to turn on the board. After a few seconds, you will see the AGL splash screen on the display and you will be able to log in at the console's terminal or using the graphic screen.","title":"Booting the Board"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#8-setting-up-the-serial-console","text":"Setting up the Serial Console involves the following: Installing a serial client on your build host Connecting your build host to your Renesas board's serial port Powering on the board to get a shell at the console Configuring U-Boot parameters Logging into the console Determining the board's IP address","title":"8. Setting Up the Serial Console"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#installing-a-serial-client-on-your-build-host","text":"You need to install a serial client on your build host. Some examples are GNU Screen , picocom , and Minicom . Of these three, \"picocom\" has less dependencies and is therefore considered the \"lightest\" solution.","title":"Installing a Serial Client on Your Build Host"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#connecting-your-build-host-to-your-renesas-boards-serial-port","text":"You need to physically connect your build host to the Renesas board using a USB cable from the host to the serial CP2102 USP port (i.e. Micro USB-A port) on the Renesas board. Once you connect the board, determine the device created for the serial link. Use the ``dmesg`` command on your build host. Here is an example: dmesg | tail 9 [2097783.287091] usb 2-1.5.3: new full-speed USB device number 24 using ehci-pci [2097783.385857] usb 2-1.5.3: New USB device found, idVendor=0403, idProduct=6001 [2097783.385862] usb 2-1.5.3: New USB device strings: Mfr=1, Product=2, SerialNumber=3 [2097783.385864] usb 2-1.5.3: Product: FT232R USB UART [2097783.385866] usb 2-1.5.3: Manufacturer: FTDI [2097783.385867] usb 2-1.5.3: SerialNumber: AK04WWCE [2097783.388288] ftdi_sio 2-1.5.3:1.0: FTDI USB Serial Device converter detected [2097783.388330] usb 2-1.5.3: Detected FT232RL [2097783.388658] usb 2-1.5.3: FTDI USB Serial Device converter now attached to ttyUSB0 The device created is usually \"/dev/ttyUSB0\". However, the number might vary depending on other USB serial ports connected to the host. To use the link, you need to launch the client. Here are three commands, which vary based on the serial client, that show how to launch the client: $ picocom -b 115200 /dev/ttyUSB0 or $ minicom -b 115200 -D /dev/ttyUSB0 or $ screen /dev/ttyUSB0 115200","title":"Connecting Your Build Host to Your Renesas Board's Serial Port"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#powering-on-the-board-to-get-a-shell-at-the-console","text":"Both the Pro and Premier kits (e.g. m3ulcb and h3ulcb ) have nine switches (SW1 through SW9). To power on the board, \"short-press\" SW8, which is the power switch. Following, is console output for the power on process for each kit: h3ulcb: NOTICE: BL2: R-Car Gen3 Initial Program Loader(CA57) Rev.1.0.7 NOTICE: BL2: PRR is R-Car H3 ES1.1 NOTICE: BL2: LCM state is CM NOTICE: BL2: DDR1600(rev.0.15) NOTICE: BL2: DRAM Split is 4ch NOTICE: BL2: QoS is Gfx Oriented(rev.0.30) NOTICE: BL2: AVS setting succeeded. DVFS_SetVID=0x52 NOTICE: BL2: Lossy Decomp areas NOTICE: Entry 0: DCMPAREACRAx:0x80000540 DCMPAREACRBx:0x570 NOTICE: Entry 1: DCMPAREACRAx:0x40000000 DCMPAREACRBx:0x0 NOTICE: Entry 2: DCMPAREACRAx:0x20000000 DCMPAREACRBx:0x0 NOTICE: BL2: v1.1(release):41099f4 NOTICE: BL2: Built : 19:20:52, Jun 9 2016 NOTICE: BL2: Normal boot NOTICE: BL2: dst=0xe63150c8 src=0x8180000 len=36(0x24) NOTICE: BL2: dst=0x43f00000 src=0x8180400 len=3072(0xc00) NOTICE: BL2: dst=0x44000000 src=0x81c0000 len=65536(0x10000) NOTICE: BL2: dst=0x44100000 src=0x8200000 len=524288(0x80000) NOTICE: BL2: dst=0x49000000 src=0x8640000 len=1048576(0x100000) U-Boot 2015.04 (Jun 09 2016 - 19:21:52) CPU: Renesas Electronics R8A7795 rev 1.1 Board: H3ULCB I2C: ready DRAM: 3.9 GiB MMC: sh-sdhi: 0, sh-sdhi: 1 In: serial Out: serial Err: serial Net: Board Net Initialization Failed No ethernet found. Hit any key to stop autoboot: 0 => m3ulcb: NOTICE: BL2: R-Car Gen3 Initial Program Loader(CA57) Rev.1.0.14 NOTICE: BL2: PRR is R-Car M3 Ver1.0 NOTICE: BL2: Board is Starter Kit Rev1.0 NOTICE: BL2: Boot device is HyperFlash(80MHz) NOTICE: BL2: LCM state is CM NOTICE: BL2: AVS setting succeeded. DVFS_SetVID=0x52 NOTICE: BL2: DDR1600(rev.0.22)NOTICE: [COLD_BOOT]NOTICE: ..0 NOTICE: BL2: DRAM Split is 2ch NOTICE: BL2: QoS is default setting(rev.0.17) NOTICE: BL2: Lossy Decomp areas NOTICE: Entry 0: DCMPAREACRAx:0x80000540 DCMPAREACRBx:0x570 NOTICE: Entry 1: DCMPAREACRAx:0x40000000 DCMPAREACRBx:0x0 NOTICE: Entry 2: DCMPAREACRAx:0x20000000 DCMPAREACRBx:0x0 NOTICE: BL2: v1.3(release):4eef9a2 NOTICE: BL2: Built : 00:25:19, Aug 25 2017 NOTICE: BL2: Normal boot NOTICE: BL2: dst=0xe631e188 src=0x8180000 len=512(0x200) NOTICE: BL2: dst=0x43f00000 src=0x8180400 len=6144(0x1800) NOTICE: BL2: dst=0x44000000 src=0x81c0000 len=65536(0x10000) NOTICE: BL2: dst=0x44100000 src=0x8200000 len=524288(0x80000) NOTICE: BL2: dst=0x50000000 src=0x8640000 len=1048576(0x100000) U-Boot 2015.04-dirty (Aug 25 2017 - 10:55:49) CPU: Renesas Electronics R8A7796 rev 1.0 Board: M3ULCB I2C: ready DRAM: 1.9 GiB MMC: sh-sdhi: 0, sh-sdhi: 1 In: serial Out: serial Err: serial Net: ravb Hit any key to stop autoboot: 0 =>","title":"Powering on the Board to Get a Shell at the Console"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#9-setting-up-u-boot","text":"","title":"9. Setting-up U-boot"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#configuring-u-boot-parameters","text":"Follow these steps to configure the board to use the MicroSD card as the boot device and also to set the screen resolution: As the board is powering up, press any key to stop the autoboot process. You need to press a key quickly as you have just a few seconds in which to press a key. Once the autoboot process is interrupted, use the board's serial console to enter printenv to check if you have correct parameters for booting your board: Here is an example using the h3ulcb board: => printenv baudrate=115200 bootargs=console=ttySC0,115200 root=/dev/mmcblk1p1 rootwait ro rootfstype=ext4 bootcmd=run load_ker; run load_dtb; booti 0x48080000 - 0x48000000 bootdelay=3 fdt_high=0xffffffffffffffff initrd_high=0xffffffffffffffff load_dtb=ext4load mmc 0:1 0x48000000 /boot/r8a7795-h3ulcb.dtb load_ker=ext4load mmc 0:1 0x48080000 /boot/Image stderr=serial stdin=serial stdout=serial ver=U-Boot 2015.04 (Jun 09 2016 - 19:21:52) Environment size: 648/131068 bytes Here is a second example using the m3ulcb board: => printenv baudrate=115200 bootargs=console=ttySC0,115200 root=/dev/mmcblk1p1 rootwait ro rootfstype=ext4 bootcmd=run load_ker; run load_dtb; booti 0x48080000 - 0x48000000 bootdelay=3 fdt_high=0xffffffffffffffff filesize=cdeb initrd_high=0xffffffffffffffff load_dtb=ext4load mmc 0:1 0x48000000 /boot/r8a7796-m3ulcb.dtb load_ker=ext4load mmc 0:1 0x48080000 /boot/Image stderr=serial stdin=serial stdout=serial ver=U-Boot 2015.04 (Nov 30 2016 - 18:25:18) Environment size: 557/131068 bytes To boot your board using the MicroSD card, be sure your environment is set up as follows: setenv bootargs console = ttySC0,115200 ignore_loglevel vmalloc = 384M video = HDMI-A-1:1920x1080-32@60 root = /dev/mmcblk1p1 rw rootfstype = ext4 rootwait rootdelay = 2 setenv bootcmd run load_ker \\; run load_dtb \\; booti 0x48080000 - 0x48000000 setenv load_ker ext4load mmc 0 :1 0x48080000 /boot/Image Loading dtb : NOTE : Refer here for more information. Make sure your load_dtb is set as follows : H3SK v2.0(DDR 4GB) : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7795-h3ulcb.dtb H3SK v2.0(DDR 8GB)/v3.0(DDR 8GB) : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7795-h3ulcb-4x2g.dtb M3SK v1.0 : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7796-m3ulcb.dtb M3SK v3.0 : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7796-m3ulcb-2x4g.dtb H3SK with a Kingfisher board : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7795-h3ulcb-kf.dtb M3SK with a Kingfisher board : $ setenv load_dtb ext4load mmc 0:1 0x48000000 /boot/r8a7796-m3ulcb-kf.dtb Save the boot environment: saveenv Boot the board: run bootcmd","title":"Configuring U-Boot Parameters"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#10-troubleshooting","text":"","title":"10. Troubleshooting"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#logging-into-the-console","text":"Once the board boots, you should see the Wayland display on the external monitor. A login prompt should appear as follows depending on your board: h3ulcb : Automotive Grade Linux ${ AGL_VERSION } h3ulcb ttySC0 h3ulcb login: root m3ulcb : Automotive Grade Linux ${ AGL_VERSION } m3ulcb ttySC0 m3ulcb login: root At the prompt, login by using root as the login. The password is \"empty\" so you should not be prompted for the password.","title":"Logging Into the Console"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#determining-the-boards-ip-address","text":"If your board is connected to a local network using Ethernet and if a DHCP server is able to distribute IP addresses, you can determine the board's IP address and log in using ssh . Here is an example for the m3ulcb board: m3ulcb login: root Last login: Tue Dec 6 09:55:15 UTC 2016 on tty2 root@m3ulcb:~# ip -4 a 1: lo: mtu 65536 qdisc noqueue state UNKNOWN group default inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 3: eth0: mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 inet 10.0.0.27/24 brd 10.0.0.255 scope global eth0 valid_lft forever preferred_lft forever root@m3ulcb:~# In the previous example, IP address is 10.0.0.27. Once you know the address, you can use `ssh` to login. Following is an example that shows logging into SSH and then displaying the contents of the `/etc/os-release` file: $ ssh root@10.0.0.27 Last login: Tue Dec 6 10:01:11 2016 from 10.0.0.13 root@m3ulcb:~# cat /etc/os-release ID=\"poky-agl\" NAME=\"Automotive Grade Linux\" VERSION=\"3.0.0+snapshot-20161202 (chinook)\" VERSION_ID=\"3.0.0-snapshot-20161202\" PRETTY_NAME=\"Automotive Grade Linux 3.0.0+snapshot-20161202 (chinook)\" NOTE: More generics troubleshooting can be found here : Generic issues","title":"Determining the Board's IP Address"},{"location":"0_Getting_Started/2_Building_AGL_Image/5_3_RCar_Gen_3/#11-supplementary-information","text":"R-Car Generation 3 Information Refer to the following for more information from eLinux website . Proprietary libraries for meta-rcar-gen3 The meta-rcar-gen3 layer of meta-renesas is supported Graphic GLES(GSX) libraries, proprietary library of multimedia, and ICCOM software. Build with Renesas multimedia libraries Multimedia portions depend on GLES portions. A. Configuration for Multimedia features Please copy proprietary libraries to the directory of recipes. Please set local.conf the following. Enable multimedia features. This provides package group of plug-ins of the GStreamer, multimedia libraries and kernel drivers. MACHINE_FEATURES_append = \" multimedia\" B. Configuration for optional codecs and middleware Please copy proprietary libraries to the directory of recipes. Add features to DISTRO_FEATURES_append to local.conf **Additional configuration in OMX module** \" h263dec_lib\" - for OMX Media Component H263 Decoder Library \" h264dec_lib\" - for OMX Media Component H264 Decoder Library \" h264enc_lib\" - for OMX Media Component H.264 Encoder Library \" h265dec_lib\" - for OMX Media Component H265 Decoder Library \" mpeg2dec_lib\" - for OMX Media Component MPEG2 Decoder Library \" mpeg4dec_lib\" - for OMX Media Component MPEG4 Decoder Library \" vc1dec_lib\" - for OMX Media Component VC-1 Decoder Library \" divxdec_lib\" - for OMX Media Component DivX Decoder Library \" rvdec_lib\" - for OMX Media Component RealVideo Decoder Library \" alacdec_lib\" - for OMX Media Component ALAC Decoder Library \" flacdec_lib\" - for OMX Media Component FLAC Decoder Library \" aaclcdec_lib\" - for OMX Media Component AAC-LC Decoder Library \" aaclcdec_mdw\" - for AAC-LC 2ch Decoder Middleware for Linux \" aacpv2dec_lib\" - for OMX Media Component aacPlus V2 Decoder Library \" aacpv2dec_mdw\" - for aacPlus V2 Decoder Middleware for Linux \" dddec_lib\" - for OMX Media Component Dolby(R) Digital Decoder Library \" dddec_mdw\" - for Dolby(R) Digital Decoder Middleware for Linux \" aaclcenc_lib\" - for OMX Media Component AAC-LC Encoder Library \" vp8dec_lib\" - for OMX Media Component VP8 Decoder Library for Linux \" vp8enc_lib\" - for OMX Media Component VP8 Encoder Library for Linux \" vp9dec_lib\" - for OMX Media Component VP9 Decoder Library for Linux \" aaclcenc_mdw\" - for AAC-LC Encoder Middleware for Linux \" dtv\" - for ISDB-T DTV Software Package for Linux \" dvd\" - for DVD Core-Middleware for Linux \" adsp\" - for ADSP driver, ADSP interface and ADSP framework for Linux \" avb\" - for AVB Software Package for Linux Ex: ```sh DISTRO_FEATURES_append = \" h264dec_lib h265dec_lib mpeg2dec_lib aaclcdec_lib aaclcdec_mdw\" ``` C. Configuration for test packages Must ensure that Multimedia features have been enabled. (Please refer to III/A to enable Multimedia.) Please add feature to DISTRO_FEATURES_append to local.conf. Configuration for multimedia test package DISTRO_FEATURES_append = \"mm-test\" Enable Linux ICCOM driver and Linux ICCOM library For Linux ICCOM driver and Linux ICCOM library Please copy proprietary libraries to the directory of recipes. Please set local.conf the following. DISTRO_FEATURES_append = \"iccom\"","title":"11. Supplementary Information"},{"location":"1_Hardware_Support/Overview/","text":"The following table briefs about the various hardware platforms, supported by AGL : NOTE: Further information about AGL Distribution available at AGL wiki . AGL Reference Machines BOARD $MACHINE ARCHITECHTURE QEMU qemu-x86-64 x86 qemu-arm arm32 qemu-arm64 arm64 RCar Gen 3 h3ulcb arm64 h3-salvator-x arm64 h3-kf arm64 m3ulcb arm64 m3-salvator-x arm64 m3-kf arm64 Raspberry Pi raspberrypi4 arm64 Community supported Machines BOARD $MACHINE ARCHITECHTURE BeagleBone bbe arm32 beaglebone arm32 i. MX 6 cubox-i arm32 imx6qdlsabreauto arm32 nitrogen6x arm32 i. MX 8 imx8mqevk arm64 imx8mqevk-viv arm64 Snapdragon dragonboard-410c arm64 dragonboard-820c arm64 ARC HS hsdk ARC Supported Images AGL supports a variety of interfaces, each requiring unique setup configuration. 1. In-Vehicle Infotainment (IVI) Supported boards : AGL Reference Boards (QEMU, RCar Gen 3 & Raspberry Pi 4) Community supported Machines (i. MX 6, i. MX 8, Snapdragon & ARC HS) Qt Based : Setting up flags at aglsetup script : $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-demo #To enable Developer Options $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-demo agl-devel Building target image : $ time bitbake agl-demo-platform HTML5 Based : Setting up flags at aglsetup script : $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-demo agl-profile-graphical-html5 # To enable Developer Options $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-demo agl-profile-graphical-html5 agl-devel Building target image : $ time bitbake agl-demo-platform-html5 2. Instrument Cluster Supported boards : AGL Reference Boards (QEMU, RCar Gen 3 & Raspberry Pi 4) Setting up flags at aglsetup script : $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-cluster-demo # To enable Developer Options $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-cluster-demo agl-devel Building target image : $ time bitbake agl-cluster-demo 3. Telematics Headless demo platform for low-spec boards. Supported boards : Community supported Machines (BeagleBone) Setting up flags at aglsetup script : $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-telematics-demo # To enable Developer Options $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-telematics-demo agl-devel Building target image : $ time bitbake agl-telematics-demo","title":"Supported Boards"},{"location":"1_Hardware_Support/Overview/#agl-reference-machines","text":"BOARD $MACHINE ARCHITECHTURE QEMU qemu-x86-64 x86 qemu-arm arm32 qemu-arm64 arm64 RCar Gen 3 h3ulcb arm64 h3-salvator-x arm64 h3-kf arm64 m3ulcb arm64 m3-salvator-x arm64 m3-kf arm64 Raspberry Pi raspberrypi4 arm64","title":"AGL Reference Machines"},{"location":"1_Hardware_Support/Overview/#community-supported-machines","text":"BOARD $MACHINE ARCHITECHTURE BeagleBone bbe arm32 beaglebone arm32 i. MX 6 cubox-i arm32 imx6qdlsabreauto arm32 nitrogen6x arm32 i. MX 8 imx8mqevk arm64 imx8mqevk-viv arm64 Snapdragon dragonboard-410c arm64 dragonboard-820c arm64 ARC HS hsdk ARC","title":"Community supported Machines"},{"location":"1_Hardware_Support/Overview/#supported-images","text":"AGL supports a variety of interfaces, each requiring unique setup configuration.","title":"Supported Images"},{"location":"1_Hardware_Support/Overview/#1-in-vehicle-infotainment-ivi","text":"Supported boards : AGL Reference Boards (QEMU, RCar Gen 3 & Raspberry Pi 4) Community supported Machines (i. MX 6, i. MX 8, Snapdragon & ARC HS) Qt Based : Setting up flags at aglsetup script : $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-demo #To enable Developer Options $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-demo agl-devel Building target image : $ time bitbake agl-demo-platform HTML5 Based : Setting up flags at aglsetup script : $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-demo agl-profile-graphical-html5 # To enable Developer Options $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-demo agl-profile-graphical-html5 agl-devel Building target image : $ time bitbake agl-demo-platform-html5","title":"1. In-Vehicle Infotainment (IVI)"},{"location":"1_Hardware_Support/Overview/#2-instrument-cluster","text":"Supported boards : AGL Reference Boards (QEMU, RCar Gen 3 & Raspberry Pi 4) Setting up flags at aglsetup script : $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-cluster-demo # To enable Developer Options $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-cluster-demo agl-devel Building target image : $ time bitbake agl-cluster-demo","title":"2. Instrument Cluster"},{"location":"1_Hardware_Support/Overview/#3-telematics","text":"Headless demo platform for low-spec boards. Supported boards : Community supported Machines (BeagleBone) Setting up flags at aglsetup script : $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-telematics-demo # To enable Developer Options $ source meta-agl/scripts/aglsetup.sh -f -m $MACHINE -b build- $MACHINE agl-telematics-demo agl-devel Building target image : $ time bitbake agl-telematics-demo","title":"3. Telematics"},{"location":"2_Architecture_Guides/0_Build_Process/","text":"","title":"Overview"},{"location":"2_Architecture_Guides/2.1_AGL_Requirements_Specifications/AGL%20Requirements%20Specifications/","text":"AGL Requirements Specifications","title":"AGL Requirements Specifications"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/","text":"Introduction Modern cars have become a lot more technologically sophisticated and different than those of the past. We are seeing a wider range of new features and functionality, with a lot more complex software. It is fair to say that the cars being introduced to the market today have much more in common with computing devices like cell phones, than their predecessors did. Modern car manufacturers are also integrating support for a broad range of communication technologies for these \u201cconnected\u201d cars. With the advent of such vehicles, Linux has become a natural choice for the software platform, with Automotive Grade Linux as a promising example. From a security point of view, the remote capabilities of a connected car results in a much larger attack surface. This opens a whole new world of security vulnerabilities that need to be considered during the architectural design. History shows that physical access to a device is sufficient for a hacker to gain root privileges. This makes the car a hostile environment. The Security Blueprint documents the security features that are included as part of Automotive Grade Linux (AGL) and identifies areas that need to be addressed from a security perspective as part of AGL. It also gives guidance around existing technologies and solutions. Security domains will allow us to create a set of tests verifying the security of Automotive Grade Linux. This document is firstly based on an existing AGL security-blueprint. For security to be effective, the concepts must be simple. And by default, anything that is not allowed is forbidden. We will cover topics starting from the lowest level ( Hardware ) up to the highest levels ( Connectivity and Application ). We will move quickly on Hardware and Connectivity because this is not supported at our level. Solutions of connectivity problems concern updates and secured settings while hardware securing is related to the manufacturers. The document is filled with tags to easily identify important points: The config tag quickly identifies the configurations and the recommendations to take. The note tag allows you to notify some additional details. The todo tag shows the possible improvements. In annexes of this document, you can find all the config and todo notes. Adversaries Adversaries and attackers within the Automotive space. Enthusiast Attackers Enthusiast attackers have physical access to the Engine Control Units (ECUs) at the circuit board level. They can solder \u2018mod chips\u2019 onto the board and have access to probing tools. They also have information on ECUs that have been previously compromised and have access to softwares and instructions developed by other members of car modification forums. The goal of the enthusiast hacker could be, but is not limited to, adding extra horse power to the car or hacking it just for fun. Corrupt Automotive Dealers Corrupt automotive dealers are attackers that have access to the same capabilities as enthusiasts, but also have access to the car manufacturer\u2019s (OEM) dealer network. They may also have access to standard debugging tools provided by the car manufacturer. Their goal may be to support local car theft gangs or organized criminals. Organized Criminals Organized criminals have access to all of the above tools but may also have some level of control over the internal network at many dealerships. They may have hacked and gained temporary control of the Over-The-Air (OTA) servers or the In-Vehicle Infotainment (IVI) systems. This is very much like the role of organized criminals in other industries such as paid media today. Their goal is to extort money from OEMs and/or governments by threatening to disable multiple vehicles. Malware Developers Malware developers have developed malicious software to attack and compromise a large number of vehicles. The malicious software is usually designed to spread from one vehicle to another. Usually, the goal is to take control of multiple machines and then sell access to them for malicious purposes like denial-of-service (DoS) attacks or theft of private information and data. Security Researchers Security researchers are \u2018self-publicized\u2019 security consultants trying to make a name for themselves. They have access to standard tools for software security analysis. They also have physical access to the vehicle and standard hardware debugging tools (Logic Analyzers, Oscilloscopes, etc). Their goal is to publicize attacks for personal gain or just to gain personal understanding with a sense of helping make things more secure. Attack Goals In today\u2019s connected vehicle, more and more functionality is moving to software control, meaning that the threat of attack becomes greater and greater. We see car features like navigation and summoning, car access/engine start, and motor/ECU upgrades all controlled through software and connections to the cloud. The risk of attack is high because there are high value targets in play. Here, we outline some of the major threats categories along with some sample attackers, example attacks, and a relative importance. These threat categories are intended to be general examples. There can be many nuances to threat types. Additionally, there can be many sub-attacks that eventually lead to these higher level attack goals. Threat Category Sample Attacker Example Attacks Relative Importance Vehicle theft Individual, organized criminals Send the car to an unplanned destination, get a key for the car, gain control of the unlock mechanism Reduced likelihood of future vehicle purchases (Profit Later), bad press (Brand Integrity) Reduced vehicle functionality Terrorist groups, disgruntled employees Lock the driver out of the car, cause the car to crash, block access to infotainment system Inability sell paid-for apps and content (Profit Now), bad press (Brand Integrity), possible loss of life (Physical Injury) Vehicle hacking Vehicle owner, competitor Get content without paying, modify DRM licenses, unlock of after-market features, theft of IP Loss of sales for content and features (Profit Now), lawsuits from content owners (Profit Later), loss of competitive advantage (Profit Later) Sensitive asset theft Organized criminals, blackmailers Steal credit card numbers, health information, camera data, steal bandwidth Bad press (Brand Integrity), lawsuits from vehicle owners (Profit Later) The Automotive Grade Linux (AGL) initiative builds upon open-source software including Linux and Tizen to offer a flexible application framework. However, the security provisions of the app framework, Cynara, and the security manager only go so far in keeping the biggest threats at bay. As experience has shown, providing a constrained app (like that in the Android Open Source Platform) and store development flow, signature verification, DAC sandboxing, and MAC (SMACK) controls over the platform can have a certain amount of success with the security of the system. However, the openness of the system invites many researchers, hobbyists and hackers and financially motivated attackers to compromise the system for their own gains. As AGL arrives on modern automobiles, this is inevitably inviting many capable actors to modify, attack, and compromise these well thought-out systems and their applications. With concerns like safety and security, the auto industry cannot afford to go the way of consumer devices like phones and tablets where security problems are encountered on a frequent basis. It is imperative to use a layered approach and defense-in-depth to protect the system from inevitable attack. Assets and Security Categorization This section outlines some of the assets that are likely to be found in the vehicle and their relative sensitivity from an attack point of view. Additionally, the final column on the right lists some of the recommended protection types that can be applied to these types of assets (Note that the empty cells refer to the cells above them). A good protection approach will give priority to the most sensitive assets, using a defense-in-depth approach to cover these assets. Less sensitive assets are treated at a lower priority, typically protected with fewer protection techniques. A more fine-grained prioritization of the the assets in a concrete vehicle network can be achieved with detailed threat analysis which considers the topology of the vehicle network and access-controls that are in-place. e.g. the EVITA framework for attack trees. Asset Category Examples Sensitivity Recommended Protection Types Software ECU software, infotainment software, OS images Critical Key Management, Mutual Asymmetric Authentication, HSM and WhiteBox Encryption, Message Integrity Checks, Hardening/SW Protection, Program Transforms/ Obfuscation, Integrity Verification, Secure OS Car Access Biometric data, car keys Payment Data Credit cards, User profile critical data Recordings Internal camera recording, internal audio recording, external camera recording High Encryption, Message Integrity Checks, Hardening/SW Protection, Program Transforms / Obfuscation User Profile Usernames and passwords, customization, calendar, contacts Location GPS coordinates, vehicle usage data Purchased Content Video, audio, licenses Teleconference Chat, audio, video Medium SW Protection, Program Transforms / Obfuscation, Authenticated encryption for transmission Vehicle data Vehicle info, sensor data Navigation data Static and dynamic maps 3rd party data Home automation commands, cloud game data Hardening term The term Hardening refers to the tools, techniques and processes required in order to reduce the attack surface on an embedded system, such as an embedded control unit ( ECU ) or other managed devices. The target for all hardening activities is to prevent the execution of invalid binaries on the device, and to prevent copying of security related data from the device. AGL security overview AGL roots are based on security concepts. Those concepts are implemented by the security framework as shown in this picture: Acronyms and Abbreviations The following table lists the strongest terms utilized within all this document. Acronyms or Abbreviations Description AGL A utomotive G rade L inux ECU E lectronic C ontrol U nit References security-blueprint . http:// docs.automotivelinux.org/docs/architecture/en/dev/reference/security/01-overview.html [2017] - kernel security . https:// www.kernel.org/doc/Documentation/security/ [2017] - Systemd integration and user management . http:// iot.bzh/download/public/2017/AMM-Dresden/AGL-systemd.pdf [2017] - AGL - Application Framework Documentation . http:// iot.bzh/download/public/2017/SDK/AppFw-Documentation-v3.1.pdf [2017] - Improving Vehicle Cybersecurity . https:// access.atis.org/apps/group_public/download.php/35648/ATIS-I-0000059.pdf [2016] - AGL framework overview . http:// docs.automotivelinux.org/docs/apis_services/en/dev/reference/af-main/0-introduction.html [2016] - SecureBoot-SecureSoftwareUpdates . http:// iot.bzh/download/public/2016/publications/SecureBoot-SecureSoftwareUpdates.pdf [2016] - Linux Automotive Security . http:// iot.bzh/download/public/2016/security/Linux-Automotive-Security-v10.pdf [2016] - Automotive Security Best Practices . https:// www.mcafee.com/it/resources/white-papers/wp-automotive-security.pdf [2016] - Gattacking Bluetooth Smart Devices . http:// gattack.io/whitepaper.pdf [2015] - Comprehensive Experimental Analysis of Automotive Attack Surfaces . http:// www.cs.wayne.edu/fengwei/15fa-csc6991/slides/8-CarHackingUsenixSecurity.pdf [2015] - Security in Automotive Bus Systems . http:// citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.728&rep=rep1&type=pdf [2014] - IOActive Remote Attack Surface . https:// www.ioactive.com/pdfs/IOActive_Remote_Attack_Surfaces.pdf [2011] - A practical attack against GPRS/EDGE/UMTS/HSPA mobile data communications . https:// media.blackhat.com/bh-dc-11/Perez-Pico/BlackHat_DC_2011_Perez-Pico_Mobile_Attacks-wp.pdf [2011] - Comprehensive Experimental Analyses of Automotive Attack Surfaces . http:// www.autosec.org/pubs/cars-usenixsec2011.pdf [2010] - Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars . https:// eprint.iacr.org/2010/332.pdf [2010] - Wifi attacks wep wpa . https:// matthieu.io/dl/wifi-attacks-wep-wpa.pdf [2008] - SMACK . http:// schaufler-ca.com/yahoo_site_admin/assets/docs/SmackWhitePaper.257153003.pdf","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/#introduction","text":"Modern cars have become a lot more technologically sophisticated and different than those of the past. We are seeing a wider range of new features and functionality, with a lot more complex software. It is fair to say that the cars being introduced to the market today have much more in common with computing devices like cell phones, than their predecessors did. Modern car manufacturers are also integrating support for a broad range of communication technologies for these \u201cconnected\u201d cars. With the advent of such vehicles, Linux has become a natural choice for the software platform, with Automotive Grade Linux as a promising example. From a security point of view, the remote capabilities of a connected car results in a much larger attack surface. This opens a whole new world of security vulnerabilities that need to be considered during the architectural design. History shows that physical access to a device is sufficient for a hacker to gain root privileges. This makes the car a hostile environment. The Security Blueprint documents the security features that are included as part of Automotive Grade Linux (AGL) and identifies areas that need to be addressed from a security perspective as part of AGL. It also gives guidance around existing technologies and solutions. Security domains will allow us to create a set of tests verifying the security of Automotive Grade Linux. This document is firstly based on an existing AGL security-blueprint. For security to be effective, the concepts must be simple. And by default, anything that is not allowed is forbidden. We will cover topics starting from the lowest level ( Hardware ) up to the highest levels ( Connectivity and Application ). We will move quickly on Hardware and Connectivity because this is not supported at our level. Solutions of connectivity problems concern updates and secured settings while hardware securing is related to the manufacturers. The document is filled with tags to easily identify important points: The config tag quickly identifies the configurations and the recommendations to take. The note tag allows you to notify some additional details. The todo tag shows the possible improvements. In annexes of this document, you can find all the config and todo notes.","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/#adversaries","text":"Adversaries and attackers within the Automotive space. Enthusiast Attackers Enthusiast attackers have physical access to the Engine Control Units (ECUs) at the circuit board level. They can solder \u2018mod chips\u2019 onto the board and have access to probing tools. They also have information on ECUs that have been previously compromised and have access to softwares and instructions developed by other members of car modification forums. The goal of the enthusiast hacker could be, but is not limited to, adding extra horse power to the car or hacking it just for fun. Corrupt Automotive Dealers Corrupt automotive dealers are attackers that have access to the same capabilities as enthusiasts, but also have access to the car manufacturer\u2019s (OEM) dealer network. They may also have access to standard debugging tools provided by the car manufacturer. Their goal may be to support local car theft gangs or organized criminals. Organized Criminals Organized criminals have access to all of the above tools but may also have some level of control over the internal network at many dealerships. They may have hacked and gained temporary control of the Over-The-Air (OTA) servers or the In-Vehicle Infotainment (IVI) systems. This is very much like the role of organized criminals in other industries such as paid media today. Their goal is to extort money from OEMs and/or governments by threatening to disable multiple vehicles. Malware Developers Malware developers have developed malicious software to attack and compromise a large number of vehicles. The malicious software is usually designed to spread from one vehicle to another. Usually, the goal is to take control of multiple machines and then sell access to them for malicious purposes like denial-of-service (DoS) attacks or theft of private information and data. Security Researchers Security researchers are \u2018self-publicized\u2019 security consultants trying to make a name for themselves. They have access to standard tools for software security analysis. They also have physical access to the vehicle and standard hardware debugging tools (Logic Analyzers, Oscilloscopes, etc). Their goal is to publicize attacks for personal gain or just to gain personal understanding with a sense of helping make things more secure.","title":"Adversaries"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/#attack-goals","text":"In today\u2019s connected vehicle, more and more functionality is moving to software control, meaning that the threat of attack becomes greater and greater. We see car features like navigation and summoning, car access/engine start, and motor/ECU upgrades all controlled through software and connections to the cloud. The risk of attack is high because there are high value targets in play. Here, we outline some of the major threats categories along with some sample attackers, example attacks, and a relative importance. These threat categories are intended to be general examples. There can be many nuances to threat types. Additionally, there can be many sub-attacks that eventually lead to these higher level attack goals. Threat Category Sample Attacker Example Attacks Relative Importance Vehicle theft Individual, organized criminals Send the car to an unplanned destination, get a key for the car, gain control of the unlock mechanism Reduced likelihood of future vehicle purchases (Profit Later), bad press (Brand Integrity) Reduced vehicle functionality Terrorist groups, disgruntled employees Lock the driver out of the car, cause the car to crash, block access to infotainment system Inability sell paid-for apps and content (Profit Now), bad press (Brand Integrity), possible loss of life (Physical Injury) Vehicle hacking Vehicle owner, competitor Get content without paying, modify DRM licenses, unlock of after-market features, theft of IP Loss of sales for content and features (Profit Now), lawsuits from content owners (Profit Later), loss of competitive advantage (Profit Later) Sensitive asset theft Organized criminals, blackmailers Steal credit card numbers, health information, camera data, steal bandwidth Bad press (Brand Integrity), lawsuits from vehicle owners (Profit Later) The Automotive Grade Linux (AGL) initiative builds upon open-source software including Linux and Tizen to offer a flexible application framework. However, the security provisions of the app framework, Cynara, and the security manager only go so far in keeping the biggest threats at bay. As experience has shown, providing a constrained app (like that in the Android Open Source Platform) and store development flow, signature verification, DAC sandboxing, and MAC (SMACK) controls over the platform can have a certain amount of success with the security of the system. However, the openness of the system invites many researchers, hobbyists and hackers and financially motivated attackers to compromise the system for their own gains. As AGL arrives on modern automobiles, this is inevitably inviting many capable actors to modify, attack, and compromise these well thought-out systems and their applications. With concerns like safety and security, the auto industry cannot afford to go the way of consumer devices like phones and tablets where security problems are encountered on a frequent basis. It is imperative to use a layered approach and defense-in-depth to protect the system from inevitable attack.","title":"Attack Goals"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/#assets-and-security-categorization","text":"This section outlines some of the assets that are likely to be found in the vehicle and their relative sensitivity from an attack point of view. Additionally, the final column on the right lists some of the recommended protection types that can be applied to these types of assets (Note that the empty cells refer to the cells above them). A good protection approach will give priority to the most sensitive assets, using a defense-in-depth approach to cover these assets. Less sensitive assets are treated at a lower priority, typically protected with fewer protection techniques. A more fine-grained prioritization of the the assets in a concrete vehicle network can be achieved with detailed threat analysis which considers the topology of the vehicle network and access-controls that are in-place. e.g. the EVITA framework for attack trees. Asset Category Examples Sensitivity Recommended Protection Types Software ECU software, infotainment software, OS images Critical Key Management, Mutual Asymmetric Authentication, HSM and WhiteBox Encryption, Message Integrity Checks, Hardening/SW Protection, Program Transforms/ Obfuscation, Integrity Verification, Secure OS Car Access Biometric data, car keys Payment Data Credit cards, User profile critical data Recordings Internal camera recording, internal audio recording, external camera recording High Encryption, Message Integrity Checks, Hardening/SW Protection, Program Transforms / Obfuscation User Profile Usernames and passwords, customization, calendar, contacts Location GPS coordinates, vehicle usage data Purchased Content Video, audio, licenses Teleconference Chat, audio, video Medium SW Protection, Program Transforms / Obfuscation, Authenticated encryption for transmission Vehicle data Vehicle info, sensor data Navigation data Static and dynamic maps 3rd party data Home automation commands, cloud game data","title":"Assets and Security Categorization"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/#hardening-term","text":"The term Hardening refers to the tools, techniques and processes required in order to reduce the attack surface on an embedded system, such as an embedded control unit ( ECU ) or other managed devices. The target for all hardening activities is to prevent the execution of invalid binaries on the device, and to prevent copying of security related data from the device.","title":"Hardening term"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/#agl-security-overview","text":"AGL roots are based on security concepts. Those concepts are implemented by the security framework as shown in this picture:","title":"AGL security overview"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/#acronyms-and-abbreviations","text":"The following table lists the strongest terms utilized within all this document. Acronyms or Abbreviations Description AGL A utomotive G rade L inux ECU E lectronic C ontrol U nit","title":"Acronyms and Abbreviations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/0_Introduction/Introduction/#references","text":"security-blueprint . http:// docs.automotivelinux.org/docs/architecture/en/dev/reference/security/01-overview.html [2017] - kernel security . https:// www.kernel.org/doc/Documentation/security/ [2017] - Systemd integration and user management . http:// iot.bzh/download/public/2017/AMM-Dresden/AGL-systemd.pdf [2017] - AGL - Application Framework Documentation . http:// iot.bzh/download/public/2017/SDK/AppFw-Documentation-v3.1.pdf [2017] - Improving Vehicle Cybersecurity . https:// access.atis.org/apps/group_public/download.php/35648/ATIS-I-0000059.pdf [2016] - AGL framework overview . http:// docs.automotivelinux.org/docs/apis_services/en/dev/reference/af-main/0-introduction.html [2016] - SecureBoot-SecureSoftwareUpdates . http:// iot.bzh/download/public/2016/publications/SecureBoot-SecureSoftwareUpdates.pdf [2016] - Linux Automotive Security . http:// iot.bzh/download/public/2016/security/Linux-Automotive-Security-v10.pdf [2016] - Automotive Security Best Practices . https:// www.mcafee.com/it/resources/white-papers/wp-automotive-security.pdf [2016] - Gattacking Bluetooth Smart Devices . http:// gattack.io/whitepaper.pdf [2015] - Comprehensive Experimental Analysis of Automotive Attack Surfaces . http:// www.cs.wayne.edu/fengwei/15fa-csc6991/slides/8-CarHackingUsenixSecurity.pdf [2015] - Security in Automotive Bus Systems . http:// citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.728&rep=rep1&type=pdf [2014] - IOActive Remote Attack Surface . https:// www.ioactive.com/pdfs/IOActive_Remote_Attack_Surfaces.pdf [2011] - A practical attack against GPRS/EDGE/UMTS/HSPA mobile data communications . https:// media.blackhat.com/bh-dc-11/Perez-Pico/BlackHat_DC_2011_Perez-Pico_Mobile_Attacks-wp.pdf [2011] - Comprehensive Experimental Analyses of Automotive Attack Surfaces . http:// www.autosec.org/pubs/cars-usenixsec2011.pdf [2010] - Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars . https:// eprint.iacr.org/2010/332.pdf [2010] - Wifi attacks wep wpa . https:// matthieu.io/dl/wifi-attacks-wep-wpa.pdf [2008] - SMACK . http:// schaufler-ca.com/yahoo_site_admin/assets/docs/SmackWhitePaper.257153003.pdf","title":"References"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/10_Annexes/1.2.10.0_Abstract/","text":"Annexes The first part resumed all the configurations you must implement without any explications since all the explanations are given as and when in the document. The second one allows to visualize all the todo notes in order to have a global vision of the possible improvements of the document.","title":"Annexes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/10_Annexes/1.2.10.0_Abstract/#annexes","text":"The first part resumed all the configurations you must implement without any explications since all the explanations are given as and when in the document. The second one allows to visualize all the todo notes in order to have a global vision of the possible improvements of the document.","title":"Annexes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/10_Annexes/1.2.10.1_Config_Notes/","text":"Config notes Domain Object Recommendations Hardware-Integrity-1 Bootloader Must control bootloader integrity. Hardware-Integrity-2 Board Must use a HSM. Hardware-Integrity-3 RTC Must not be alterable. Domain Object Recommendations Hardware-Certificate-1 System Shall allow storing dedicated certificates. Hardware-Certificate-2 ECU The ECU must verify the certification authority hierarchy. Hardware-Certificate-3 System Allow the modification of certificates only if the source can be authenticated by a certificate already stored or in the higher levels of the chain of trust. Domain Object Recommendations Hardware-Memory-1 ECU The ECU shall never expose the unencrypted key in RAM when using cryptographic keys. Hardware-Memory-2 Bootloader Internal NVM only Hardware-Module-3 - HSM must be used to secure keys. Domain Variable / Config name Value Boot-Image-Selection-1 CONFIG_BOOTDELAY -2 Boot-Image-Selection-2 bootdelay -2 Domain Config name State Boot-Image-Authenticity-1 CONFIG_FIT Enable Boot-Image-Authenticity-2 CONFIG_FIT_SIGNATURE Enable Boot-Image-Authenticity-3 CONFIG_RSA Enable Boot-Image-Authenticity-4 CONFIG_OF_CONTROL Enable Boot-Image-Authenticity-5 CONFIG_OF_SEPARATE Enable Boot-Image-Authenticity-6 CONFIG_DEFAULT_DEVICE_TREE Enable Domain Communication modes State Boot-Communication-1 USB Disabled and Compiled-out if not required. Boot-Communication-2 USB Else, Kernel should be configured to only enable the minimum required USB devices and filesystems should be treated with special care. Boot-Communication-3 Ethernet Disabled Boot-Communication-4 U-boot and sboot DOCSIS Disabled Boot-Communication-5 Serial ports Disabled Domain Config name State Boot-Communication-USB-1 CONFIG_CMD_USB Not defined Boot-Communication-USB-2 CONFIG_USB_UHCI Not defined Boot-Communication-USB-3 CONFIG_USB_KEYBOARD Not defined Boot-Communication-USB-4 CONFIG_USB_STORAGE Not defined Boot-Communication-USB-5 CONFIG_USB_HOST_ETHER Not defined Domain Communication modes State Boot-Communication-1 Network interfaces Preferably no network interface is allowed , otherwise, restrict the services to those used. Domain Object Recommendations Boot-Communication-1 Services , ports and devices Restrict the services , ports and devices to those used. Domain Command name State Boot-Communication-Flash-1 do_nand Disable Domain Config name Value Boot-Consoles-Serial-1 CONFIG_SILENT_CONSOLE Disable Boot-Consoles-Serial-2 CONFIG_SYS_DEVICE_NULLDEV Disable Boot-Consoles-Serial-3 CONFIG_SILENT_CONSOLE_UPDATE_ON_RELOC Disable Domain Environment variable name State Boot-Consoles-Serial-1 INC_DEBUG_PRINT Not defined Domain Config name State Boot-Consoles-Variables-1 CONFIG_ENV_IS_IN_MMC #undef Boot-Consoles-Variables-2 CONFIG_ENV_IS_IN_EEPROM #undef Boot-Consoles-Variables-3 CONFIG_ENV_IS_IN_FLASH #undef Boot-Consoles-Variables-4 CONFIG_ENV_IS_IN_DATAFLASH #undef Boot-Consoles-Variables-5 CONFIG_ENV_IS_IN_FAT #undef Boot-Consoles-Variables-6 CONFIG_ENV_IS_IN_NAND #undef Boot-Consoles-Variables-7 CONFIG_ENV_IS_IN_NVRAM #undef Boot-Consoles-Variables-8 CONFIG_ENV_IS_IN_ONENAND #undef Boot-Consoles-Variables-9 CONFIG_ENV_IS_IN_SPI_FLASH #undef Boot-Consoles-Variables-10 CONFIG_ENV_IS_IN_REMOTE #undef Boot-Consoles-Variables-11 CONFIG_ENV_IS_IN_UBI #undef Boot-Consoles-Variables-12 CONFIG_ENV_IS_NOWHERE #define Domain Command name State Boot-Consoles-MemDump-1 md Disabled Boot-Consoles-MemDump-2 mm Disabled Boot-Consoles-MemDump-3 nm Disabled Boot-Consoles-MemDump-4 mw Disabled Boot-Consoles-MemDump-5 cp Disabled Boot-Consoles-MemDump-6 mwc Disabled Boot-Consoles-MemDump-7 mdc Disabled Boot-Consoles-MemDump-8 mtest Disabled Boot-Consoles-MemDump-9 loopw Disabled Domain Config name Value Kernel-General-MAC-1 CONFIG_IP_NF_SECURITY m Kernel-General-MAC-2 CONFIG_IP6_NF_SECURITY m Kernel-General-MAC-3 CONFIG_EXT2_FS_SECURITY y Kernel-General-MAC-4 CONFIG_EXT3_FS_SECURITY y Kernel-General-MAC-5 CONFIG_EXT4_FS_SECURITY y Kernel-General-MAC-6 CONFIG_SECURITY y Kernel-General-MAC-7 CONFIG_SECURITY_SMACK y Kernel-General-MAC-8 CONFIG_TMPFS_XATTR y Domain Config name Value Kernel-General-kexec-1 CONFIG_KEXEC n Domain Config name Value Kernel-General-IPAutoConf-1 CONFIG_IP_PNP n Domain Config name Value Kernel-General-SysCtl_SysCall-1 CONFIG_SYSCTL_SYSCALL n Domain Config name Value Kernel-General-LegacyLinux-1 CONFIG_USELIB n Domain Config name Value Kernel-General-FirmHelper-1 CONFIG_FW_LOADER_USER_HELPER n Domain Config name Value Kernel-General-PanicOnOOPS-1 CONFIG_PANIC_ON_OOPS y Domain Config name Value Kernel-General-SocketMon-1 CONFIG_PACKET_DIAG n Kernel-General-SocketMon-2 CONFIG_UNIX_DIAG n Domain Config name Value Kernel-General-BPF_JIT-1 CONFIG_BPF_JIT n Domain Config name Value Kernel-General-ModuleSigning-1 CONFIG_MODULE_SIG_FORCE y Domain Variable name Value Kernel-General-ModuleSigning-2 kernel.modules_disabled 1 Domain Object State Kernel-General-Drivers-1 USB Disabled Kernel-General-Drivers-2 PCMCIA Disabled Kernel-General-Drivers-3 Other hotplug bus Disabled Domain compiler and linker options State Kernel-General-IndependentExec-1 -pie -fpic Enable Domain compiler and linker options State Kernel-General-OverwriteAttacks-1 -z,relro Enable Kernel-General-OverwriteAttacks-2 -z,now Enable Domain Object Recommendations Kernel-General-LibraryLinking-1 Dynamic linking Should generally not be allowed. Domain Config name Value Kernel-Memory-RestrictAccess-1 CONFIG_DEVKMEM n Domain Config name Value Kernel-Memory-CoreDump-1 CONFIG_PROC_KCORE n Domain Config name Value Kernel-Memory-Swap-1 CONFIG_SWAP n Domain Config name Value Kernel-Memory-LoadAllSymbols-1 CONFIG_KALLSYMS n Kernel-Memory-LoadAllSymbols-2 CONFIG_KALLSYMS_ALL n Domain Config name Value Kernel-Memory-Stack-1 CONFIG_CC_STACKPROTECTOR y Domain Config name Value Kernel-Memory-Access-1 CONFIG_DEVMEM n Domain Config name Value Kernel-Memory-CrossMemAttach-1 CROSS_MEMORY_ATTACH n Domain compiler and linker options State Kernel-Memory-StackSmashing-1 -fstack-protector-all Enable Domain compiler options and config name Value Kernel-Memory-BufferOverflows-1 -D_FORTIFY_SOURCE 2 Kernel-Memory-BufferOverflows-2 CONFIG_FORTIFY_SOURCE y Domain Config name Value Kernel-Consoles-Serial-1 CONFIG_SERIAL_8250 n Kernel-Consoles-Serial-2 CONFIG_SERIAL_8250_CONSOLE n Kernel-Consoles-Serial-3 CONFIG_SERIAL_CORE n Kernel-Consoles-Serial-4 CONFIG_SERIAL_CORE_CONSOLE n Domain Config name Value Kernel-Consoles-CommandLine-1 CONFIG_CMDLINE_BOOL y Kernel-Consoles-CommandLine-2 CONFIG_CMDLINE \"insert kernel command line here\" Kernel-Consoles-CommandLine-3 CONFIG_CMDLINE_OVERRIDE y Domain Config name Value Kernel-Consoles-KDBG-1 CONFIG_KGDB n Domain Config name Value Kernel-Consoles-SysRQ-1 CONFIG_MAGIC_SYSRQ n Domain Config name Value Kernel-Consoles-BinaryFormat-1 CONFIG_BINFMT_MISC n Domain Config name Value Kernel-Debug-Symbols-1 CONFIG_DEBUG_INFO n Domain Config name Value Kernel-Debug-Kprobes-1 CONFIG_KPROBES n Domain Config name Value Kernel-Debug-Tracing-1 CONFIG_FTRACE n Domain Config name Value Kernel-Debug-Profiling-1 CONFIG_OPROFILE n Kernel-Debug-Profiling-2 CONFIG_PROFILING n Domain Config name Value Kernel-Debug-OOPSOnBUG-1 CONFIG_DEBUG_BUGVERBOSE n Domain Config name Value Kernel-Debug-Dev-1 CONFIG_DEBUG_KERNEL n Kernel-Debug-Dev-2 CONFIG_EMBEDDED n Domain Config name Value Kernel-Debug-FileSystem-1 CONFIG_DEBUG_FS n Domain Config name Value Kernel-Debug-BUG-1 CONFIG_BUG n Domain Config name Value Kernel-Debug-CoreDumps-1 CONFIG_COREDUMP n Domain File name Value Kernel-Debug-AdressDisplay-1 /proc/sys/kernel/kptr_restrict 1 Domain File or Directorie name State Kernel-Debug-AdressDisplay-1 /boot/vmlinuz* Readable Only for root user Kernel-Debug-AdressDisplay-2 /boot/System.map* Readable Only for root user Kernel-Debug-AdressDisplay-3 /sys/kernel/debug/ Readable Only for root user Kernel-Debug-AdressDisplay-4 /proc/slabinfo Readable Only for root user Domain File name Value Kernel-Debug-DMESG-1 /proc/sys/kernel/dmesg_restrict 1 Domain Config name Value Kernel-Debug-Config-1 CONFIG_IKCONFIG n Domain Config name Value Kernel-FileSystems-NFS-1 CONFIG_NFSD n Kernel-FileSystems-NFS-2 CONFIG_NFS_FS n Domain Partition Value Kernel-FileSystems-Mount-1 /boot nosuid , nodev and noexec . Kernel-FileSystems-Mount-2 /var & /tmp In /etc/fstab or vfstab , add nosuid , nodev and noexec . Kernel-FileSystems-Mount-3 Non-root local If type is ext2 or ext3 and mount point not '/', add nodev . Kernel-FileSystems-Mount-4 Removable storage Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-5 Temporary storage Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-6 /dev/shm Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-7 /dev Add nosuid and noexec . Domain Config name State or Value Kernel-FileSystems-Mount-1 CONFIG_DEVTMPFS_MOUNT Disabled or add remount with noexec and nosuid to system startup. Domain Label name Recommendations Kernel-MAC-Floor-1 ^ Only for privileged system services. Kernel-MAC-Floor-2 * Used for device files or /tmp Access restriction via DAC. Domain Label name Recommendations Kernel-MAC-System-1 System Process should write only to file with transmute attribute. Kernel-MAC-System-2 System::run Files are created with the directory label from user and system domain (transmute) Lock is implicit with w . Kernel-MAC-System-3 System::Shared Files are created with the directory label from system domain (transmute) User domain has locked privilege. Kernel-MAC-System-4 System::Log Some limitation may impose to add w to enable append. Kernel-MAC-System-5 System::Sub Isolation of risky Subsystem. Domain Label name Recommendations Kernel-MAC-System-1 User::Pkg::$AppID Only one Label is allowed per App. A data directory is created by the AppFw in rwx mode. Kernel-MAC-System-2 User::Home AppFw needs to create a directory in /home/$USER/App-Shared at first launch if not present with label app-data access is User::App-Shared without transmute. Kernel-MAC-System-3 User::App-Shared Shared space between all App running for a given user. Domain Object Recommendations Platform-SystemD-1 Security model Use Namespaces for containerization. Platform-SystemD-2 Security model Use CGroups to organise processes. Domain Object Recommendations Platform-DBus-1 Security model Use D-Bus as IPC. Platform-DBus-2 Security model Apply D-BUS security patches: D-Bus CVE Domain Tool name State Platform-Utilities-1 connman Used as a connection manager. Platform-Utilities-2 bluez Used as a Bluetooth manager. Platform-Utilities-3 gstreamer Used to manage multimedia file format. Platform-Utilities-4 alsa Used to provides an API for sound card device drivers. Domain Object Recommendations Platform-AGLFw-AppFw-1 Security model Use the AppFw as Security model. Domain Object Recommendations Platform-AGLFw-Cynara-1 Permissions Use Cynara as policy-checker service. Domain Tool name State Platform-Utilities-1 busybox Used to provide a number of tools. Do not compile development tools. Domain Utility name and normal path State Platform-Utilities-1 chgrp in /bin/chgrp Disabled Platform-Utilities-2 chmod in /bin/chmod Disabled Platform-Utilities-3 chown in /bin/chown Disabled Platform-Utilities-4 dmesg in /bin/dmesg Disabled Platform-Utilities-5 Dnsdomainname in /bin/dnsdomainname Disabled Platform-Utilities-6 dropbear , Remove \"dropbear\" from /etc/init.d/rcs Disabled Platform-Utilities-7 Editors in (vi) /bin/vi Disabled Platform-Utilities-8 find in /bin/find Disabled Platform-Utilities-9 gdbserver in /bin/gdbserver Disabled Platform-Utilities-10 hexdump in /bin/hexdump Disabled Platform-Utilities-11 hostname in /bin/hostname Disabled Platform-Utilities-12 install in /bin/install Disabled Platform-Utilities-13 iostat in /bin/iostat Disabled Platform-Utilities-14 killall in /bin/killall Disabled Platform-Utilities-15 klogd in /sbin/klogd Disabled Platform-Utilities-16 logger in /bin/logger Disabled Platform-Utilities-17 lsmod in /sbin/lsmod Disabled Platform-Utilities-18 pmap in /bin/pmap Disabled Platform-Utilities-19 ps in /bin/ps Disabled Platform-Utilities-20 ps in /bin/ps Disabled Platform-Utilities-21 rpm in /bin/rpm Disabled Platform-Utilities-22 SSH Disabled Platform-Utilities-23 stbhotplug in /sbin/stbhotplug Disabled Platform-Utilities-24 strace in /bin/trace Disabled Platform-Utilities-25 su in /bin/su Disabled Platform-Utilities-26 syslogd in (logger) /bin/logger Disabled Platform-Utilities-27 top in /bin/top Disabled Platform-Utilities-28 UART in /proc/tty/driver/ Disabled Platform-Utilities-29 which in /bin/which Disabled Platform-Utilities-30 who and whoami in /bin/whoami Disabled Platform-Utilities-31 awk (busybox) Enabled Platform-Utilities-32 cut (busybox) Enabled Platform-Utilities-33 df (busybox) Enabled Platform-Utilities-34 echo (busybox) Enabled Platform-Utilities-35 fdisk (busybox) Enabled Platform-Utilities-36 grep (busybox) Enabled Platform-Utilities-37 mkdir (busybox) Enabled Platform-Utilities-38 mount (vfat) (busybox) Enabled Platform-Utilities-39 printf (busybox) Enabled Platform-Utilities-40 sed in /bin/sed (busybox) Enabled Platform-Utilities-41 tail (busybox) Enabled Platform-Utilities-42 tee (busybox) Enabled Platform-Utilities-43 test (busybox) Enabled Domain Object Recommendations Platform-Users-root-1 Main application Should not execute as root. Platform-Users-root-2 UI Should run in a context on a user with no capability. Domain Utility name State Platform-Users-root-3 login Not allowed Platform-Users-root-4 su Not allowed Platform-Users-root-5 ssh Not allowed Platform-Users-root-6 scp Not allowed Platform-Users-root-7 sftp Not allowed Domain Object Recommendations Application-Installation-1 AppFw Provide offline-mode in order to install app with the base image. Application-Installation-2 Integrity Allow the installation of applications only if their integrity is good. Domain Tech name Recommendations Connectivity-BusAndConnector-Bus-1 CAN Implement hardware solution in order to prohibit sending unwanted signals. Domain Tech name Recommendations Connectivity-BusAndConnector-Connectors-1 USB Must be disabled. If not, only enable the minimum require USB devices. Connectivity-BusAndConnector-Connectors-2 USB Confidential data exchanged with the ECU over USB must be secure. Connectivity-BusAndConnector-Connectors-3 USB USB Boot on a ECU must be disable. Connectivity-BusAndConnector-Connectors-4 OBD-II Must be disabled outside garages. Domain Object Recommendations Connectivity-Wireless-1 Update Always follow the latest updates of remote communication channels. Domain Tech name or object Recommendations Connectivity-Wireless-Wifi-1 WEP, PSK, TKIP Disabled Connectivity-Wireless-Wifi-2 WPA2 and AES-CCMP Used Connectivity-Wireless-Wifi-3 WPA2 Should protect data sniffing. Connectivity-Wireless-Wifi-4 PSK Changing regularly the password. Connectivity-Wireless-Wifi-5 Device Upgraded easily in software or firmware to have the last security update. Domain Tech name Recommendations Connectivity-Wireless-Bluetooth-1 BLE Use with caution. Connectivity-Wireless-Bluetooth-2 Bluetooth Monitoring Connectivity-Wireless-Bluetooth-3 SSP Avoid using the \"Just Works\" association model. Connectivity-Wireless-Bluetooth-4 Visibility Configured by default as undiscoverable. Except when needed. Connectivity-Wireless-Bluetooth-5 Anti-scanning Used, inter alia, to slow down brute force attacks. Domain Tech name Recommendations Connectivity-Wireless-Cellular-1 GPRS/EDGE Avoid Connectivity-Wireless-Cellular-2 UMTS/HSPA Protected against Jamming. Domain Tech name Recommendations Connectivity-Wireless-Radio-1 RDS Only audio output and meta concerning radio. Domain Tech name Recommendations Connectivity-Wireless-NFC-1 NFC Protected against relay and replay attacks. Connectivity-Wireless-NFC-2 Device Disable unneeded and unapproved services and profiles. Domain Object Recommendations Application-Cloud-Download-1 authentication Must implement authentication process. Application-Cloud-Download-2 Authorization Must implement Authorization process. Domain Object Recommendations Application-Cloud-Infrastructure-1 Packet Should implement a DPI. Application-Cloud-Infrastructure-2 DoS Must implement a DoS protection. Application-Cloud-Infrastructure-3 Test Should implement scanning tools like SATS and DAST. Application-Cloud-Infrastructure-4 Log Should implement security tools (IDS and IPS). Application-Cloud-Infrastructure-5 App integrity Applications must be signed by the code signing authority. Domain Object Recommendations Application-Cloud-Transport-1 Integrity, confidentiality and legitimacy Should implement IPSec standards.","title":"Config notes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/10_Annexes/1.2.10.1_Config_Notes/#config-notes","text":"Domain Object Recommendations Hardware-Integrity-1 Bootloader Must control bootloader integrity. Hardware-Integrity-2 Board Must use a HSM. Hardware-Integrity-3 RTC Must not be alterable. Domain Object Recommendations Hardware-Certificate-1 System Shall allow storing dedicated certificates. Hardware-Certificate-2 ECU The ECU must verify the certification authority hierarchy. Hardware-Certificate-3 System Allow the modification of certificates only if the source can be authenticated by a certificate already stored or in the higher levels of the chain of trust. Domain Object Recommendations Hardware-Memory-1 ECU The ECU shall never expose the unencrypted key in RAM when using cryptographic keys. Hardware-Memory-2 Bootloader Internal NVM only Hardware-Module-3 - HSM must be used to secure keys. Domain Variable / Config name Value Boot-Image-Selection-1 CONFIG_BOOTDELAY -2 Boot-Image-Selection-2 bootdelay -2 Domain Config name State Boot-Image-Authenticity-1 CONFIG_FIT Enable Boot-Image-Authenticity-2 CONFIG_FIT_SIGNATURE Enable Boot-Image-Authenticity-3 CONFIG_RSA Enable Boot-Image-Authenticity-4 CONFIG_OF_CONTROL Enable Boot-Image-Authenticity-5 CONFIG_OF_SEPARATE Enable Boot-Image-Authenticity-6 CONFIG_DEFAULT_DEVICE_TREE Enable Domain Communication modes State Boot-Communication-1 USB Disabled and Compiled-out if not required. Boot-Communication-2 USB Else, Kernel should be configured to only enable the minimum required USB devices and filesystems should be treated with special care. Boot-Communication-3 Ethernet Disabled Boot-Communication-4 U-boot and sboot DOCSIS Disabled Boot-Communication-5 Serial ports Disabled Domain Config name State Boot-Communication-USB-1 CONFIG_CMD_USB Not defined Boot-Communication-USB-2 CONFIG_USB_UHCI Not defined Boot-Communication-USB-3 CONFIG_USB_KEYBOARD Not defined Boot-Communication-USB-4 CONFIG_USB_STORAGE Not defined Boot-Communication-USB-5 CONFIG_USB_HOST_ETHER Not defined Domain Communication modes State Boot-Communication-1 Network interfaces Preferably no network interface is allowed , otherwise, restrict the services to those used. Domain Object Recommendations Boot-Communication-1 Services , ports and devices Restrict the services , ports and devices to those used. Domain Command name State Boot-Communication-Flash-1 do_nand Disable Domain Config name Value Boot-Consoles-Serial-1 CONFIG_SILENT_CONSOLE Disable Boot-Consoles-Serial-2 CONFIG_SYS_DEVICE_NULLDEV Disable Boot-Consoles-Serial-3 CONFIG_SILENT_CONSOLE_UPDATE_ON_RELOC Disable Domain Environment variable name State Boot-Consoles-Serial-1 INC_DEBUG_PRINT Not defined Domain Config name State Boot-Consoles-Variables-1 CONFIG_ENV_IS_IN_MMC #undef Boot-Consoles-Variables-2 CONFIG_ENV_IS_IN_EEPROM #undef Boot-Consoles-Variables-3 CONFIG_ENV_IS_IN_FLASH #undef Boot-Consoles-Variables-4 CONFIG_ENV_IS_IN_DATAFLASH #undef Boot-Consoles-Variables-5 CONFIG_ENV_IS_IN_FAT #undef Boot-Consoles-Variables-6 CONFIG_ENV_IS_IN_NAND #undef Boot-Consoles-Variables-7 CONFIG_ENV_IS_IN_NVRAM #undef Boot-Consoles-Variables-8 CONFIG_ENV_IS_IN_ONENAND #undef Boot-Consoles-Variables-9 CONFIG_ENV_IS_IN_SPI_FLASH #undef Boot-Consoles-Variables-10 CONFIG_ENV_IS_IN_REMOTE #undef Boot-Consoles-Variables-11 CONFIG_ENV_IS_IN_UBI #undef Boot-Consoles-Variables-12 CONFIG_ENV_IS_NOWHERE #define Domain Command name State Boot-Consoles-MemDump-1 md Disabled Boot-Consoles-MemDump-2 mm Disabled Boot-Consoles-MemDump-3 nm Disabled Boot-Consoles-MemDump-4 mw Disabled Boot-Consoles-MemDump-5 cp Disabled Boot-Consoles-MemDump-6 mwc Disabled Boot-Consoles-MemDump-7 mdc Disabled Boot-Consoles-MemDump-8 mtest Disabled Boot-Consoles-MemDump-9 loopw Disabled Domain Config name Value Kernel-General-MAC-1 CONFIG_IP_NF_SECURITY m Kernel-General-MAC-2 CONFIG_IP6_NF_SECURITY m Kernel-General-MAC-3 CONFIG_EXT2_FS_SECURITY y Kernel-General-MAC-4 CONFIG_EXT3_FS_SECURITY y Kernel-General-MAC-5 CONFIG_EXT4_FS_SECURITY y Kernel-General-MAC-6 CONFIG_SECURITY y Kernel-General-MAC-7 CONFIG_SECURITY_SMACK y Kernel-General-MAC-8 CONFIG_TMPFS_XATTR y Domain Config name Value Kernel-General-kexec-1 CONFIG_KEXEC n Domain Config name Value Kernel-General-IPAutoConf-1 CONFIG_IP_PNP n Domain Config name Value Kernel-General-SysCtl_SysCall-1 CONFIG_SYSCTL_SYSCALL n Domain Config name Value Kernel-General-LegacyLinux-1 CONFIG_USELIB n Domain Config name Value Kernel-General-FirmHelper-1 CONFIG_FW_LOADER_USER_HELPER n Domain Config name Value Kernel-General-PanicOnOOPS-1 CONFIG_PANIC_ON_OOPS y Domain Config name Value Kernel-General-SocketMon-1 CONFIG_PACKET_DIAG n Kernel-General-SocketMon-2 CONFIG_UNIX_DIAG n Domain Config name Value Kernel-General-BPF_JIT-1 CONFIG_BPF_JIT n Domain Config name Value Kernel-General-ModuleSigning-1 CONFIG_MODULE_SIG_FORCE y Domain Variable name Value Kernel-General-ModuleSigning-2 kernel.modules_disabled 1 Domain Object State Kernel-General-Drivers-1 USB Disabled Kernel-General-Drivers-2 PCMCIA Disabled Kernel-General-Drivers-3 Other hotplug bus Disabled Domain compiler and linker options State Kernel-General-IndependentExec-1 -pie -fpic Enable Domain compiler and linker options State Kernel-General-OverwriteAttacks-1 -z,relro Enable Kernel-General-OverwriteAttacks-2 -z,now Enable Domain Object Recommendations Kernel-General-LibraryLinking-1 Dynamic linking Should generally not be allowed. Domain Config name Value Kernel-Memory-RestrictAccess-1 CONFIG_DEVKMEM n Domain Config name Value Kernel-Memory-CoreDump-1 CONFIG_PROC_KCORE n Domain Config name Value Kernel-Memory-Swap-1 CONFIG_SWAP n Domain Config name Value Kernel-Memory-LoadAllSymbols-1 CONFIG_KALLSYMS n Kernel-Memory-LoadAllSymbols-2 CONFIG_KALLSYMS_ALL n Domain Config name Value Kernel-Memory-Stack-1 CONFIG_CC_STACKPROTECTOR y Domain Config name Value Kernel-Memory-Access-1 CONFIG_DEVMEM n Domain Config name Value Kernel-Memory-CrossMemAttach-1 CROSS_MEMORY_ATTACH n Domain compiler and linker options State Kernel-Memory-StackSmashing-1 -fstack-protector-all Enable Domain compiler options and config name Value Kernel-Memory-BufferOverflows-1 -D_FORTIFY_SOURCE 2 Kernel-Memory-BufferOverflows-2 CONFIG_FORTIFY_SOURCE y Domain Config name Value Kernel-Consoles-Serial-1 CONFIG_SERIAL_8250 n Kernel-Consoles-Serial-2 CONFIG_SERIAL_8250_CONSOLE n Kernel-Consoles-Serial-3 CONFIG_SERIAL_CORE n Kernel-Consoles-Serial-4 CONFIG_SERIAL_CORE_CONSOLE n Domain Config name Value Kernel-Consoles-CommandLine-1 CONFIG_CMDLINE_BOOL y Kernel-Consoles-CommandLine-2 CONFIG_CMDLINE \"insert kernel command line here\" Kernel-Consoles-CommandLine-3 CONFIG_CMDLINE_OVERRIDE y Domain Config name Value Kernel-Consoles-KDBG-1 CONFIG_KGDB n Domain Config name Value Kernel-Consoles-SysRQ-1 CONFIG_MAGIC_SYSRQ n Domain Config name Value Kernel-Consoles-BinaryFormat-1 CONFIG_BINFMT_MISC n Domain Config name Value Kernel-Debug-Symbols-1 CONFIG_DEBUG_INFO n Domain Config name Value Kernel-Debug-Kprobes-1 CONFIG_KPROBES n Domain Config name Value Kernel-Debug-Tracing-1 CONFIG_FTRACE n Domain Config name Value Kernel-Debug-Profiling-1 CONFIG_OPROFILE n Kernel-Debug-Profiling-2 CONFIG_PROFILING n Domain Config name Value Kernel-Debug-OOPSOnBUG-1 CONFIG_DEBUG_BUGVERBOSE n Domain Config name Value Kernel-Debug-Dev-1 CONFIG_DEBUG_KERNEL n Kernel-Debug-Dev-2 CONFIG_EMBEDDED n Domain Config name Value Kernel-Debug-FileSystem-1 CONFIG_DEBUG_FS n Domain Config name Value Kernel-Debug-BUG-1 CONFIG_BUG n Domain Config name Value Kernel-Debug-CoreDumps-1 CONFIG_COREDUMP n Domain File name Value Kernel-Debug-AdressDisplay-1 /proc/sys/kernel/kptr_restrict 1 Domain File or Directorie name State Kernel-Debug-AdressDisplay-1 /boot/vmlinuz* Readable Only for root user Kernel-Debug-AdressDisplay-2 /boot/System.map* Readable Only for root user Kernel-Debug-AdressDisplay-3 /sys/kernel/debug/ Readable Only for root user Kernel-Debug-AdressDisplay-4 /proc/slabinfo Readable Only for root user Domain File name Value Kernel-Debug-DMESG-1 /proc/sys/kernel/dmesg_restrict 1 Domain Config name Value Kernel-Debug-Config-1 CONFIG_IKCONFIG n Domain Config name Value Kernel-FileSystems-NFS-1 CONFIG_NFSD n Kernel-FileSystems-NFS-2 CONFIG_NFS_FS n Domain Partition Value Kernel-FileSystems-Mount-1 /boot nosuid , nodev and noexec . Kernel-FileSystems-Mount-2 /var & /tmp In /etc/fstab or vfstab , add nosuid , nodev and noexec . Kernel-FileSystems-Mount-3 Non-root local If type is ext2 or ext3 and mount point not '/', add nodev . Kernel-FileSystems-Mount-4 Removable storage Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-5 Temporary storage Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-6 /dev/shm Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-7 /dev Add nosuid and noexec . Domain Config name State or Value Kernel-FileSystems-Mount-1 CONFIG_DEVTMPFS_MOUNT Disabled or add remount with noexec and nosuid to system startup. Domain Label name Recommendations Kernel-MAC-Floor-1 ^ Only for privileged system services. Kernel-MAC-Floor-2 * Used for device files or /tmp Access restriction via DAC. Domain Label name Recommendations Kernel-MAC-System-1 System Process should write only to file with transmute attribute. Kernel-MAC-System-2 System::run Files are created with the directory label from user and system domain (transmute) Lock is implicit with w . Kernel-MAC-System-3 System::Shared Files are created with the directory label from system domain (transmute) User domain has locked privilege. Kernel-MAC-System-4 System::Log Some limitation may impose to add w to enable append. Kernel-MAC-System-5 System::Sub Isolation of risky Subsystem. Domain Label name Recommendations Kernel-MAC-System-1 User::Pkg::$AppID Only one Label is allowed per App. A data directory is created by the AppFw in rwx mode. Kernel-MAC-System-2 User::Home AppFw needs to create a directory in /home/$USER/App-Shared at first launch if not present with label app-data access is User::App-Shared without transmute. Kernel-MAC-System-3 User::App-Shared Shared space between all App running for a given user. Domain Object Recommendations Platform-SystemD-1 Security model Use Namespaces for containerization. Platform-SystemD-2 Security model Use CGroups to organise processes. Domain Object Recommendations Platform-DBus-1 Security model Use D-Bus as IPC. Platform-DBus-2 Security model Apply D-BUS security patches: D-Bus CVE Domain Tool name State Platform-Utilities-1 connman Used as a connection manager. Platform-Utilities-2 bluez Used as a Bluetooth manager. Platform-Utilities-3 gstreamer Used to manage multimedia file format. Platform-Utilities-4 alsa Used to provides an API for sound card device drivers. Domain Object Recommendations Platform-AGLFw-AppFw-1 Security model Use the AppFw as Security model. Domain Object Recommendations Platform-AGLFw-Cynara-1 Permissions Use Cynara as policy-checker service. Domain Tool name State Platform-Utilities-1 busybox Used to provide a number of tools. Do not compile development tools. Domain Utility name and normal path State Platform-Utilities-1 chgrp in /bin/chgrp Disabled Platform-Utilities-2 chmod in /bin/chmod Disabled Platform-Utilities-3 chown in /bin/chown Disabled Platform-Utilities-4 dmesg in /bin/dmesg Disabled Platform-Utilities-5 Dnsdomainname in /bin/dnsdomainname Disabled Platform-Utilities-6 dropbear , Remove \"dropbear\" from /etc/init.d/rcs Disabled Platform-Utilities-7 Editors in (vi) /bin/vi Disabled Platform-Utilities-8 find in /bin/find Disabled Platform-Utilities-9 gdbserver in /bin/gdbserver Disabled Platform-Utilities-10 hexdump in /bin/hexdump Disabled Platform-Utilities-11 hostname in /bin/hostname Disabled Platform-Utilities-12 install in /bin/install Disabled Platform-Utilities-13 iostat in /bin/iostat Disabled Platform-Utilities-14 killall in /bin/killall Disabled Platform-Utilities-15 klogd in /sbin/klogd Disabled Platform-Utilities-16 logger in /bin/logger Disabled Platform-Utilities-17 lsmod in /sbin/lsmod Disabled Platform-Utilities-18 pmap in /bin/pmap Disabled Platform-Utilities-19 ps in /bin/ps Disabled Platform-Utilities-20 ps in /bin/ps Disabled Platform-Utilities-21 rpm in /bin/rpm Disabled Platform-Utilities-22 SSH Disabled Platform-Utilities-23 stbhotplug in /sbin/stbhotplug Disabled Platform-Utilities-24 strace in /bin/trace Disabled Platform-Utilities-25 su in /bin/su Disabled Platform-Utilities-26 syslogd in (logger) /bin/logger Disabled Platform-Utilities-27 top in /bin/top Disabled Platform-Utilities-28 UART in /proc/tty/driver/ Disabled Platform-Utilities-29 which in /bin/which Disabled Platform-Utilities-30 who and whoami in /bin/whoami Disabled Platform-Utilities-31 awk (busybox) Enabled Platform-Utilities-32 cut (busybox) Enabled Platform-Utilities-33 df (busybox) Enabled Platform-Utilities-34 echo (busybox) Enabled Platform-Utilities-35 fdisk (busybox) Enabled Platform-Utilities-36 grep (busybox) Enabled Platform-Utilities-37 mkdir (busybox) Enabled Platform-Utilities-38 mount (vfat) (busybox) Enabled Platform-Utilities-39 printf (busybox) Enabled Platform-Utilities-40 sed in /bin/sed (busybox) Enabled Platform-Utilities-41 tail (busybox) Enabled Platform-Utilities-42 tee (busybox) Enabled Platform-Utilities-43 test (busybox) Enabled Domain Object Recommendations Platform-Users-root-1 Main application Should not execute as root. Platform-Users-root-2 UI Should run in a context on a user with no capability. Domain Utility name State Platform-Users-root-3 login Not allowed Platform-Users-root-4 su Not allowed Platform-Users-root-5 ssh Not allowed Platform-Users-root-6 scp Not allowed Platform-Users-root-7 sftp Not allowed Domain Object Recommendations Application-Installation-1 AppFw Provide offline-mode in order to install app with the base image. Application-Installation-2 Integrity Allow the installation of applications only if their integrity is good. Domain Tech name Recommendations Connectivity-BusAndConnector-Bus-1 CAN Implement hardware solution in order to prohibit sending unwanted signals. Domain Tech name Recommendations Connectivity-BusAndConnector-Connectors-1 USB Must be disabled. If not, only enable the minimum require USB devices. Connectivity-BusAndConnector-Connectors-2 USB Confidential data exchanged with the ECU over USB must be secure. Connectivity-BusAndConnector-Connectors-3 USB USB Boot on a ECU must be disable. Connectivity-BusAndConnector-Connectors-4 OBD-II Must be disabled outside garages. Domain Object Recommendations Connectivity-Wireless-1 Update Always follow the latest updates of remote communication channels. Domain Tech name or object Recommendations Connectivity-Wireless-Wifi-1 WEP, PSK, TKIP Disabled Connectivity-Wireless-Wifi-2 WPA2 and AES-CCMP Used Connectivity-Wireless-Wifi-3 WPA2 Should protect data sniffing. Connectivity-Wireless-Wifi-4 PSK Changing regularly the password. Connectivity-Wireless-Wifi-5 Device Upgraded easily in software or firmware to have the last security update. Domain Tech name Recommendations Connectivity-Wireless-Bluetooth-1 BLE Use with caution. Connectivity-Wireless-Bluetooth-2 Bluetooth Monitoring Connectivity-Wireless-Bluetooth-3 SSP Avoid using the \"Just Works\" association model. Connectivity-Wireless-Bluetooth-4 Visibility Configured by default as undiscoverable. Except when needed. Connectivity-Wireless-Bluetooth-5 Anti-scanning Used, inter alia, to slow down brute force attacks. Domain Tech name Recommendations Connectivity-Wireless-Cellular-1 GPRS/EDGE Avoid Connectivity-Wireless-Cellular-2 UMTS/HSPA Protected against Jamming. Domain Tech name Recommendations Connectivity-Wireless-Radio-1 RDS Only audio output and meta concerning radio. Domain Tech name Recommendations Connectivity-Wireless-NFC-1 NFC Protected against relay and replay attacks. Connectivity-Wireless-NFC-2 Device Disable unneeded and unapproved services and profiles. Domain Object Recommendations Application-Cloud-Download-1 authentication Must implement authentication process. Application-Cloud-Download-2 Authorization Must implement Authorization process. Domain Object Recommendations Application-Cloud-Infrastructure-1 Packet Should implement a DPI. Application-Cloud-Infrastructure-2 DoS Must implement a DoS protection. Application-Cloud-Infrastructure-3 Test Should implement scanning tools like SATS and DAST. Application-Cloud-Infrastructure-4 Log Should implement security tools (IDS and IPS). Application-Cloud-Infrastructure-5 App integrity Applications must be signed by the code signing authority. Domain Object Recommendations Application-Cloud-Transport-1 Integrity, confidentiality and legitimacy Should implement IPSec standards.","title":"Config notes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/10_Annexes/1.2.10.2_To_Do_Notes/","text":"Todo notes Domain Improvement Boot-Abstract-1 More generic and add examples (The chain of trust). Domain Improvement Boot-Abstract-1 Review the definition of the \"boot loader\". Domain Improvement Boot-Consoles-1 Secure loader: No reference earlier? Domain Improvement Hypervisor-Abstract-1 Complete Hypervisor part ( jailhouse / KVM / Xen ). Domain Improvement Kernel-General-IndependentExec-1 Kernel or/and platform part ? Domain Improvement Kernel-General-LibraryLinking-1 Keep this part? Domain Improvement Platform-Abstract-1 Create a graphics and sound part. Domain Improvement Platform-Services-1 SystemD ? Platform-Services-2 Secure daemon ? Domain Improvement Platform-Users-Capabilities-1 Kernel or Platform-user? Platform-Users-Capabilities-2 Add config note. Domain Improvement Application-Installation-1 Talk about AppFw offline mode. Domain Improvement Application-Signature-1 Add content (see secure build in Secure development part). Domain Improvement Application-Services-1 Add content (Which services?). Application-Services-2 Add Binder. Domain Improvement Connectivity-Abstract-1 Improve abstract. Domain Improvement Connectivity-Wireless-1 Add communication channels (RFID, ZigBee?). Domain Improvement Update-SOTA-1 Part to complete. Domain Improvement SecureDev-SecureBuild-1 Add content. Domain Improvement SecureDev-Signatures-1 Add content. Domain Improvement SecureDev-CodeAudit-1 Add CVE analyser. SecureDev-CodeAudit-2 OSSTMM .","title":"Todo notes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/10_Annexes/1.2.10.2_To_Do_Notes/#todo-notes","text":"Domain Improvement Boot-Abstract-1 More generic and add examples (The chain of trust). Domain Improvement Boot-Abstract-1 Review the definition of the \"boot loader\". Domain Improvement Boot-Consoles-1 Secure loader: No reference earlier? Domain Improvement Hypervisor-Abstract-1 Complete Hypervisor part ( jailhouse / KVM / Xen ). Domain Improvement Kernel-General-IndependentExec-1 Kernel or/and platform part ? Domain Improvement Kernel-General-LibraryLinking-1 Keep this part? Domain Improvement Platform-Abstract-1 Create a graphics and sound part. Domain Improvement Platform-Services-1 SystemD ? Platform-Services-2 Secure daemon ? Domain Improvement Platform-Users-Capabilities-1 Kernel or Platform-user? Platform-Users-Capabilities-2 Add config note. Domain Improvement Application-Installation-1 Talk about AppFw offline mode. Domain Improvement Application-Signature-1 Add content (see secure build in Secure development part). Domain Improvement Application-Services-1 Add content (Which services?). Application-Services-2 Add Binder. Domain Improvement Connectivity-Abstract-1 Improve abstract. Domain Improvement Connectivity-Wireless-1 Add communication channels (RFID, ZigBee?). Domain Improvement Update-SOTA-1 Part to complete. Domain Improvement SecureDev-SecureBuild-1 Add content. Domain Improvement SecureDev-Signatures-1 Add content. Domain Improvement SecureDev-CodeAudit-1 Add CVE analyser. SecureDev-CodeAudit-2 OSSTMM .","title":"Todo notes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/1_Hardware/Abstract/","text":"Part 1 - Hardware Abstract The Automotive Grade Linux platform is a Linux distribution with AGL compliant applications and services. The platform includes the following hardware: SoC (System-on-Chip). Memory (RAM, ROM, storage, etc.). Peripherals. You will find in this first part everything that concerns the hardware security. The goal is to protect system against all attacks that are trying to gain additional privileges by recovering and/or changing cryptographic keys in order to alter the integrity of the boot. We should also prevent hardware modifications in order to achieve this goal. We will expose below some examples of possible configurations. Acronyms and Abbreviations The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description HSM H ardware S ecurity M odule NVM N on- V olatile M emory SHE S ecure H ardware E xtensions Integrity The board must store hardcoded cryptographic keys in order to verify among others the integrity of the bootloader . Manufacturers can use HSM and SHE to enhance the security of their board. Domain Object Recommendations Hardware-Integrity-1 Bootloader Must control bootloader integrity. Hardware-Integrity-2 Board Must use a HSM. Hardware-Integrity-3 RTC Must not be alterable. Certificates Domain Object Recommendations Hardware-Certificate-1 System Shall allow storing dedicated certificates. Hardware-Certificate-2 ECU The ECU must verify the certification authority hierarchy. Hardware-Certificate-3 System Allow the modification of certificates only if the source can be authenticated by a certificate already stored or in the higher levels of the chain of trust. Memory Domain Object Recommendations Hardware-Memory-1 ECU The ECU shall never expose the unencrypted key in RAM when using cryptographic keys. Hardware-Memory-2 Bootloader Internal NVM only Hardware-Module-3 - HSM must be used to secure keys.","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/1_Hardware/Abstract/#part-1-hardware","text":"","title":"Part 1 - Hardware"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/1_Hardware/Abstract/#abstract","text":"The Automotive Grade Linux platform is a Linux distribution with AGL compliant applications and services. The platform includes the following hardware: SoC (System-on-Chip). Memory (RAM, ROM, storage, etc.). Peripherals. You will find in this first part everything that concerns the hardware security. The goal is to protect system against all attacks that are trying to gain additional privileges by recovering and/or changing cryptographic keys in order to alter the integrity of the boot. We should also prevent hardware modifications in order to achieve this goal. We will expose below some examples of possible configurations.","title":"Abstract"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/1_Hardware/Abstract/#acronyms-and-abbreviations","text":"The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description HSM H ardware S ecurity M odule NVM N on- V olatile M emory SHE S ecure H ardware E xtensions","title":"Acronyms and Abbreviations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/1_Hardware/Abstract/#integrity","text":"The board must store hardcoded cryptographic keys in order to verify among others the integrity of the bootloader . Manufacturers can use HSM and SHE to enhance the security of their board. Domain Object Recommendations Hardware-Integrity-1 Bootloader Must control bootloader integrity. Hardware-Integrity-2 Board Must use a HSM. Hardware-Integrity-3 RTC Must not be alterable.","title":"Integrity"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/1_Hardware/Abstract/#certificates","text":"Domain Object Recommendations Hardware-Certificate-1 System Shall allow storing dedicated certificates. Hardware-Certificate-2 ECU The ECU must verify the certification authority hierarchy. Hardware-Certificate-3 System Allow the modification of certificates only if the source can be authenticated by a certificate already stored or in the higher levels of the chain of trust.","title":"Certificates"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/1_Hardware/Abstract/#memory","text":"Domain Object Recommendations Hardware-Memory-1 ECU The ECU shall never expose the unencrypted key in RAM when using cryptographic keys. Hardware-Memory-2 Bootloader Internal NVM only Hardware-Module-3 - HSM must be used to secure keys.","title":"Memory"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.0_Abstract/","text":"Part 2 - Secure boot Abstract Domain Improvement Boot-Abstract-1 More generic and add examples (The chain of trust). Secure boot refers to preventing malicious software applications and \u201cunauthorized\u201d operating systems from loading during the system start-up process. The goal is to protect users from rootkits and other low-level malware attacks. Modern bootloaders come with features that can be used to enable secure boot in the system. Boot Hardening : Steps/requirements to configure the boot sequence, in order to restrict the device from executing anything other than the approved software image. In this part, we will see a series of settings that will allow us to improve security during boot phase. For the purposes of reference and explanation, we are providing guidance on how to configure an embedded device that runs with a 3.10.17 Linux kernel. If the integrity is not checked or if a critical error occurs, the system must boot on a very stable backup image. Requirements : These requirements must be met even if an alternative version of the Linux kernel is chosen. Recommendations : Detailed best practices that should be applied in order to secure a device. Although they are not currently listed as hard requirements, they may be upgraded to requirements status in the future. In addition, specific operators may change some of these recommendations into requirements based on their specific needs and objectives. Domain Improvement Boot-Abstract-1 Review the definition of the \"boot loader\". Boot loader : The boot loader consists of the Primary boot loader residing in OTP memory, sboot, U-Boot and Secure loader residing in external flash (NAND or SPI/NOR flash memory). The CPU on power on or reset executes the primary boot loader. The OTP primary boot loader makes the necessary initial system configuration and then loads the secondary boot loader sboot from external flash memory to ram memory. The sboot then loads the U-Boot along with the Secure loader. U-Boot then verifies the Kernel/system image integrity, then loads the Kernel/system image before passing control to it. Acronyms and Abbreviations The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description FUSE F ilesystem in U ser S pac E OTP O ne- T ime- P rogrammable DOCSIS D ata O ver C able S ervice I nterface S pecification","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.0_Abstract/#part-2-secure-boot","text":"","title":"Part 2 - Secure boot"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.0_Abstract/#abstract","text":"Domain Improvement Boot-Abstract-1 More generic and add examples (The chain of trust). Secure boot refers to preventing malicious software applications and \u201cunauthorized\u201d operating systems from loading during the system start-up process. The goal is to protect users from rootkits and other low-level malware attacks. Modern bootloaders come with features that can be used to enable secure boot in the system. Boot Hardening : Steps/requirements to configure the boot sequence, in order to restrict the device from executing anything other than the approved software image. In this part, we will see a series of settings that will allow us to improve security during boot phase. For the purposes of reference and explanation, we are providing guidance on how to configure an embedded device that runs with a 3.10.17 Linux kernel. If the integrity is not checked or if a critical error occurs, the system must boot on a very stable backup image. Requirements : These requirements must be met even if an alternative version of the Linux kernel is chosen. Recommendations : Detailed best practices that should be applied in order to secure a device. Although they are not currently listed as hard requirements, they may be upgraded to requirements status in the future. In addition, specific operators may change some of these recommendations into requirements based on their specific needs and objectives. Domain Improvement Boot-Abstract-1 Review the definition of the \"boot loader\". Boot loader : The boot loader consists of the Primary boot loader residing in OTP memory, sboot, U-Boot and Secure loader residing in external flash (NAND or SPI/NOR flash memory). The CPU on power on or reset executes the primary boot loader. The OTP primary boot loader makes the necessary initial system configuration and then loads the secondary boot loader sboot from external flash memory to ram memory. The sboot then loads the U-Boot along with the Secure loader. U-Boot then verifies the Kernel/system image integrity, then loads the Kernel/system image before passing control to it.","title":"Abstract"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.0_Abstract/#acronyms-and-abbreviations","text":"The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description FUSE F ilesystem in U ser S pac E OTP O ne- T ime- P rogrammable DOCSIS D ata O ver C able S ervice I nterface S pecification","title":"Acronyms and Abbreviations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.1_Image/","text":"Image Image selection The boot process shall be uninterruptible and shall irrevocably boot the image as specified in the boot environment. In U-Boot set the \" bootdelay \" environment variable and/or define CONFIG_BOOTDELAY to -2 . Domain Variable / Config name Value Boot-Image-Selection-1 CONFIG_BOOTDELAY -2 Boot-Image-Selection-2 bootdelay -2 Image authenticity It shall not be possible to boot from an unverified image. The secure boot feature in U-Boot shall be enabled. The secure boot feature is available from U-Boot 2013.07 version. To enable the secure boot feature, enable the following features: CONFIG_FIT: Enables support for Flat Image Tree (FIT) uImage format. CONFIG_FIT_SIGNATURE: Enables signature verification of FIT images. CONFIG_RSA: Enables RSA algorithm used for FIT image verification. CONFIG_OF_CONTROL: Enables Flattened Device Tree (FDT) configuration. CONFIG_OF_SEPARATE: Enables separate build of u-Boot from the device tree. CONFIG_DEFAULT_DEVICE_TREE: Specifies the default Device Tree used for the run-time configuration of U-Boot. Generate the U-Boot image with public keys to validate and load the image. It shall use RSA2048 and SHA256 for authentication. Domain Config name State Boot-Image-Authenticity-1 CONFIG_FIT Enable Boot-Image-Authenticity-2 CONFIG_FIT_SIGNATURE Enable Boot-Image-Authenticity-3 CONFIG_RSA Enable Boot-Image-Authenticity-4 CONFIG_OF_CONTROL Enable Boot-Image-Authenticity-5 CONFIG_OF_SEPARATE Enable Boot-Image-Authenticity-6 CONFIG_DEFAULT_DEVICE_TREE Enable","title":"Image"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.1_Image/#image","text":"","title":"Image"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.1_Image/#image-selection","text":"The boot process shall be uninterruptible and shall irrevocably boot the image as specified in the boot environment. In U-Boot set the \" bootdelay \" environment variable and/or define CONFIG_BOOTDELAY to -2 . Domain Variable / Config name Value Boot-Image-Selection-1 CONFIG_BOOTDELAY -2 Boot-Image-Selection-2 bootdelay -2","title":"Image selection"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.1_Image/#image-authenticity","text":"It shall not be possible to boot from an unverified image. The secure boot feature in U-Boot shall be enabled. The secure boot feature is available from U-Boot 2013.07 version. To enable the secure boot feature, enable the following features: CONFIG_FIT: Enables support for Flat Image Tree (FIT) uImage format. CONFIG_FIT_SIGNATURE: Enables signature verification of FIT images. CONFIG_RSA: Enables RSA algorithm used for FIT image verification. CONFIG_OF_CONTROL: Enables Flattened Device Tree (FDT) configuration. CONFIG_OF_SEPARATE: Enables separate build of u-Boot from the device tree. CONFIG_DEFAULT_DEVICE_TREE: Specifies the default Device Tree used for the run-time configuration of U-Boot. Generate the U-Boot image with public keys to validate and load the image. It shall use RSA2048 and SHA256 for authentication. Domain Config name State Boot-Image-Authenticity-1 CONFIG_FIT Enable Boot-Image-Authenticity-2 CONFIG_FIT_SIGNATURE Enable Boot-Image-Authenticity-3 CONFIG_RSA Enable Boot-Image-Authenticity-4 CONFIG_OF_CONTROL Enable Boot-Image-Authenticity-5 CONFIG_OF_SEPARATE Enable Boot-Image-Authenticity-6 CONFIG_DEFAULT_DEVICE_TREE Enable","title":"Image authenticity"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.2_Communication-modes/","text":"Communication modes Disable USB, Serial and DOCSIS Support To disable USB support in U-Boot, following config's shall not be defined: CONFIG_CMD_USB: Enables basic USB support and the usb command. CONFIG_USB_UHCI: Defines the lowlevel part. CONFIG_USB_KEYBOARD: Enables the USB Keyboard. CONFIG_USB_STORAGE: Enables the USB storage devices. CONFIG_USB_HOST_ETHER: Enables USB Ethernet adapter support. In addition, disable unnecessary communication modes like Ethernet, Serial ports, DOCSIS in U-Boot and sboot that are not necessary. Linux Kernel support for USB should be compiled-out if not required. If it is needed, the Linux Kernel should be configured to only enable the minimum required USB devices. User-initiated USB-filesystems should be treated with special care. Whether or not the filesystems are mounted in userspace ( FUSE ), restricted mount options should be observed. Domain Communication modes State Boot-Communication-1 USB Disabled and Compiled-out if not required. Boot-Communication-2 USB Else, Kernel should be configured to only enable the minimum required USB devices and filesystems should be treated with special care. Boot-Communication-3 Ethernet Disabled Boot-Communication-4 U-boot and sboot DOCSIS Disabled Boot-Communication-5 Serial ports Disabled Domain Config name State Boot-Communication-USB-1 CONFIG_CMD_USB Not defined Boot-Communication-USB-2 CONFIG_USB_UHCI Not defined Boot-Communication-USB-3 CONFIG_USB_KEYBOARD Not defined Boot-Communication-USB-4 CONFIG_USB_STORAGE Not defined Boot-Communication-USB-5 CONFIG_USB_HOST_ETHER Not defined Disable all unused Network Interfaces Only used network interfaces should be enabled. Where possible, services should also be limited to those necessary. Domain Communication modes State Boot-Communication-1 Network interfaces Preferably no network interface is allowed , otherwise, restrict the services to those used. Remove or Disable Unnecessary Services, Ports, and Devices Restrict the services , ports and devices to those used. Domain Object Recommendations Boot-Communication-1 Services , ports and devices Restrict the services , ports and devices to those used. Disable flash access Recommendation : In U-Boot following flash memory commands shall be disabled: NAND : Support for nand flash access available through do_nand has to be disabled. Domain Command name State Boot-Communication-Flash-1 do_nand Disable Similarly sboot should disable flash access support through command line if any.","title":"Communication modes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.2_Communication-modes/#communication-modes","text":"","title":"Communication modes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.2_Communication-modes/#disable-usb-serial-and-docsis-support","text":"To disable USB support in U-Boot, following config's shall not be defined: CONFIG_CMD_USB: Enables basic USB support and the usb command. CONFIG_USB_UHCI: Defines the lowlevel part. CONFIG_USB_KEYBOARD: Enables the USB Keyboard. CONFIG_USB_STORAGE: Enables the USB storage devices. CONFIG_USB_HOST_ETHER: Enables USB Ethernet adapter support. In addition, disable unnecessary communication modes like Ethernet, Serial ports, DOCSIS in U-Boot and sboot that are not necessary. Linux Kernel support for USB should be compiled-out if not required. If it is needed, the Linux Kernel should be configured to only enable the minimum required USB devices. User-initiated USB-filesystems should be treated with special care. Whether or not the filesystems are mounted in userspace ( FUSE ), restricted mount options should be observed. Domain Communication modes State Boot-Communication-1 USB Disabled and Compiled-out if not required. Boot-Communication-2 USB Else, Kernel should be configured to only enable the minimum required USB devices and filesystems should be treated with special care. Boot-Communication-3 Ethernet Disabled Boot-Communication-4 U-boot and sboot DOCSIS Disabled Boot-Communication-5 Serial ports Disabled Domain Config name State Boot-Communication-USB-1 CONFIG_CMD_USB Not defined Boot-Communication-USB-2 CONFIG_USB_UHCI Not defined Boot-Communication-USB-3 CONFIG_USB_KEYBOARD Not defined Boot-Communication-USB-4 CONFIG_USB_STORAGE Not defined Boot-Communication-USB-5 CONFIG_USB_HOST_ETHER Not defined","title":"Disable USB, Serial and DOCSIS Support"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.2_Communication-modes/#disable-all-unused-network-interfaces","text":"Only used network interfaces should be enabled. Where possible, services should also be limited to those necessary. Domain Communication modes State Boot-Communication-1 Network interfaces Preferably no network interface is allowed , otherwise, restrict the services to those used.","title":"Disable all unused Network Interfaces"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.2_Communication-modes/#remove-or-disable-unnecessary-services-ports-and-devices","text":"Restrict the services , ports and devices to those used. Domain Object Recommendations Boot-Communication-1 Services , ports and devices Restrict the services , ports and devices to those used.","title":"Remove or Disable Unnecessary Services, Ports, and Devices"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.2_Communication-modes/#disable-flash-access","text":"Recommendation : In U-Boot following flash memory commands shall be disabled: NAND : Support for nand flash access available through do_nand has to be disabled. Domain Command name State Boot-Communication-Flash-1 do_nand Disable Similarly sboot should disable flash access support through command line if any.","title":"Disable flash access"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.3_Consoles/","text":"Consoles Disable serial console Serial console output shall be disabled. To disable console output in U-Boot, set the following macros: Domain Config name Value Boot-Consoles-Serial-1 CONFIG_SILENT_CONSOLE Disable Boot-Consoles-Serial-2 CONFIG_SYS_DEVICE_NULLDEV Disable Boot-Consoles-Serial-3 CONFIG_SILENT_CONSOLE_UPDATE_ON_RELOC Disable Domain Improvement Boot-Consoles-1 Secure loader: No reference earlier? And set \" silent \" environment variable. For the Secure loader, disable the traces by not defining the below macro: Domain Environment variable name State Boot-Consoles-Serial-1 INC_DEBUG_PRINT Not defined For sboot proper configuration needs to be done to disable the serial console. Immutable environment variables In U-Boot, ensure Kernel command line, boot commands, boot delay and other environment variables are immutable. This will prevent side-loading of alternate images, by restricting the boot selection to only the image in FLASH. The environment variables shall be part of the text region in U-Boot as default environment variable and not in non-volatile memory. Remove configuration options related to non-volatile memory, such as: Domain Config name State Boot-Consoles-Variables-1 CONFIG_ENV_IS_IN_MMC #undef Boot-Consoles-Variables-2 CONFIG_ENV_IS_IN_EEPROM #undef Boot-Consoles-Variables-3 CONFIG_ENV_IS_IN_FLASH #undef Boot-Consoles-Variables-4 CONFIG_ENV_IS_IN_DATAFLASH #undef Boot-Consoles-Variables-5 CONFIG_ENV_IS_IN_FAT #undef Boot-Consoles-Variables-6 CONFIG_ENV_IS_IN_NAND #undef Boot-Consoles-Variables-7 CONFIG_ENV_IS_IN_NVRAM #undef Boot-Consoles-Variables-8 CONFIG_ENV_IS_IN_ONENAND #undef Boot-Consoles-Variables-9 CONFIG_ENV_IS_IN_SPI_FLASH #undef Boot-Consoles-Variables-10 CONFIG_ENV_IS_IN_REMOTE #undef Boot-Consoles-Variables-11 CONFIG_ENV_IS_IN_UBI #undef Boot-Consoles-Variables-12 CONFIG_ENV_IS_NOWHERE #define (Recommendation) Removal of memory dump commands In U-Boot, following commands shall be disabled to avoid memory dumps: md : Memory Display command. mm : Memory modify command - auto incrementing address. nm : Memory modify command - constant address. mw : Memory write. cp : Memory copy. mwc : Memory write cyclic. mdc : Memory display cyclic. mtest : Simple ram read/write test. loopw : Infinite write loop on address range. Domain Command name State Boot-Consoles-MemDump-1 md Disabled Boot-Consoles-MemDump-2 mm Disabled Boot-Consoles-MemDump-3 nm Disabled Boot-Consoles-MemDump-4 mw Disabled Boot-Consoles-MemDump-5 cp Disabled Boot-Consoles-MemDump-6 mwc Disabled Boot-Consoles-MemDump-7 mdc Disabled Boot-Consoles-MemDump-8 mtest Disabled Boot-Consoles-MemDump-9 loopw Disabled Similarly, memory dump support shall be disabled from sboot.","title":"Consoles"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.3_Consoles/#consoles","text":"","title":"Consoles"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.3_Consoles/#disable-serial-console","text":"Serial console output shall be disabled. To disable console output in U-Boot, set the following macros: Domain Config name Value Boot-Consoles-Serial-1 CONFIG_SILENT_CONSOLE Disable Boot-Consoles-Serial-2 CONFIG_SYS_DEVICE_NULLDEV Disable Boot-Consoles-Serial-3 CONFIG_SILENT_CONSOLE_UPDATE_ON_RELOC Disable Domain Improvement Boot-Consoles-1 Secure loader: No reference earlier? And set \" silent \" environment variable. For the Secure loader, disable the traces by not defining the below macro: Domain Environment variable name State Boot-Consoles-Serial-1 INC_DEBUG_PRINT Not defined For sboot proper configuration needs to be done to disable the serial console.","title":"Disable serial console"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.3_Consoles/#immutable-environment-variables","text":"In U-Boot, ensure Kernel command line, boot commands, boot delay and other environment variables are immutable. This will prevent side-loading of alternate images, by restricting the boot selection to only the image in FLASH. The environment variables shall be part of the text region in U-Boot as default environment variable and not in non-volatile memory. Remove configuration options related to non-volatile memory, such as: Domain Config name State Boot-Consoles-Variables-1 CONFIG_ENV_IS_IN_MMC #undef Boot-Consoles-Variables-2 CONFIG_ENV_IS_IN_EEPROM #undef Boot-Consoles-Variables-3 CONFIG_ENV_IS_IN_FLASH #undef Boot-Consoles-Variables-4 CONFIG_ENV_IS_IN_DATAFLASH #undef Boot-Consoles-Variables-5 CONFIG_ENV_IS_IN_FAT #undef Boot-Consoles-Variables-6 CONFIG_ENV_IS_IN_NAND #undef Boot-Consoles-Variables-7 CONFIG_ENV_IS_IN_NVRAM #undef Boot-Consoles-Variables-8 CONFIG_ENV_IS_IN_ONENAND #undef Boot-Consoles-Variables-9 CONFIG_ENV_IS_IN_SPI_FLASH #undef Boot-Consoles-Variables-10 CONFIG_ENV_IS_IN_REMOTE #undef Boot-Consoles-Variables-11 CONFIG_ENV_IS_IN_UBI #undef Boot-Consoles-Variables-12 CONFIG_ENV_IS_NOWHERE #define","title":"Immutable environment variables"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/2_Secure_Boot/1.2.2.3_Consoles/#recommendation-removal-of-memory-dump-commands","text":"In U-Boot, following commands shall be disabled to avoid memory dumps: md : Memory Display command. mm : Memory modify command - auto incrementing address. nm : Memory modify command - constant address. mw : Memory write. cp : Memory copy. mwc : Memory write cyclic. mdc : Memory display cyclic. mtest : Simple ram read/write test. loopw : Infinite write loop on address range. Domain Command name State Boot-Consoles-MemDump-1 md Disabled Boot-Consoles-MemDump-2 mm Disabled Boot-Consoles-MemDump-3 nm Disabled Boot-Consoles-MemDump-4 mw Disabled Boot-Consoles-MemDump-5 cp Disabled Boot-Consoles-MemDump-6 mwc Disabled Boot-Consoles-MemDump-7 mdc Disabled Boot-Consoles-MemDump-8 mtest Disabled Boot-Consoles-MemDump-9 loopw Disabled Similarly, memory dump support shall be disabled from sboot.","title":"(Recommendation) Removal of memory dump commands"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/3_Hypervisor/Abstract/","text":"Part 3 - Hypervisor Definition: \"A hypervisor or virtual machine monitor (VMM) is computer software, firmware or hardware that creates and runs virtual machines\". It must include a signature verification (possibly delegated). Domain Improvement Hypervisor-Abstract-1 Complete Hypervisor part ( jailhouse / KVM / Xen ). Native or Bare-metal hypervisors These hypervisors run directly on the host's hardware to control the hardware and to manage guest operating systems. Those are the ones we're interested in.","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/3_Hypervisor/Abstract/#part-3-hypervisor","text":"Definition: \"A hypervisor or virtual machine monitor (VMM) is computer software, firmware or hardware that creates and runs virtual machines\". It must include a signature verification (possibly delegated). Domain Improvement Hypervisor-Abstract-1 Complete Hypervisor part ( jailhouse / KVM / Xen ).","title":"Part 3 - Hypervisor"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/3_Hypervisor/Abstract/#native-or-bare-metal-hypervisors","text":"These hypervisors run directly on the host's hardware to control the hardware and to manage guest operating systems. Those are the ones we're interested in.","title":"Native or Bare-metal hypervisors"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.0_Abstract/","text":"Part 4 - Kernel Abstract System Hardening: Best practices associated with the configuration of an embedded Linux based operating system. This section includes both hardening of the kernel itself, as well as specific configurations and patches used to protect against known vulnerabilities within the build and configuration of the root filesystem. At the Kernel level, we must ensure that no console can be launched. It could be used to change the behavior of the system or to have more information about it. Another aspect is the protection of the memory used by the Kernel. The next sub-sections contain information on various kernel configuration options to enhance the security in the kernel (3.10.17) and also for applications compiled to take advantage of these security features. Additionally, there are also configuration options that protect from known vulnerable configuration options. Here's a high level summary of various kernel configurations that shall be required for deployment. Kernel Version The choice of kernel version for the AGL system is essential to its security. Depending on the type of board and eventual production system, different kernel versions are used. For example, one of the systems under study uses the Linux kernel version 3.10, while another uses the Linux kernel version 4.4. For the Linux kernel version 3.10.31, there are 25 known vulnerabilities. These vulnerabilities would allow an attacker to gain privileges, bypass access restrictions, allow memory to be corrupted, or cause denial of service. In contrast, the Linux kernel version of 4.4 has many fewer known vulnerabilities. For this reason, we would in general recommend the later kernel version as a basis for the platform. Note that, although there are fewer known vulnerabilities in the most recent kernel versions there may be many unknown vulnerabilities underlying. A rule of thumb is to update the kernel as much as possible to avoid the problems you do know, but you should not be complacent in the trust that you place in it. A defense-in-depth approach would then apply. If there are constraints and dependencies in upgrading to a newer kernel version (e.g. device drivers, board support providers) and you are forced to an older Linux kernel version, there need to be additional provisions made to reduce the risk of kernel exploits, which can include memory monitoring, watch-dog services, and system call hooking. In this case, further defense-in-depth techniques may be required to mitigate the risk of attacks to known vulnerabilities, which can also include runtime integrity verification of components that are vulnerable to tampering. Kernel Build Configuration The kernel build configuration is extremely important for determining the level of access to services and to reduce the breadth of the attack surface. Linux contains a great and flexible number of capabilities and this is only controlled through the build configuration. For example, the CONFIG_MODULES parameter allows kernel modules to be loaded at runtime extending the capabilities of the kernel. This capability needs to be either inhibited or controlled at runtime through other configuration parameters. For example, CONFIG_MODULE_SIG_FORCE=y ensures that only signed modules are loaded. There is a very large number of kernel configuration parameters, and these are discussed in detail in this section.","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.0_Abstract/#part-4-kernel","text":"","title":"Part 4 - Kernel"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.0_Abstract/#abstract","text":"System Hardening: Best practices associated with the configuration of an embedded Linux based operating system. This section includes both hardening of the kernel itself, as well as specific configurations and patches used to protect against known vulnerabilities within the build and configuration of the root filesystem. At the Kernel level, we must ensure that no console can be launched. It could be used to change the behavior of the system or to have more information about it. Another aspect is the protection of the memory used by the Kernel. The next sub-sections contain information on various kernel configuration options to enhance the security in the kernel (3.10.17) and also for applications compiled to take advantage of these security features. Additionally, there are also configuration options that protect from known vulnerable configuration options. Here's a high level summary of various kernel configurations that shall be required for deployment.","title":"Abstract"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.0_Abstract/#kernel-version","text":"The choice of kernel version for the AGL system is essential to its security. Depending on the type of board and eventual production system, different kernel versions are used. For example, one of the systems under study uses the Linux kernel version 3.10, while another uses the Linux kernel version 4.4. For the Linux kernel version 3.10.31, there are 25 known vulnerabilities. These vulnerabilities would allow an attacker to gain privileges, bypass access restrictions, allow memory to be corrupted, or cause denial of service. In contrast, the Linux kernel version of 4.4 has many fewer known vulnerabilities. For this reason, we would in general recommend the later kernel version as a basis for the platform. Note that, although there are fewer known vulnerabilities in the most recent kernel versions there may be many unknown vulnerabilities underlying. A rule of thumb is to update the kernel as much as possible to avoid the problems you do know, but you should not be complacent in the trust that you place in it. A defense-in-depth approach would then apply. If there are constraints and dependencies in upgrading to a newer kernel version (e.g. device drivers, board support providers) and you are forced to an older Linux kernel version, there need to be additional provisions made to reduce the risk of kernel exploits, which can include memory monitoring, watch-dog services, and system call hooking. In this case, further defense-in-depth techniques may be required to mitigate the risk of attacks to known vulnerabilities, which can also include runtime integrity verification of components that are vulnerable to tampering.","title":"Kernel Version"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.0_Abstract/#kernel-build-configuration","text":"The kernel build configuration is extremely important for determining the level of access to services and to reduce the breadth of the attack surface. Linux contains a great and flexible number of capabilities and this is only controlled through the build configuration. For example, the CONFIG_MODULES parameter allows kernel modules to be loaded at runtime extending the capabilities of the kernel. This capability needs to be either inhibited or controlled at runtime through other configuration parameters. For example, CONFIG_MODULE_SIG_FORCE=y ensures that only signed modules are loaded. There is a very large number of kernel configuration parameters, and these are discussed in detail in this section.","title":"Kernel Build Configuration"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/","text":"General configuration Mandatory Access Control Kernel should controls access with labels and policy. Domain Config name Value Kernel-General-MAC-1 CONFIG_IP_NF_SECURITY m Kernel-General-MAC-2 CONFIG_IP6_NF_SECURITY m Kernel-General-MAC-3 CONFIG_EXT2_FS_SECURITY y Kernel-General-MAC-4 CONFIG_EXT3_FS_SECURITY y Kernel-General-MAC-5 CONFIG_EXT4_FS_SECURITY y Kernel-General-MAC-6 CONFIG_SECURITY y Kernel-General-MAC-7 CONFIG_SECURITY_SMACK y Kernel-General-MAC-8 CONFIG_TMPFS_XATTR y Please also refer to the Mandatory Access Control documentation in Platform part. You can also find useful documentation and links on wikipedia about MAC and about SMACK . Disable kexec Kexec is a system call that enables you to load and boot into another kernel from the currently running kernel. This feature is not required in a production environment. Domain Config name Value Kernel-General-kexec-1 CONFIG_KEXEC n kexec can load arbitrary kernels but signing of new kernel can be enforced like it is can be enforced for new modules. Disable kernel IP auto-configuration It is preferable to have an IP configuration performed using a user-space tool as these tend to have more validation. We do not want the network interface coming up until the system has come up properly. Domain Config name Value Kernel-General-IPAutoConf-1 CONFIG_IP_PNP n Disable Sysctl syscall support Enabling this will result in code being included that is hard to maintain and not well tested. Domain Config name Value Kernel-General-SysCtl_SysCall-1 CONFIG_SYSCTL_SYSCALL n Disable Legacy Linux Support There are some Kernel Configs which are present only to support legacy binaries. See also \"Consoles\" part in order to disabling support for legacy binary formats. The uselib system call, in particular, has no valid use in any libc6 or uclibc system in recent times. This configuration is supported in Linux 3.15 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-General-LegacyLinux-1 CONFIG_USELIB n Disable firmware auto-loading user mode helper The firmware auto loading helper, which is a utility executed by the kernel on hotplug events requiring firmware, can to be set setuid . As a result of this, the helper utility is an attractive target for attackers with control of physical ports on the device. Disabling this configuration that is supported in Linux 3.9 and greater . Domain Config name Value Kernel-General-FirmHelper-1 CONFIG_FW_LOADER_USER_HELPER n It doesn't strictly need to be setuid , there is an option of shipping firmware builtin into kernel without initrd/filesystem. Enable Kernel Panic on OOPS When fuzzing the kernel or attempting kernel exploits attackers are likely to trigger kernel OOPSes. Setting the behavior on OOPS to PANIC can impede their progress. This configuration is supported in Linux 3.5 and greater and thus should only be enabled for such versions. Domain Config name Value Kernel-General-PanicOnOOPS-1 CONFIG_PANIC_ON_OOPS y Disable socket monitoring interface These monitors can be used to inspect shared file descriptors on Unix Domain sockets or traffic on 'localhost' which is otherwise assumed to be confidential. The CONFIG_PACKET_DIAG configuration is supported in Linux 3.7 and greater and thus should only be disabled for such versions. The CONFIG_UNIX_DIAG configuration is supported in Linux 3.3 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-General-SocketMon-1 CONFIG_PACKET_DIAG n Kernel-General-SocketMon-2 CONFIG_UNIX_DIAG n Disable BPF JIT The BPF JIT can be used to create kernel-payloads from firewall table rules. This configuration for is supported in Linux 3.16 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-General-BPF_JIT-1 CONFIG_BPF_JIT n Enable Enforced Module Signing The kernel should never allow an unprivileged user the ability to load specific kernel modules, since that would provide a facility to unexpectedly extend the available attack surface. To protect against even privileged users, systems may need to either disable module loading entirely, or provide signed modules (e.g. CONFIG_MODULE_SIG_FORCE , or dm-crypt with LoadPin), to keep from having root load arbitrary kernel code via the module loader interface. This configuration is supported in Linux 3.7 and greater and thus should only be enabled for such versions. Domain Config name Value Kernel-General-ModuleSigning-1 CONFIG_MODULE_SIG_FORCE y It is also possible to block the loading of modules after startup with \"kernel.modules_disabled\". Domain Variable name Value Kernel-General-ModuleSigning-2 kernel.modules_disabled 1 Disable all USB, PCMCIA (and other hotplug bus) drivers that aren't needed To reduce the attack surface, the driver enumeration, probe, and operation happen in the kernel. The driver data is parsed by the kernel, so any logic bugs in these drivers can become kernel exploits. Domain Object State Kernel-General-Drivers-1 USB Disabled Kernel-General-Drivers-2 PCMCIA Disabled Kernel-General-Drivers-3 Other hotplug bus Disabled Position Independent Executables Domain Improvement Kernel-General-IndependentExec-1 Kernel or/and platform part ? Domain compiler and linker options State Kernel-General-IndependentExec-1 -pie -fpic Enable Produce a position independent executable on targets which supports it. Prevent Overwrite Attacks -z,relro linking option helps during program load, several ELF memory sections need to be written by the linker, but can be turned read-only before turning over control to the program. This prevents some Global Offset Table GOT overwrite attacks, or in the dtors section of the ELF binary. Domain compiler and linker options State Kernel-General-OverwriteAttacks-1 -z,relro Enable Kernel-General-OverwriteAttacks-2 -z,now Enable During program load, all dynamic symbols are resolved, allowing for the complete GOT to be marked read-only (due to -z relro above). This prevents GOT overwrite attacks. For very large application, this can incur some performance loss during initial load while symbols are resolved, but this shouldn't be an issue for daemons. Library linking Domain Improvement Kernel-General-LibraryLinking-1 Keep this part? It is recommended that dynamic linking should generally not be allowed. This will avoid the user from replacing a library with malicious library. Domain Object Recommendations Kernel-General-LibraryLinking-1 Dynamic linking Should generally not be allowed. Linking everything statically doesn't change anything wrt security as binaries will live under same user:group as libraries and setuid executables ignore LD_PRELOAD/LD_LIBRARY_PATH . It also increases RSS footprint and creates problems with upgrading.","title":"General"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#general-configuration","text":"","title":"General configuration"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#mandatory-access-control","text":"Kernel should controls access with labels and policy. Domain Config name Value Kernel-General-MAC-1 CONFIG_IP_NF_SECURITY m Kernel-General-MAC-2 CONFIG_IP6_NF_SECURITY m Kernel-General-MAC-3 CONFIG_EXT2_FS_SECURITY y Kernel-General-MAC-4 CONFIG_EXT3_FS_SECURITY y Kernel-General-MAC-5 CONFIG_EXT4_FS_SECURITY y Kernel-General-MAC-6 CONFIG_SECURITY y Kernel-General-MAC-7 CONFIG_SECURITY_SMACK y Kernel-General-MAC-8 CONFIG_TMPFS_XATTR y Please also refer to the Mandatory Access Control documentation in Platform part. You can also find useful documentation and links on wikipedia about MAC and about SMACK .","title":"Mandatory Access Control"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#disable-kexec","text":"Kexec is a system call that enables you to load and boot into another kernel from the currently running kernel. This feature is not required in a production environment. Domain Config name Value Kernel-General-kexec-1 CONFIG_KEXEC n kexec can load arbitrary kernels but signing of new kernel can be enforced like it is can be enforced for new modules.","title":"Disable kexec"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#disable-kernel-ip-auto-configuration","text":"It is preferable to have an IP configuration performed using a user-space tool as these tend to have more validation. We do not want the network interface coming up until the system has come up properly. Domain Config name Value Kernel-General-IPAutoConf-1 CONFIG_IP_PNP n","title":"Disable kernel IP auto-configuration"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#disable-sysctl-syscall-support","text":"Enabling this will result in code being included that is hard to maintain and not well tested. Domain Config name Value Kernel-General-SysCtl_SysCall-1 CONFIG_SYSCTL_SYSCALL n","title":"Disable Sysctl syscall support"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#disable-legacy-linux-support","text":"There are some Kernel Configs which are present only to support legacy binaries. See also \"Consoles\" part in order to disabling support for legacy binary formats. The uselib system call, in particular, has no valid use in any libc6 or uclibc system in recent times. This configuration is supported in Linux 3.15 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-General-LegacyLinux-1 CONFIG_USELIB n","title":"Disable Legacy Linux Support"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#disable-firmware-auto-loading-user-mode-helper","text":"The firmware auto loading helper, which is a utility executed by the kernel on hotplug events requiring firmware, can to be set setuid . As a result of this, the helper utility is an attractive target for attackers with control of physical ports on the device. Disabling this configuration that is supported in Linux 3.9 and greater . Domain Config name Value Kernel-General-FirmHelper-1 CONFIG_FW_LOADER_USER_HELPER n It doesn't strictly need to be setuid , there is an option of shipping firmware builtin into kernel without initrd/filesystem.","title":"Disable firmware auto-loading user mode helper"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#enable-kernel-panic-on-oops","text":"When fuzzing the kernel or attempting kernel exploits attackers are likely to trigger kernel OOPSes. Setting the behavior on OOPS to PANIC can impede their progress. This configuration is supported in Linux 3.5 and greater and thus should only be enabled for such versions. Domain Config name Value Kernel-General-PanicOnOOPS-1 CONFIG_PANIC_ON_OOPS y","title":"Enable Kernel Panic on OOPS"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#disable-socket-monitoring-interface","text":"These monitors can be used to inspect shared file descriptors on Unix Domain sockets or traffic on 'localhost' which is otherwise assumed to be confidential. The CONFIG_PACKET_DIAG configuration is supported in Linux 3.7 and greater and thus should only be disabled for such versions. The CONFIG_UNIX_DIAG configuration is supported in Linux 3.3 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-General-SocketMon-1 CONFIG_PACKET_DIAG n Kernel-General-SocketMon-2 CONFIG_UNIX_DIAG n","title":"Disable socket monitoring interface"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#disable-bpf-jit","text":"The BPF JIT can be used to create kernel-payloads from firewall table rules. This configuration for is supported in Linux 3.16 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-General-BPF_JIT-1 CONFIG_BPF_JIT n","title":"Disable BPF JIT"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#enable-enforced-module-signing","text":"The kernel should never allow an unprivileged user the ability to load specific kernel modules, since that would provide a facility to unexpectedly extend the available attack surface. To protect against even privileged users, systems may need to either disable module loading entirely, or provide signed modules (e.g. CONFIG_MODULE_SIG_FORCE , or dm-crypt with LoadPin), to keep from having root load arbitrary kernel code via the module loader interface. This configuration is supported in Linux 3.7 and greater and thus should only be enabled for such versions. Domain Config name Value Kernel-General-ModuleSigning-1 CONFIG_MODULE_SIG_FORCE y It is also possible to block the loading of modules after startup with \"kernel.modules_disabled\". Domain Variable name Value Kernel-General-ModuleSigning-2 kernel.modules_disabled 1","title":"Enable Enforced Module Signing"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#disable-all-usb-pcmcia-and-other-hotplug-bus-drivers-that-arent-needed","text":"To reduce the attack surface, the driver enumeration, probe, and operation happen in the kernel. The driver data is parsed by the kernel, so any logic bugs in these drivers can become kernel exploits. Domain Object State Kernel-General-Drivers-1 USB Disabled Kernel-General-Drivers-2 PCMCIA Disabled Kernel-General-Drivers-3 Other hotplug bus Disabled","title":"Disable all USB, PCMCIA (and other hotplug bus) drivers that aren't needed"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#position-independent-executables","text":"Domain Improvement Kernel-General-IndependentExec-1 Kernel or/and platform part ? Domain compiler and linker options State Kernel-General-IndependentExec-1 -pie -fpic Enable Produce a position independent executable on targets which supports it.","title":"Position Independent Executables"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#prevent-overwrite-attacks","text":"-z,relro linking option helps during program load, several ELF memory sections need to be written by the linker, but can be turned read-only before turning over control to the program. This prevents some Global Offset Table GOT overwrite attacks, or in the dtors section of the ELF binary. Domain compiler and linker options State Kernel-General-OverwriteAttacks-1 -z,relro Enable Kernel-General-OverwriteAttacks-2 -z,now Enable During program load, all dynamic symbols are resolved, allowing for the complete GOT to be marked read-only (due to -z relro above). This prevents GOT overwrite attacks. For very large application, this can incur some performance loss during initial load while symbols are resolved, but this shouldn't be an issue for daemons.","title":"Prevent Overwrite Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.1_General/#library-linking","text":"Domain Improvement Kernel-General-LibraryLinking-1 Keep this part? It is recommended that dynamic linking should generally not be allowed. This will avoid the user from replacing a library with malicious library. Domain Object Recommendations Kernel-General-LibraryLinking-1 Dynamic linking Should generally not be allowed. Linking everything statically doesn't change anything wrt security as binaries will live under same user:group as libraries and setuid executables ignore LD_PRELOAD/LD_LIBRARY_PATH . It also increases RSS footprint and creates problems with upgrading.","title":"Library linking"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/","text":"Memory Restrict access to kernel memory The /dev/kmem file in Linux systems is directly mapped to kernel virtual memory. This can be disastrous if an attacker gains root access, as the attacker would have direct access to kernel virtual memory. To disable the /dev/kmem file, which is very infrequently used by applications, the following kernel option should be set in the compile-time kernel configuration: Domain Config name Value Kernel-Memory-RestrictAccess-1 CONFIG_DEVKMEM n In case applications in userspace need /dev/kmem support, it should be available only for authenticated applications. Disable access to a kernel core dump This kernel configuration disables access to a kernel core dump from user space. If enabled, it gives attackers a useful view into kernel memory. Domain Config name Value Kernel-Memory-CoreDump-1 CONFIG_PROC_KCORE n Disable swap If not disabled, attackers can enable swap at runtime, add pressure to the memory subsystem and then scour the pages written to swap for useful information. Domain Config name Value Kernel-Memory-Swap-1 CONFIG_SWAP n Enabling swap at runtime require CAP_SYS_ADMIN . Swap block device is usually under root:disk. Linux never swaps kernel pages. If swap disabling is not possible, swap encryption should be enabled. Disable \"Load All Symbols\" There is a /proc/kallsyms file which exposes the kernel memory space address of many kernel symbols (functions, variables, etc...). This information is useful to attackers in identifying kernel versions/configurations and in preparing payloads for the exploits of kernel space. Both KALLSYMS_ALL and KALLSYMS shall be disabled; Domain Config name Value Kernel-Memory-LoadAllSymbols-1 CONFIG_KALLSYMS n Kernel-Memory-LoadAllSymbols-2 CONFIG_KALLSYMS_ALL n Stack protection To prevent stack-smashing, similar to the stack protector used for ELF programs in user-space, the kernel can protect its internal stacks as well. This configuration is supported in Linux 3.11 and greater and thus should only be enabled for such versions. This configuration also requires building the kernel with the gcc compiler 4.2 or greater . Domain Config name Value Kernel-Memory-Stack-1 CONFIG_CC_STACKPROTECTOR y Other defenses include things like shadow stacks. Disable access to /dev/mem The /dev/mem file in Linux systems is directly mapped to physical memory. This can be disastrous if an attacker gains root access, as the attacker would have direct access to physical memory through this convenient device file. It may not always be possible to disable such file, as some applications might need such support. In that case, then this device file should be available only for authenticated applications. This configuration is supported in Linux 4.0 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-Memory-Access-1 CONFIG_DEVMEM n Disable cross-memory attach Disable the process_vm_*v syscalls which allow one process to peek/poke the virtual memory of another. This configuration is supported in Linux 3.5 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-Memory-CrossMemAttach-1 CROSS_MEMORY_ATTACH n Stack Smashing Attacks Domain compiler and linker options State Kernel-Memory-StackSmashing-1 -fstack-protector-all Enable Emit extra code to check for buffer overflows, such as stack smashing attacks. Detect Buffer Overflows Domain compiler options and config name Value Kernel-Memory-BufferOverflows-1 -D_FORTIFY_SOURCE 2 Kernel-Memory-BufferOverflows-2 CONFIG_FORTIFY_SOURCE y Helps detect some buffer overflow errors.","title":"Memory"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#memory","text":"","title":"Memory"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#restrict-access-to-kernel-memory","text":"The /dev/kmem file in Linux systems is directly mapped to kernel virtual memory. This can be disastrous if an attacker gains root access, as the attacker would have direct access to kernel virtual memory. To disable the /dev/kmem file, which is very infrequently used by applications, the following kernel option should be set in the compile-time kernel configuration: Domain Config name Value Kernel-Memory-RestrictAccess-1 CONFIG_DEVKMEM n In case applications in userspace need /dev/kmem support, it should be available only for authenticated applications.","title":"Restrict access to kernel memory"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#disable-access-to-a-kernel-core-dump","text":"This kernel configuration disables access to a kernel core dump from user space. If enabled, it gives attackers a useful view into kernel memory. Domain Config name Value Kernel-Memory-CoreDump-1 CONFIG_PROC_KCORE n","title":"Disable access to a kernel core dump"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#disable-swap","text":"If not disabled, attackers can enable swap at runtime, add pressure to the memory subsystem and then scour the pages written to swap for useful information. Domain Config name Value Kernel-Memory-Swap-1 CONFIG_SWAP n Enabling swap at runtime require CAP_SYS_ADMIN . Swap block device is usually under root:disk. Linux never swaps kernel pages. If swap disabling is not possible, swap encryption should be enabled.","title":"Disable swap"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#disable-load-all-symbols","text":"There is a /proc/kallsyms file which exposes the kernel memory space address of many kernel symbols (functions, variables, etc...). This information is useful to attackers in identifying kernel versions/configurations and in preparing payloads for the exploits of kernel space. Both KALLSYMS_ALL and KALLSYMS shall be disabled; Domain Config name Value Kernel-Memory-LoadAllSymbols-1 CONFIG_KALLSYMS n Kernel-Memory-LoadAllSymbols-2 CONFIG_KALLSYMS_ALL n","title":"Disable \"Load All Symbols\""},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#stack-protection","text":"To prevent stack-smashing, similar to the stack protector used for ELF programs in user-space, the kernel can protect its internal stacks as well. This configuration is supported in Linux 3.11 and greater and thus should only be enabled for such versions. This configuration also requires building the kernel with the gcc compiler 4.2 or greater . Domain Config name Value Kernel-Memory-Stack-1 CONFIG_CC_STACKPROTECTOR y Other defenses include things like shadow stacks.","title":"Stack protection"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#disable-access-to-devmem","text":"The /dev/mem file in Linux systems is directly mapped to physical memory. This can be disastrous if an attacker gains root access, as the attacker would have direct access to physical memory through this convenient device file. It may not always be possible to disable such file, as some applications might need such support. In that case, then this device file should be available only for authenticated applications. This configuration is supported in Linux 4.0 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-Memory-Access-1 CONFIG_DEVMEM n","title":"Disable access to /dev/mem"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#disable-cross-memory-attach","text":"Disable the process_vm_*v syscalls which allow one process to peek/poke the virtual memory of another. This configuration is supported in Linux 3.5 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-Memory-CrossMemAttach-1 CROSS_MEMORY_ATTACH n","title":"Disable cross-memory attach"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#stack-smashing-attacks","text":"Domain compiler and linker options State Kernel-Memory-StackSmashing-1 -fstack-protector-all Enable Emit extra code to check for buffer overflows, such as stack smashing attacks.","title":"Stack Smashing Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.2_Memory/#detect-buffer-overflows","text":"Domain compiler options and config name Value Kernel-Memory-BufferOverflows-1 -D_FORTIFY_SOURCE 2 Kernel-Memory-BufferOverflows-2 CONFIG_FORTIFY_SOURCE y Helps detect some buffer overflow errors.","title":"Detect Buffer Overflows"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.3_Consoles/","text":"Serial Disable serial console The serial console should be disabled to prevent an attacker from accessing this powerful interface. Domain Config name Value Kernel-Consoles-Serial-1 CONFIG_SERIAL_8250 n Kernel-Consoles-Serial-2 CONFIG_SERIAL_8250_CONSOLE n Kernel-Consoles-Serial-3 CONFIG_SERIAL_CORE n Kernel-Consoles-Serial-4 CONFIG_SERIAL_CORE_CONSOLE n Bake-in the kernel command-line The kernel command-line is used to control many aspects of the booting kernel, and is prone to tampering as they are passed in RAM with little to no reverse validation on these parameters. To prevent this type of attack, the kernel shall be configured to ignore commands line arguments, and use pre-configured (compile time) options instead. Set the kernel command line in the CONFIG_CMDLINE KConfig item and then pass no arguments from the bootloader. Domain Config name Value Kernel-Consoles-CommandLine-1 CONFIG_CMDLINE_BOOL y Kernel-Consoles-CommandLine-2 CONFIG_CMDLINE \"insert kernel command line here\" Kernel-Consoles-CommandLine-3 CONFIG_CMDLINE_OVERRIDE y It is recommended that any per-device settings (e.g: MAC addresses, serial numbers, etc.) be stored and accessed from read-only memory (or files), and that any such parameters be verified (signature checking) prior to their use. Disable KGDB The Linux kernel supports KGDB over USB and console ports. These mechanisms are controlled by the kgdbdbgp and kgdboc kernel command-line parameters. It is important to ensure that no shipping product contains a kernel with KGDB compiled-in. Domain Config name Value Kernel-Consoles-KDBG-1 CONFIG_KGDB n Disable magic sysrq support On a few architectures, you can access a powerful debugger interface from the keyboard. The same powerful interface can be present on the serial console (responding to serial break) of Linux on other architectures. Disable to avoid potentially exposing this powerful backdoor. Domain Config name Value Kernel-Consoles-SysRQ-1 CONFIG_MAGIC_SYSRQ n Disable support for binary formats other than ELF This will make possible to plug wrapper-driven binary formats into the kernel. It enables support for binary formats other than ELF. Providing the ability to use alternate interpreters would assist an attacker in discovering attack vectors. Domain Config name Value Kernel-Consoles-BinaryFormat-1 CONFIG_BINFMT_MISC n","title":"Consoles"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.3_Consoles/#serial","text":"","title":"Serial"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.3_Consoles/#disable-serial-console","text":"The serial console should be disabled to prevent an attacker from accessing this powerful interface. Domain Config name Value Kernel-Consoles-Serial-1 CONFIG_SERIAL_8250 n Kernel-Consoles-Serial-2 CONFIG_SERIAL_8250_CONSOLE n Kernel-Consoles-Serial-3 CONFIG_SERIAL_CORE n Kernel-Consoles-Serial-4 CONFIG_SERIAL_CORE_CONSOLE n","title":"Disable serial console"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.3_Consoles/#bake-in-the-kernel-command-line","text":"The kernel command-line is used to control many aspects of the booting kernel, and is prone to tampering as they are passed in RAM with little to no reverse validation on these parameters. To prevent this type of attack, the kernel shall be configured to ignore commands line arguments, and use pre-configured (compile time) options instead. Set the kernel command line in the CONFIG_CMDLINE KConfig item and then pass no arguments from the bootloader. Domain Config name Value Kernel-Consoles-CommandLine-1 CONFIG_CMDLINE_BOOL y Kernel-Consoles-CommandLine-2 CONFIG_CMDLINE \"insert kernel command line here\" Kernel-Consoles-CommandLine-3 CONFIG_CMDLINE_OVERRIDE y It is recommended that any per-device settings (e.g: MAC addresses, serial numbers, etc.) be stored and accessed from read-only memory (or files), and that any such parameters be verified (signature checking) prior to their use.","title":"Bake-in the kernel command-line"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.3_Consoles/#disable-kgdb","text":"The Linux kernel supports KGDB over USB and console ports. These mechanisms are controlled by the kgdbdbgp and kgdboc kernel command-line parameters. It is important to ensure that no shipping product contains a kernel with KGDB compiled-in. Domain Config name Value Kernel-Consoles-KDBG-1 CONFIG_KGDB n","title":"Disable KGDB"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.3_Consoles/#disable-magic-sysrq-support","text":"On a few architectures, you can access a powerful debugger interface from the keyboard. The same powerful interface can be present on the serial console (responding to serial break) of Linux on other architectures. Disable to avoid potentially exposing this powerful backdoor. Domain Config name Value Kernel-Consoles-SysRQ-1 CONFIG_MAGIC_SYSRQ n","title":"Disable magic sysrq support"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.3_Consoles/#disable-support-for-binary-formats-other-than-elf","text":"This will make possible to plug wrapper-driven binary formats into the kernel. It enables support for binary formats other than ELF. Providing the ability to use alternate interpreters would assist an attacker in discovering attack vectors. Domain Config name Value Kernel-Consoles-BinaryFormat-1 CONFIG_BINFMT_MISC n","title":"Disable support for binary formats other than ELF"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/","text":"Debug No debuggers shall be present on the file system. This includes, but is not limited to, the GNU Debugger client/server (commonly known in their short form names such as the gdb and gdbserver executable binaries respectively), the LLDB next generation debugger or the TCF (Target Communications Framework) agnostic framework. Including these binaries as part of the file system will facilitate an attacker's ability to reverse engineer and debug (either locally or remotely) any process that is currently executing on the device. Kernel debug symbols Debug symbols should always be removed from production kernels as they provide a lot of information to attackers. Domain Config name Value Kernel-Debug-Symbols-1 CONFIG_DEBUG_INFO n These kernel debug symbols are enabled by other config items in the kernel. Care should be taken to disable those also. If CONFIG_DEBUG_INFO cannot be disabled, then enabling CONFIG_DEBUG_INFO_REDUCED is second best. At least CONFIG_DEBUG_INFO_REDUCED should be always enabled for developers to convert addresses in oops messages to line numbers. Disable Kprobes Kprobes enables you to dynamically break into any kernel routine and collect debugging and performance information non-disruptively. You can trap at almost any kernel code address, specifying a handler routine to be invoked when the breakpoint is hit. Domain Config name Value Kernel-Debug-Kprobes-1 CONFIG_KPROBES n Disable Tracing FTrace enables the kernel to trace every kernel function. Providing kernel trace functionality would assist an attacker in discovering attack vectors. Domain Config name Value Kernel-Debug-Tracing-1 CONFIG_FTRACE n Disable Profiling Profiling and OProfile enables profiling the whole system, include the kernel, kernel modules, libraries, and applications. Providing profiling functionality would assist an attacker in discovering attack vectors. Domain Config name Value Kernel-Debug-Profiling-1 CONFIG_OPROFILE n Kernel-Debug-Profiling-2 CONFIG_PROFILING n Disable OOPS print on BUG() The output from OOPS print can be helpful in Return Oriented Programming (ROP) when trying to determine the effectiveness of an exploit. Domain Config name Value Kernel-Debug-OOPSOnBUG-1 CONFIG_DEBUG_BUGVERBOSE n Disable Kernel Debugging There are development-only branches of code in the kernel enabled by the DEBUG_KERNEL conf. This should be disabled to compile-out these branches. Domain Config name Value Kernel-Debug-Dev-1 CONFIG_DEBUG_KERNEL n Kernel-Debug-Dev-2 CONFIG_EMBEDDED n In some kernel versions, disabling this requires also disabling CONFIG_EMBEDDED , and CONFIG_EXPERT . Disabling CONFIG_EXPERT makes it impossible to disable COREDUMP , DEBUG_BUGVERBOSE , NAMESPACES , KALLSYMS and BUG . In which case it is better to leave this enabled than enable the others. Disable the kernel debug filesystem The kernel debug filesystem presents a lot of useful information and means of manipulation of the kernel to an attacker. Domain Config name Value Kernel-Debug-FileSystem-1 CONFIG_DEBUG_FS n Disable BUG() support The kernel will display backtrace and register information for BUGs and WARNs in kernel space, making it easier for attackers to develop exploits. Domain Config name Value Kernel-Debug-BUG-1 CONFIG_BUG n Disable core dumps Core dumps provide a lot of debug information for hackers. So disabling core dumps are recommended in production builds. This configuration is supported in Linux 3.7 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-Debug-CoreDumps-1 CONFIG_COREDUMP n Kernel Address Display Restriction When attackers try to develop \"run anywhere\" exploits for kernel vulnerabilities, they frequently need to know the location of internal kernel structures. By treating kernel addresses as sensitive information, those locations are not visible to regular local users. /proc/sys/kernel/kptr_restrict is set to \"1\" to block the reporting of known kernel address leaks. Domain File name Value Kernel-Debug-AdressDisplay-1 /proc/sys/kernel/kptr_restrict 1 Additionally, various files and directories should be readable only by the root user: /boot/vmlinuz* , /boot/System.map* , /sys/kernel/debug/ , /proc/slabinfo Domain File or Directorie name State Kernel-Debug-AdressDisplay-1 /boot/vmlinuz* Readable Only for root user Kernel-Debug-AdressDisplay-2 /boot/System.map* Readable Only for root user Kernel-Debug-AdressDisplay-3 /sys/kernel/debug/ Readable Only for root user Kernel-Debug-AdressDisplay-4 /proc/slabinfo Readable Only for root user DMESG Restrictions When attackers try to develop \"run anywhere\" exploits for vulnerabilities, they frequently will use dmesg output. By treating dmesg output as sensitive information, this output is not available to the attacker. /proc/sys/kernel/dmesg_restrict can be set to \"1\" to treat dmesg output as sensitive. Domain File name Value Kernel-Debug-DMESG-1 /proc/sys/kernel/dmesg_restrict 1 Enable the below compiler and linker options when building user-space applications to avoid stack smashing, buffer overflow attacks. Disable /proc/config.gz It is extremely important to not expose the kernel configuration used on a production device to a potential attacker. With access to the kernel config, it could be possible for an attacker to build a custom kernel for the device that may disable critical security features. Domain Config name Value Kernel-Debug-Config-1 CONFIG_IKCONFIG n","title":"Debug"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#debug","text":"No debuggers shall be present on the file system. This includes, but is not limited to, the GNU Debugger client/server (commonly known in their short form names such as the gdb and gdbserver executable binaries respectively), the LLDB next generation debugger or the TCF (Target Communications Framework) agnostic framework. Including these binaries as part of the file system will facilitate an attacker's ability to reverse engineer and debug (either locally or remotely) any process that is currently executing on the device.","title":"Debug"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#kernel-debug-symbols","text":"Debug symbols should always be removed from production kernels as they provide a lot of information to attackers. Domain Config name Value Kernel-Debug-Symbols-1 CONFIG_DEBUG_INFO n These kernel debug symbols are enabled by other config items in the kernel. Care should be taken to disable those also. If CONFIG_DEBUG_INFO cannot be disabled, then enabling CONFIG_DEBUG_INFO_REDUCED is second best. At least CONFIG_DEBUG_INFO_REDUCED should be always enabled for developers to convert addresses in oops messages to line numbers.","title":"Kernel debug symbols"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-kprobes","text":"Kprobes enables you to dynamically break into any kernel routine and collect debugging and performance information non-disruptively. You can trap at almost any kernel code address, specifying a handler routine to be invoked when the breakpoint is hit. Domain Config name Value Kernel-Debug-Kprobes-1 CONFIG_KPROBES n","title":"Disable Kprobes"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-tracing","text":"FTrace enables the kernel to trace every kernel function. Providing kernel trace functionality would assist an attacker in discovering attack vectors. Domain Config name Value Kernel-Debug-Tracing-1 CONFIG_FTRACE n","title":"Disable Tracing"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-profiling","text":"Profiling and OProfile enables profiling the whole system, include the kernel, kernel modules, libraries, and applications. Providing profiling functionality would assist an attacker in discovering attack vectors. Domain Config name Value Kernel-Debug-Profiling-1 CONFIG_OPROFILE n Kernel-Debug-Profiling-2 CONFIG_PROFILING n","title":"Disable Profiling"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-oops-print-on-bug","text":"The output from OOPS print can be helpful in Return Oriented Programming (ROP) when trying to determine the effectiveness of an exploit. Domain Config name Value Kernel-Debug-OOPSOnBUG-1 CONFIG_DEBUG_BUGVERBOSE n","title":"Disable OOPS print on BUG()"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-kernel-debugging","text":"There are development-only branches of code in the kernel enabled by the DEBUG_KERNEL conf. This should be disabled to compile-out these branches. Domain Config name Value Kernel-Debug-Dev-1 CONFIG_DEBUG_KERNEL n Kernel-Debug-Dev-2 CONFIG_EMBEDDED n In some kernel versions, disabling this requires also disabling CONFIG_EMBEDDED , and CONFIG_EXPERT . Disabling CONFIG_EXPERT makes it impossible to disable COREDUMP , DEBUG_BUGVERBOSE , NAMESPACES , KALLSYMS and BUG . In which case it is better to leave this enabled than enable the others.","title":"Disable Kernel Debugging"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-the-kernel-debug-filesystem","text":"The kernel debug filesystem presents a lot of useful information and means of manipulation of the kernel to an attacker. Domain Config name Value Kernel-Debug-FileSystem-1 CONFIG_DEBUG_FS n","title":"Disable the kernel debug filesystem"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-bug-support","text":"The kernel will display backtrace and register information for BUGs and WARNs in kernel space, making it easier for attackers to develop exploits. Domain Config name Value Kernel-Debug-BUG-1 CONFIG_BUG n","title":"Disable BUG() support"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-core-dumps","text":"Core dumps provide a lot of debug information for hackers. So disabling core dumps are recommended in production builds. This configuration is supported in Linux 3.7 and greater and thus should only be disabled for such versions. Domain Config name Value Kernel-Debug-CoreDumps-1 CONFIG_COREDUMP n","title":"Disable core dumps"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#kernel-address-display-restriction","text":"When attackers try to develop \"run anywhere\" exploits for kernel vulnerabilities, they frequently need to know the location of internal kernel structures. By treating kernel addresses as sensitive information, those locations are not visible to regular local users. /proc/sys/kernel/kptr_restrict is set to \"1\" to block the reporting of known kernel address leaks. Domain File name Value Kernel-Debug-AdressDisplay-1 /proc/sys/kernel/kptr_restrict 1 Additionally, various files and directories should be readable only by the root user: /boot/vmlinuz* , /boot/System.map* , /sys/kernel/debug/ , /proc/slabinfo Domain File or Directorie name State Kernel-Debug-AdressDisplay-1 /boot/vmlinuz* Readable Only for root user Kernel-Debug-AdressDisplay-2 /boot/System.map* Readable Only for root user Kernel-Debug-AdressDisplay-3 /sys/kernel/debug/ Readable Only for root user Kernel-Debug-AdressDisplay-4 /proc/slabinfo Readable Only for root user","title":"Kernel Address Display Restriction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#dmesg-restrictions","text":"When attackers try to develop \"run anywhere\" exploits for vulnerabilities, they frequently will use dmesg output. By treating dmesg output as sensitive information, this output is not available to the attacker. /proc/sys/kernel/dmesg_restrict can be set to \"1\" to treat dmesg output as sensitive. Domain File name Value Kernel-Debug-DMESG-1 /proc/sys/kernel/dmesg_restrict 1 Enable the below compiler and linker options when building user-space applications to avoid stack smashing, buffer overflow attacks.","title":"DMESG Restrictions"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.4_Debug/#disable-procconfiggz","text":"It is extremely important to not expose the kernel configuration used on a production device to a potential attacker. With access to the kernel config, it could be possible for an attacker to build a custom kernel for the device that may disable critical security features. Domain Config name Value Kernel-Debug-Config-1 CONFIG_IKCONFIG n","title":"Disable /proc/config.gz"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.5_FileSystems/","text":"File System Disable all file systems not needed To reduce the attack surface, file system data is parsed by the kernel, so any logic bugs in file system drivers can become kernel exploits. Disable NFS file system NFS FileSystems are useful during development phases, but this can be a very helpful way for an attacker to get files when you are in production mode, so we must disable them. Domain Config name Value Kernel-FileSystems-NFS-1 CONFIG_NFSD n Kernel-FileSystems-NFS-2 CONFIG_NFS_FS n Partition Mount Options There are several security restrictions that can be set on a filesystem when it is mounted. Some common security options include, but are not limited to: nosuid - Do not allow set-user-identifier or set-group-identifier bits to take effect. nodev - Do not interpret character or block special devices on the filesystem. noexec - Do not allow execution of any binaries on the mounted filesystem. ro - Mount filesystem as read-only. The following flags shall be used for mounting common filesystems: Domain Partition Value Kernel-FileSystems-Mount-1 /boot nosuid , nodev and noexec . Kernel-FileSystems-Mount-2 /var & /tmp In /etc/fstab or vfstab , add nosuid , nodev and noexec . Kernel-FileSystems-Mount-3 Non-root local If type is ext2 or ext3 and mount point not '/', add nodev . Kernel-FileSystems-Mount-4 Removable storage Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-5 Temporary storage Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-6 /dev/shm Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-7 /dev Add nosuid and noexec . If CONFIG_DEVTMPFS_MOUNT is set, then the kernel will mount /dev and will not apply the nosuid , noexec options. Either disable CONFIG_DEVTMPFS_MOUNT or add a remount with noexec and nosuid options to system startup. Domain Config name State or Value Kernel-FileSystems-Mount-1 CONFIG_DEVTMPFS_MOUNT Disabled or add remount with noexec and nosuid to system startup.","title":"File Systems"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.5_FileSystems/#file-system","text":"","title":"File System"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.5_FileSystems/#disable-all-file-systems-not-needed","text":"To reduce the attack surface, file system data is parsed by the kernel, so any logic bugs in file system drivers can become kernel exploits.","title":"Disable all file systems not needed"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.5_FileSystems/#disable-nfs-file-system","text":"NFS FileSystems are useful during development phases, but this can be a very helpful way for an attacker to get files when you are in production mode, so we must disable them. Domain Config name Value Kernel-FileSystems-NFS-1 CONFIG_NFSD n Kernel-FileSystems-NFS-2 CONFIG_NFS_FS n","title":"Disable NFS file system"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/4_Kernel/1.2.4.5_FileSystems/#partition-mount-options","text":"There are several security restrictions that can be set on a filesystem when it is mounted. Some common security options include, but are not limited to: nosuid - Do not allow set-user-identifier or set-group-identifier bits to take effect. nodev - Do not interpret character or block special devices on the filesystem. noexec - Do not allow execution of any binaries on the mounted filesystem. ro - Mount filesystem as read-only. The following flags shall be used for mounting common filesystems: Domain Partition Value Kernel-FileSystems-Mount-1 /boot nosuid , nodev and noexec . Kernel-FileSystems-Mount-2 /var & /tmp In /etc/fstab or vfstab , add nosuid , nodev and noexec . Kernel-FileSystems-Mount-3 Non-root local If type is ext2 or ext3 and mount point not '/', add nodev . Kernel-FileSystems-Mount-4 Removable storage Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-5 Temporary storage Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-6 /dev/shm Add nosuid , nodev and noexec . Kernel-FileSystems-Mount-7 /dev Add nosuid and noexec . If CONFIG_DEVTMPFS_MOUNT is set, then the kernel will mount /dev and will not apply the nosuid , noexec options. Either disable CONFIG_DEVTMPFS_MOUNT or add a remount with noexec and nosuid options to system startup. Domain Config name State or Value Kernel-FileSystems-Mount-1 CONFIG_DEVTMPFS_MOUNT Disabled or add remount with noexec and nosuid to system startup.","title":"Partition Mount Options"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.0_Abstract/","text":"Part 5 - Platform Abstract The Automotive Grade Linux platform is a Linux distribution with AGL compliant applications and services. The platform includes the following software: Linux BSP configured for reference boards. Proprietary device drivers for common peripherals on reference boards. Application framework. Windows/layer management (graphics). Sound resource management. An atomic software update system (chapter Update). Building and debug tools (based on Yocto project). Domain Improvement Platform-Abstract-1 Create a graphics and sound part. This part focuses on the AGL platform including all tools and techniques used to upgrade the security and downgrade the danger. It must be possible to apply the two fundamental principles written at the very beginning of the document. First of all, security management must remain simple. You must also prohibit everything by default, and then define a set of authorization rules. As cases to deal with, we must: Implement a MAC for processes and files. Limit communication between applications ( SystemBus and SystemD part). Prohibit all tools used during development mode ( Utilities and Services part). Manage user capabilities ( Users part). Manage application permissions and policies ( AGLFw part). The tools and concepts used to meet these needs are only examples. Any other tool that meets the need can be used. In AGL, as in many other embedded systems, different security mechanisms settle in the core layers to ensure isolation and data privacy. While the Mandatory Access Control layer ( SMACK ) provides global security and isolation, other mechanisms like Cynara are required to check application's permissions at runtime. Applicative permissions (also called \" privileges \") may vary depending on the user and the application being run: an application should have access to a given service only if it is run by the proper user and if the appropriate permissions are granted. Discretionary Access Control D iscretionary A ccess C ontrol ( DAC ) is the traditional Linux method of separating users and groups from one another. In a shared environment where multiple users have access to a computer or network, Unix IDs have offered a way to contain access within privilege areas for individuals, or shared among the group or system. The Android system took this one step further, assigning new user IDs for each App. This was never the original intention of Linux UIDs, but was able to provide Android\u2019s initial security element: the ability to sandbox applications. Although AGL mentions use of DAC for security isolation, the weight of the security responsibility lies in the M andatory A ccess C ontrol ( MAC ) and Cynara . Furthermore, there are system services with unique UIDs. however,the system does not go to the extreme of Android, where every application has its own UID. All sandboxing (app isolation) in AGL is handled in the MAC contexts. Mandatory Access Control M andatory A ccess C ontrol ( MAC ) is an extension to DAC , whereby extended attributes (xattr) are associated with the filesystem. In the case of AGL, the smackfs filesystem allows files and directories to be associated with a SMACK label, providing the ability of further discrimination on access control. A SMACK label is a simple null terminated character string with a maximum of 255 bytes. While it doesn\u2019t offer the richness of an SELinux label, which provides a user, role,type, and level, the simplicity of a single value makes the overall design far less complex. There is arguably less chance of the security author making mistakes in the policies set forth. Acronyms and Abbreviations The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description ACL A ccess C ontrol L ists alsa A dvanced L inux S ound A rchitecture API A pplication P rogramming I nterface AppFw App lication F rame w ork BSP B oard S upport P ackage Cap Cap abilities DAC D iscretionary A ccess C ontrol DDOS D istributed D enial O f S ervice DOS D enial O f S ervice IPC I nter- P rocess C ommunication MAC M andatory A ccess C ontrol PAM P luggable A uthentication M odules SMACK S implified M andatory A ccess C ontrol K ernel","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.0_Abstract/#part-5-platform","text":"","title":"Part 5 - Platform"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.0_Abstract/#abstract","text":"The Automotive Grade Linux platform is a Linux distribution with AGL compliant applications and services. The platform includes the following software: Linux BSP configured for reference boards. Proprietary device drivers for common peripherals on reference boards. Application framework. Windows/layer management (graphics). Sound resource management. An atomic software update system (chapter Update). Building and debug tools (based on Yocto project). Domain Improvement Platform-Abstract-1 Create a graphics and sound part. This part focuses on the AGL platform including all tools and techniques used to upgrade the security and downgrade the danger. It must be possible to apply the two fundamental principles written at the very beginning of the document. First of all, security management must remain simple. You must also prohibit everything by default, and then define a set of authorization rules. As cases to deal with, we must: Implement a MAC for processes and files. Limit communication between applications ( SystemBus and SystemD part). Prohibit all tools used during development mode ( Utilities and Services part). Manage user capabilities ( Users part). Manage application permissions and policies ( AGLFw part). The tools and concepts used to meet these needs are only examples. Any other tool that meets the need can be used. In AGL, as in many other embedded systems, different security mechanisms settle in the core layers to ensure isolation and data privacy. While the Mandatory Access Control layer ( SMACK ) provides global security and isolation, other mechanisms like Cynara are required to check application's permissions at runtime. Applicative permissions (also called \" privileges \") may vary depending on the user and the application being run: an application should have access to a given service only if it is run by the proper user and if the appropriate permissions are granted.","title":"Abstract"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.0_Abstract/#discretionary-access-control","text":"D iscretionary A ccess C ontrol ( DAC ) is the traditional Linux method of separating users and groups from one another. In a shared environment where multiple users have access to a computer or network, Unix IDs have offered a way to contain access within privilege areas for individuals, or shared among the group or system. The Android system took this one step further, assigning new user IDs for each App. This was never the original intention of Linux UIDs, but was able to provide Android\u2019s initial security element: the ability to sandbox applications. Although AGL mentions use of DAC for security isolation, the weight of the security responsibility lies in the M andatory A ccess C ontrol ( MAC ) and Cynara . Furthermore, there are system services with unique UIDs. however,the system does not go to the extreme of Android, where every application has its own UID. All sandboxing (app isolation) in AGL is handled in the MAC contexts.","title":"Discretionary Access Control"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.0_Abstract/#mandatory-access-control","text":"M andatory A ccess C ontrol ( MAC ) is an extension to DAC , whereby extended attributes (xattr) are associated with the filesystem. In the case of AGL, the smackfs filesystem allows files and directories to be associated with a SMACK label, providing the ability of further discrimination on access control. A SMACK label is a simple null terminated character string with a maximum of 255 bytes. While it doesn\u2019t offer the richness of an SELinux label, which provides a user, role,type, and level, the simplicity of a single value makes the overall design far less complex. There is arguably less chance of the security author making mistakes in the policies set forth.","title":"Mandatory Access Control"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.0_Abstract/#acronyms-and-abbreviations","text":"The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description ACL A ccess C ontrol L ists alsa A dvanced L inux S ound A rchitecture API A pplication P rogramming I nterface AppFw App lication F rame w ork BSP B oard S upport P ackage Cap Cap abilities DAC D iscretionary A ccess C ontrol DDOS D istributed D enial O f S ervice DOS D enial O f S ervice IPC I nter- P rocess C ommunication MAC M andatory A ccess C ontrol PAM P luggable A uthentication M odules SMACK S implified M andatory A ccess C ontrol K ernel","title":"Acronyms and Abbreviations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.1_Mandatory_Access_Control/","text":"Mandatory Access Control We decided to put the MAC protection on the platform part despite the fact that it applies to the kernel too, since its use will be mainly at the platform level (except floor part). M andatory A ccess C ontrol ( MAC ) is a protection provided by the Linux kernel that requires a L inux S ecurity M odule ( LSM ). AGL uses an LSM called S implified M andatory A ccess C ontrol K ernel ( SMACK ). This protection involves the creation of SMACK labels as part of the extended attributes SMACK labels to the file extended attributes. And a policy is also created to define the behaviour of each label. The kernel access controls is based on these labels and this policy. If there is no rule, no access will be granted and as a consequence, what is not explicitly authorized is forbidden. There are two types of SMACK labels: Execution SMACK (Attached to the process): Defines how files are accessed and created by that process. File Access SMACK (Written to the extended attribute of the file): Defines which process can access the file. By default a process executes with its File Access SMACK label unless an Execution SMACK label is defined. AGL's SMACK scheme is based on the Tizen 3 Q2/2015 . It divides the System into the following domains: Floor. System. Applications, Services and User. See AGL security framework review and Smack White Paper for more information. Floor The floor domain includes the base system services and any associated data and libraries. This data remains unchanged at runtime. Writing to floor files or directories is allowed only in development mode or during software installation or upgrade. The following table details the floor domain: Label Name Execution SMACK File Access SMACK - Floor r-x for all Only kernel and internal kernel thread. ^ Hat --- for all rx on all domains. * Star rwx for all None The Hat label is Only for privileged system services (currently only systemd-journal). Useful for backup or virus scans. No file with this label should exist except in the debug log. The Star label is used for device files or /tmp Access restriction managed via DAC . Individual files remain protected by their SMACK label. Domain Label name Recommendations Kernel-MAC-Floor-1 ^ Only for privileged system services. Kernel-MAC-Floor-2 * Used for device files or /tmp Access restriction via DAC. System The system domain includes a reduced set of core system services of the OS and any associated data. This data may change at runtime. The following table details the system domain: Label Name Execution SMACK File Access SMACK System System None Privileged processes System::Run Run rwxatl for User and System label None System::Shared Shared rwxatl for system domain r-x for User label None System::Log Log rwa for System label xa for user label None System::Sub SubSystem Subsystem Config files SubSystem only Domain Label name Recommendations Kernel-MAC-System-1 System Process should write only to file with transmute attribute. Kernel-MAC-System-2 System::run Files are created with the directory label from user and system domain (transmute) Lock is implicit with w . Kernel-MAC-System-3 System::Shared Files are created with the directory label from system domain (transmute) User domain has locked privilege. Kernel-MAC-System-4 System::Log Some limitation may impose to add w to enable append. Kernel-MAC-System-5 System::Sub Isolation of risky Subsystem. Applications, Services and User The application , services and user domain includes code that provides services to the system and user, as well as any associated data. All code running on this domain is under Cynara control. The following table details the application , services and user domain: Label Name Execution SMACK File Access SMACK User::Pkg::$AppID AppID rwx (for files created by the App). rx for files installed by AppFw $App runtime executing $App User::Home Home rwx-t from System label r-x-l from App None User::App-Shared Shared rwxat from System and User domains label of $User None Domain Label name Recommendations Kernel-MAC-System-1 User::Pkg::$AppID Only one Label is allowed per App. A data directory is created by the AppFw in rwx mode. Kernel-MAC-System-2 User::Home AppFw needs to create a directory in /home/$USER/App-Shared at first launch if not present with label app-data access is User::App-Shared without transmute. Kernel-MAC-System-3 User::App-Shared Shared space between all App running for a given user. Attack Vectors There are 4 major components to the system: The LSM kernel module. The smackfs filesystem. Basic utilities for policy management and checking. The policy/configuration data. As with any mandatory access system, the policy management needs to be carefully separated from the checking, as the management utilities can become a convenient point of attack. Dynamic additions to the policy system need to be carefully verified, as the ability to update the policies is often needed, but introduces a possible threat. Finally, even if the policy management is well secured, the policy checking and failure response to that checking is also of vital importance to the smooth operation of the system. While MAC is a certainly a step up in security when compared to DAC, there are still many ways to compromise a SMACK-enabled Linux system. Some of these ways are as follows: Disabling SMACK at invocation of the kernel (with command-line: security=none). Disabling SMACK in the kernel build and redeploying the kernel. Changing a SMACK attribute of a file or directory at install time. Tampering with a process with the CAP_MAC_ADMIN privilege. Setting/Re-setting the SMACK label of a file. Tampering with the default domains (i.e. /etc/smack/accesses.d/default-access-domains). Disabling or tampering with the SMACK filesystem (i.e. /smackfs). Adding policies with smackload (adding the utility if not present). Changing labels with chsmack (adding the utility if not present).","title":"Mandatory Access Control"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.1_Mandatory_Access_Control/#mandatory-access-control","text":"We decided to put the MAC protection on the platform part despite the fact that it applies to the kernel too, since its use will be mainly at the platform level (except floor part). M andatory A ccess C ontrol ( MAC ) is a protection provided by the Linux kernel that requires a L inux S ecurity M odule ( LSM ). AGL uses an LSM called S implified M andatory A ccess C ontrol K ernel ( SMACK ). This protection involves the creation of SMACK labels as part of the extended attributes SMACK labels to the file extended attributes. And a policy is also created to define the behaviour of each label. The kernel access controls is based on these labels and this policy. If there is no rule, no access will be granted and as a consequence, what is not explicitly authorized is forbidden. There are two types of SMACK labels: Execution SMACK (Attached to the process): Defines how files are accessed and created by that process. File Access SMACK (Written to the extended attribute of the file): Defines which process can access the file. By default a process executes with its File Access SMACK label unless an Execution SMACK label is defined. AGL's SMACK scheme is based on the Tizen 3 Q2/2015 . It divides the System into the following domains: Floor. System. Applications, Services and User. See AGL security framework review and Smack White Paper for more information.","title":"Mandatory Access Control"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.1_Mandatory_Access_Control/#floor","text":"The floor domain includes the base system services and any associated data and libraries. This data remains unchanged at runtime. Writing to floor files or directories is allowed only in development mode or during software installation or upgrade. The following table details the floor domain: Label Name Execution SMACK File Access SMACK - Floor r-x for all Only kernel and internal kernel thread. ^ Hat --- for all rx on all domains. * Star rwx for all None The Hat label is Only for privileged system services (currently only systemd-journal). Useful for backup or virus scans. No file with this label should exist except in the debug log. The Star label is used for device files or /tmp Access restriction managed via DAC . Individual files remain protected by their SMACK label. Domain Label name Recommendations Kernel-MAC-Floor-1 ^ Only for privileged system services. Kernel-MAC-Floor-2 * Used for device files or /tmp Access restriction via DAC.","title":"Floor"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.1_Mandatory_Access_Control/#system","text":"The system domain includes a reduced set of core system services of the OS and any associated data. This data may change at runtime. The following table details the system domain: Label Name Execution SMACK File Access SMACK System System None Privileged processes System::Run Run rwxatl for User and System label None System::Shared Shared rwxatl for system domain r-x for User label None System::Log Log rwa for System label xa for user label None System::Sub SubSystem Subsystem Config files SubSystem only Domain Label name Recommendations Kernel-MAC-System-1 System Process should write only to file with transmute attribute. Kernel-MAC-System-2 System::run Files are created with the directory label from user and system domain (transmute) Lock is implicit with w . Kernel-MAC-System-3 System::Shared Files are created with the directory label from system domain (transmute) User domain has locked privilege. Kernel-MAC-System-4 System::Log Some limitation may impose to add w to enable append. Kernel-MAC-System-5 System::Sub Isolation of risky Subsystem.","title":"System"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.1_Mandatory_Access_Control/#applications-services-and-user","text":"The application , services and user domain includes code that provides services to the system and user, as well as any associated data. All code running on this domain is under Cynara control. The following table details the application , services and user domain: Label Name Execution SMACK File Access SMACK User::Pkg::$AppID AppID rwx (for files created by the App). rx for files installed by AppFw $App runtime executing $App User::Home Home rwx-t from System label r-x-l from App None User::App-Shared Shared rwxat from System and User domains label of $User None Domain Label name Recommendations Kernel-MAC-System-1 User::Pkg::$AppID Only one Label is allowed per App. A data directory is created by the AppFw in rwx mode. Kernel-MAC-System-2 User::Home AppFw needs to create a directory in /home/$USER/App-Shared at first launch if not present with label app-data access is User::App-Shared without transmute. Kernel-MAC-System-3 User::App-Shared Shared space between all App running for a given user.","title":"Applications, Services and User"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.1_Mandatory_Access_Control/#attack-vectors","text":"There are 4 major components to the system: The LSM kernel module. The smackfs filesystem. Basic utilities for policy management and checking. The policy/configuration data. As with any mandatory access system, the policy management needs to be carefully separated from the checking, as the management utilities can become a convenient point of attack. Dynamic additions to the policy system need to be carefully verified, as the ability to update the policies is often needed, but introduces a possible threat. Finally, even if the policy management is well secured, the policy checking and failure response to that checking is also of vital importance to the smooth operation of the system. While MAC is a certainly a step up in security when compared to DAC, there are still many ways to compromise a SMACK-enabled Linux system. Some of these ways are as follows: Disabling SMACK at invocation of the kernel (with command-line: security=none). Disabling SMACK in the kernel build and redeploying the kernel. Changing a SMACK attribute of a file or directory at install time. Tampering with a process with the CAP_MAC_ADMIN privilege. Setting/Re-setting the SMACK label of a file. Tampering with the default domains (i.e. /etc/smack/accesses.d/default-access-domains). Disabling or tampering with the SMACK filesystem (i.e. /smackfs). Adding policies with smackload (adding the utility if not present). Changing labels with chsmack (adding the utility if not present).","title":"Attack Vectors"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.2_SystemD/","text":"SystemD afm-system-daemon is used to: Manage users and user sessions. Setup applications and services ( CGroups , namespaces , autostart, permissions). Use of libsystemd for its programs (event management, D-Bus interface). Domain Object Recommendations Platform-SystemD-1 Security model Use Namespaces for containerization. Platform-SystemD-2 Security model Use CGroups to organise processes. See systemd integration and user management for more information. Benefits Removal of one privileged process: afm-user-daemon Access and use of high level features: Socket activation. Management of users and integration of PAM . Dependency resolution to services. Cgroups and resource control. Namespaces containerization. Autostart of required API. Permissions and security settings. Network management. CGroups Control Groups offer a lot of features, with the most useful ones you can control: Memory usage, how much CPU time is allocated, how much device I/O is allowed or which devices can be accessed. SystemD uses CGroups to organise processes (each service is a CGroups , and all processes started by that service use that CGroups ). By default, SystemD automatically creates a hierarchy of slice, scope and service units to provide a unified structure for the CGroups tree. With the systemctl command, you can further modify this structure by creating custom slices. Currently, in AGL, there are 2 slices ( user.slice and system.slice ). Namespaces User side There are several ways of authenticating users (Key Radio Frequency, Phone, Gesture, ...). Each authentication provides dynamic allocation of uids to authenticated users. Uids is used to ensure privacy of users and SMACK for applications privacy. First, the user initiates authentication with PAM activation. PAM Standard offers highly configurable authentication with modular design like face recognition, Voice identification or with a password. Then users should access identity services with services and applications.","title":"SystemD"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.2_SystemD/#systemd","text":"afm-system-daemon is used to: Manage users and user sessions. Setup applications and services ( CGroups , namespaces , autostart, permissions). Use of libsystemd for its programs (event management, D-Bus interface). Domain Object Recommendations Platform-SystemD-1 Security model Use Namespaces for containerization. Platform-SystemD-2 Security model Use CGroups to organise processes. See systemd integration and user management for more information.","title":"SystemD"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.2_SystemD/#benefits","text":"Removal of one privileged process: afm-user-daemon Access and use of high level features: Socket activation. Management of users and integration of PAM . Dependency resolution to services. Cgroups and resource control. Namespaces containerization. Autostart of required API. Permissions and security settings. Network management.","title":"Benefits"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.2_SystemD/#cgroups","text":"Control Groups offer a lot of features, with the most useful ones you can control: Memory usage, how much CPU time is allocated, how much device I/O is allowed or which devices can be accessed. SystemD uses CGroups to organise processes (each service is a CGroups , and all processes started by that service use that CGroups ). By default, SystemD automatically creates a hierarchy of slice, scope and service units to provide a unified structure for the CGroups tree. With the systemctl command, you can further modify this structure by creating custom slices. Currently, in AGL, there are 2 slices ( user.slice and system.slice ).","title":"CGroups"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.2_SystemD/#namespaces","text":"","title":"Namespaces"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.2_SystemD/#user-side","text":"There are several ways of authenticating users (Key Radio Frequency, Phone, Gesture, ...). Each authentication provides dynamic allocation of uids to authenticated users. Uids is used to ensure privacy of users and SMACK for applications privacy. First, the user initiates authentication with PAM activation. PAM Standard offers highly configurable authentication with modular design like face recognition, Voice identification or with a password. Then users should access identity services with services and applications.","title":"User side"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.3_SystemBus/","text":"D-Bus D-Bus is a well-known IPC (Inter-Process Communication) protocol (and daemon) that helps applications to talk to each other. The use of D-Bus is great because it allows to implement discovery and signaling. The D-Bus session is by default addressed by environment variable DBUS_SESSION_BUS_ADDRESS . Using systemd variable DBUS_SESSION_BUS_ADDRESS is automatically set for user sessions. D-Bus usage is linked to permissions. D-Bus has already had several security issues (mostly DoS issues), to allow applications to keep talking to each other. It is important to protect against this type of attack to keep the system more stable. Domain Object Recommendations Platform-DBus-1 Security model Use D-Bus as IPC. Platform-DBus-2 Security model Apply D-BUS security patches: D-Bus CVE","title":"SystemBus"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.3_SystemBus/#d-bus","text":"D-Bus is a well-known IPC (Inter-Process Communication) protocol (and daemon) that helps applications to talk to each other. The use of D-Bus is great because it allows to implement discovery and signaling. The D-Bus session is by default addressed by environment variable DBUS_SESSION_BUS_ADDRESS . Using systemd variable DBUS_SESSION_BUS_ADDRESS is automatically set for user sessions. D-Bus usage is linked to permissions. D-Bus has already had several security issues (mostly DoS issues), to allow applications to keep talking to each other. It is important to protect against this type of attack to keep the system more stable. Domain Object Recommendations Platform-DBus-1 Security model Use D-Bus as IPC. Platform-DBus-2 Security model Apply D-BUS security patches: D-Bus CVE","title":"D-Bus"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.4_Services/","text":"System services and daemons Domain Improvement Platform-Services-1 SystemD ? Platform-Services-2 Secure daemon ? Tools connman : An internet connection manager designed to be slim and to use as few resources as possible. It is a fully modular system that can be extended, through plug-ins, to support all kinds of wired or wireless technologies. bluez is a Bluetooth stack. Its goal is to program an implementation of the Bluetooth wireless standards specifications. In addition to the basic stack, the bluez-utils and bluez-firmware packages contain low level utilities such as dfutool which can interrogate the Bluetooth adapter chipset in order to determine whether its firmware can be upgraded. gstreamer is a pipeline-based multimedia framework. It can be used to build a system that reads files in one format, processes them, and exports them in another format. alsa is a software framework and part of the Linux kernel that provides an API for sound card device drivers. Domain Tool name State Platform-Utilities-1 connman Used as a connection manager. Platform-Utilities-2 bluez Used as a Bluetooth manager. Platform-Utilities-3 gstreamer Used to manage multimedia file format. Platform-Utilities-4 alsa Used to provides an API for sound card device drivers.","title":"System services and daemons"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.4_Services/#system-services-and-daemons","text":"Domain Improvement Platform-Services-1 SystemD ? Platform-Services-2 Secure daemon ?","title":"System services and daemons"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.4_Services/#tools","text":"connman : An internet connection manager designed to be slim and to use as few resources as possible. It is a fully modular system that can be extended, through plug-ins, to support all kinds of wired or wireless technologies. bluez is a Bluetooth stack. Its goal is to program an implementation of the Bluetooth wireless standards specifications. In addition to the basic stack, the bluez-utils and bluez-firmware packages contain low level utilities such as dfutool which can interrogate the Bluetooth adapter chipset in order to determine whether its firmware can be upgraded. gstreamer is a pipeline-based multimedia framework. It can be used to build a system that reads files in one format, processes them, and exports them in another format. alsa is a software framework and part of the Linux kernel that provides an API for sound card device drivers. Domain Tool name State Platform-Utilities-1 connman Used as a connection manager. Platform-Utilities-2 bluez Used as a Bluetooth manager. Platform-Utilities-3 gstreamer Used to manage multimedia file format. Platform-Utilities-4 alsa Used to provides an API for sound card device drivers.","title":"Tools"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/","text":"Application framework/model ( AppFw ) The AGL application framework consists of several inter-working parts: SMACK : The kernel level LSM ( L inux S ecurity M odule) that performs extended access control of the system. Cynara : the native gatekeeper daemon used for policy handling, updating to the database and policy checking. Security Manager: a master service, through which all security events are intended to take place. Several native application framework utilities: afm-main-binding , afm-user-daemon , afm-system-daemon . The application framework manages: The applications and services management: Installing, Uninstalling, Listing, ... The life cycle of applications: Start -> (Pause, Resume) -> Stop. Events and signals propagation. Privileges granting and checking. API for interaction with applications. The security model refers to the security model used to ensure security and to the tools that are provided for implementing that model. It's an implementation detail that should not impact the layers above the application framework. The security model refers to how DAC ( D iscretionary A ccess C ontrol), MAC (Mandatory Access Control) and Capabilities are used by the system to ensure security and privacy. It also includes features of reporting using audit features and by managing logs and alerts. The AppFw uses the security model to ensure the security and the privacy of the applications that it manages. It must be compliant with the underlying security model. But it should hide it to the applications. Domain Object Recommendations Platform-AGLFw-AppFw-1 Security model Use the AppFw as Security model. See AGL AppFw Privileges Management and AGL - Application Framework Documentation for more information. The Security Manager communicates policy information to Cynara , which retains information in its own database in the format of a text file with comma-separated values (CSV). There are provisions to retain a copy of the CSV text file when the file is being updated. Runtime checking occurs through Cynara . Each application that is added to the framework has its own instantiation of a SMACK context and D-bus bindings. The afb_daemon and Binder form a web-service that is communicated to through http or a websocket from the application-proper. This http or websocket interface uses a standard unique web token for API communication. Cynara There's a need for another mechanism responsible for checking applicative permissions: Currently in AGL, this task depends on a policy-checker service ( Cynara ). Stores complex policies in databases. \"Soft\" security (access is checked by the framework). Cynara interact with D-Bus in order to deliver this information. Cynara consists of several parts: Cynara: a daemon for controlling policies and responding to access control requests. Database: a spot to hold policies. Libraries: several static and dynamic libraries for communicating with Cynara. The daemon communicates to the libraries over Unix domain sockets. The database storage format is a series of CSV-like files with an index file. There are several ways that an attacker can manipulate policies of the Cynara system: Disable Cynara by killing the process. Tamper with the Cynara binary on-disk or in-memory. Corrupt the database controlled by Cynara. Tamper with the database controlled by Cynara. Highjack the communication between Cynara and the database. The text-based database is the weakest part of the system and although there are some consistency mechanisms in place (i.e. the backup guard), these mechanisms are weak at best and can be countered by an attacker very easily. Domain Object Recommendations Platform-AGLFw-Cynara-1 Permissions Use Cynara as policy-checker service. Policies Policy rules: Are simple - for pair [application context, privilege] there is straight answer (single Policy Type): [ALLOW / DENY / ...]. No code is executed (no script). Can be easily cached and managed. Application context (describes id of the user and the application credentials) It is build of: UID of the user that runs the application. SMACK label of application. Holding policies Policies are kept in buckets. Buckets are set of policies which have additional a property of default answer, the default answer is yielded if no policy matches searched key. Buckets have names which might be used in policies (for directions). Attack Vectors The following attack vectors are not completely independent. While attackers may have varying levels of access to an AGL system, experience has shown that a typical attack can start with direct access to a system, find the vulnerabilities, then proceed to automate the attack such that it can be invoked from less accessible standpoint (e.g. remotely). Therefore, it is important to assess all threat levels, and protect the system appropriately understanding that direct access attacks are the door-way into remote attacks. Remote Attacks The local web server interface used for applications is the first point of attack, as web service APIs are well understood and easily intercepted. The local web server could potentially be exploited by redirecting web requests through the local service and exploiting the APIs. While there is the use of a security token on the web service API, this is weak textual matching at best. This will not be difficult to spoof. It is well known that API Keys do not provide any real security . It is likely that the architectural inclusion of an http / web-service interface provided the most flexibility for applications to be written natively or in HTML5. However, this flexibility may trade-off with security concerns. For example, if a native application were linked directly to the underlying framework services, there would be fewer concerns over remote attacks coming through the web-service interface. Leaving the interface as designed, mitigations to attacks could include further securing the interface layer with cryptographic protocols: e.g. encrypted information passing, key exchange (e.g. Elliptic-Curve Diffie-Hellman). User-level Native Attacks Modifying the CSV data-base Modifying the SQLite DB Tampering with the user-level binaries Tampering with the user daemons Spoofing the D-bus Interface Adding executables/libraries With direct access to the device, there are many security concerns on the native level. For example, as Cynara uses a text file data-base with comma-separated values (CSV), an attacker could simply modify the data-base to escalate privileges of an application. Once a single application has all the privileges possible on the system, exploits can come through in this manner. Similarly the SQLite database used by the Security Manager is not much different than a simple text file. There are many tools available to add, remove, modify entries in an SQLite data-base. On the next level, a common point of attack is to modify binaries or daemons for exploiting functionality. There are many Linux tools available to aid in this regard, including: IDA Pro , and radare2 . With the ability to modify binaries, an attacker can do any number of activities including: removing calls to security checks, redirecting control to bypass verification functionality, ignoring security policy handling, escalating privileges, etc. Additionally, another attack vector would be to spoof the D-bus interface. D-bus is a message passing system built upon Inter-Process Communication (IPC), where structured messages are passed based upon a protocol. The interface is generic and well documented. Therefore, modifying or adding binaries/libraries to spoof this interface is a relatively straight-forward process. Once the interface has been spoofed, the attacker can issue any number of commands that lead into control of low-level functionality. Protecting a system from native attacks requires a methodical approach. First, the system should reject processes that are not sanctioned to run. Signature-level verification at installation time will help in this regard, but run-time integrity verification is much better. Signatures need to originate from authorized parties, which is discussed further in a later section on the Application Store. On the next level, executables should not be allowed to do things where they have not been granted permission. DAC and SMACK policies can help in this regard. On the other hand, there remain concerns with memory accesses, system calls, and other process activity that may go undetected. For this reason, a secure environment which monitors all activity can give indication of all unauthorized activity on the system. Finally, it is very difficult to catch attacks of direct tampering in a system. These types of attacks require a defense-in-depth approach, where complementary software protection and hardening techniques are needed. Tamper-resistance and anti-reverse-engineering technologies include program transformations/obfuscation, integrity verification, and white-box cryptography. If applied in a mutually-dependent fashion and considering performance/security tradeoffs, the approach can provide an effective barrier to direct attacks to the system. Furthermore, the use of threat monitoring provides a valuable telemetry/analytics capability and the ability to react and renew a system under attack. Root-level Native Attacks Tampering the system daemon Tampering Cynara Tampering the security manager Disabling SMACK Tampering the kernel Once root-level access (i.e. su) has been achieved on the device, there are many ways to compromise the system. The system daemon, Cynara , and the security manager are vulnerable to tampering attacks. For example, an executable can be modified in memory to jam a branch, jump to an address, or disregard a check. This can be as simple as replacing a branch instruction with a NOP, changing a memory value, or using a debugger (e.g. gdb, IDA) to change an instruction. Tampering these executables would mean that policies can be ignored and verification checks can be bypassed. Without going so far as to tamper an executable, the SMACK system is also vulnerable to attack. For example, if the kernel is stopped and restarted with the security=none flag, then SMACK is not enabled. Furthermore, systemd starts the loading of SMACK rules during start-up. If this start-up process is interfered with, then SMACK will not run. Alternatively, new policies can be added with smackload allowing unforseen privileges to alternative applications/executables. Another intrusion on the kernel level is to rebuild the kernel (as it is open-source) and replace it with a copy that has SMACK disabled, or even just the SMACK filesystem ( smackfs ) disabled. Without the extended label attributes, the SMACK system is disabled. Root-level access to the device has ultimate power, where the entire system can be compromised. More so, a system with this level access allows an attacker to craft a simpler point-attack which can operate on a level requiring fewer privileges (e.g. remote access, user-level access). Vulnerable Resources Resource: afm-user-daemon The afm-user-daemon is in charge of handling applications on behalf of a user. Its main tasks are: Enumerate applications that the end user can run and keep this list available on demand. Start applications on behalf of the end user, set user running environment, set user security context. List current runnable or running applications. Stop (aka pause), continue (aka resume), terminate a running instance of a given application. Transfer requests for installation/uninstallation of applications to the corresponding system daemon afm-system-daemon. The afm-user-daemon launches applications. It builds a secure environment for the application before starting it within that environment. Different kinds of applications can be launched, based on a configuration file that describes how to launch an application of a given kind within a given launching mode: local or remote. Launching an application locally means that the application and its binder are launched together. Launching an application remotely translates in only launching the application binder. The UI by itself has to be activated remotely by a request (i.e. HTML5 homescreen in a browser). Once launched, running instances of the application receive a runid that identifies them. afm-user-daemon manages the list of applications that it has launched. When owning the right permissions, a client can get the list of running instances and details about a specific running instance. It can also terminate, stop or continue a given application. If the client owns the right permissions, afm-user-daemon delegates the task of installing and uninstalling applications to afm-system-daemon . afm-user-daemon is launched as a systemd service attached to a user session. Normally, the service file is located at /usr/lib/systemd/user/afm-user-daemon.service. Attacker goals: Disable afm-user-daemon . Tamper with the afm-user-daemon configuration. /usr/lib/systemd/user/afm-user-daemon.service. Application(widget) config.xml file. /etc/afm/afm-launch.conf (launcher configuration). Escalate user privileges to gain more access with afm-user-daemon . Install malicious application (widget). Tamper with afm-user-daemon on disk or in memory. Resource: afm-system-daemon The afm-system-daemon is in charge of installing applications on the AGL system. Its main tasks are: Install applications and setup security framework for newly installed applications. Uninstall applications. afm-system-daemon is launched as a systemd service attached to system. Normally, the service file is located at /lib/systemd/system/afm-systemdaemon.service. Attacker goals: Disable afm-system-daemon . Tamper with the afm-system-daemon configuration. Tamper afm-system-daemon on disk or in memory. Resource afb-daemon afb-binder is in charge of serving resources and features through an HTTP interface. afb-daemon is in charge of binding one instance of an application to the AGL framework and AGL system. The application and its companion binder run in a secured and isolated environment set for them. Applications are intended to access to AGL system through the binder. afb-daemon binders serve files through HTTP protocol and offers developers the capability to expose application API methods through HTTP or WebSocket protocol. Binder bindings are used to add APIs to afb-daemon . The user can write a binding for afb-daemon . The binder afb-daemon serves multiple purposes: It acts as a gateway for the application to access the system. It acts as an HTTP server for serving files to HTML5 applications. It allows HTML5 applications to have native extensions subject to security enforcement for accessing hardware resources or for speeding up parts of algorithm. Attacker goals: Break from isolation. Disable afb-daemon . Tamper afb-demon on disk or in memory. Tamper capabilities by creating/installing custom bindings for afb-daemon .","title":"Application Framework"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#application-frameworkmodel-appfw","text":"The AGL application framework consists of several inter-working parts: SMACK : The kernel level LSM ( L inux S ecurity M odule) that performs extended access control of the system. Cynara : the native gatekeeper daemon used for policy handling, updating to the database and policy checking. Security Manager: a master service, through which all security events are intended to take place. Several native application framework utilities: afm-main-binding , afm-user-daemon , afm-system-daemon . The application framework manages: The applications and services management: Installing, Uninstalling, Listing, ... The life cycle of applications: Start -> (Pause, Resume) -> Stop. Events and signals propagation. Privileges granting and checking. API for interaction with applications. The security model refers to the security model used to ensure security and to the tools that are provided for implementing that model. It's an implementation detail that should not impact the layers above the application framework. The security model refers to how DAC ( D iscretionary A ccess C ontrol), MAC (Mandatory Access Control) and Capabilities are used by the system to ensure security and privacy. It also includes features of reporting using audit features and by managing logs and alerts. The AppFw uses the security model to ensure the security and the privacy of the applications that it manages. It must be compliant with the underlying security model. But it should hide it to the applications. Domain Object Recommendations Platform-AGLFw-AppFw-1 Security model Use the AppFw as Security model. See AGL AppFw Privileges Management and AGL - Application Framework Documentation for more information. The Security Manager communicates policy information to Cynara , which retains information in its own database in the format of a text file with comma-separated values (CSV). There are provisions to retain a copy of the CSV text file when the file is being updated. Runtime checking occurs through Cynara . Each application that is added to the framework has its own instantiation of a SMACK context and D-bus bindings. The afb_daemon and Binder form a web-service that is communicated to through http or a websocket from the application-proper. This http or websocket interface uses a standard unique web token for API communication.","title":"Application framework/model (AppFw)"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#cynara","text":"There's a need for another mechanism responsible for checking applicative permissions: Currently in AGL, this task depends on a policy-checker service ( Cynara ). Stores complex policies in databases. \"Soft\" security (access is checked by the framework). Cynara interact with D-Bus in order to deliver this information. Cynara consists of several parts: Cynara: a daemon for controlling policies and responding to access control requests. Database: a spot to hold policies. Libraries: several static and dynamic libraries for communicating with Cynara. The daemon communicates to the libraries over Unix domain sockets. The database storage format is a series of CSV-like files with an index file. There are several ways that an attacker can manipulate policies of the Cynara system: Disable Cynara by killing the process. Tamper with the Cynara binary on-disk or in-memory. Corrupt the database controlled by Cynara. Tamper with the database controlled by Cynara. Highjack the communication between Cynara and the database. The text-based database is the weakest part of the system and although there are some consistency mechanisms in place (i.e. the backup guard), these mechanisms are weak at best and can be countered by an attacker very easily. Domain Object Recommendations Platform-AGLFw-Cynara-1 Permissions Use Cynara as policy-checker service.","title":"Cynara"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#policies","text":"Policy rules: Are simple - for pair [application context, privilege] there is straight answer (single Policy Type): [ALLOW / DENY / ...]. No code is executed (no script). Can be easily cached and managed. Application context (describes id of the user and the application credentials) It is build of: UID of the user that runs the application. SMACK label of application.","title":"Policies"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#holding-policies","text":"Policies are kept in buckets. Buckets are set of policies which have additional a property of default answer, the default answer is yielded if no policy matches searched key. Buckets have names which might be used in policies (for directions).","title":"Holding policies"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#attack-vectors","text":"The following attack vectors are not completely independent. While attackers may have varying levels of access to an AGL system, experience has shown that a typical attack can start with direct access to a system, find the vulnerabilities, then proceed to automate the attack such that it can be invoked from less accessible standpoint (e.g. remotely). Therefore, it is important to assess all threat levels, and protect the system appropriately understanding that direct access attacks are the door-way into remote attacks.","title":"Attack Vectors"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#remote-attacks","text":"The local web server interface used for applications is the first point of attack, as web service APIs are well understood and easily intercepted. The local web server could potentially be exploited by redirecting web requests through the local service and exploiting the APIs. While there is the use of a security token on the web service API, this is weak textual matching at best. This will not be difficult to spoof. It is well known that API Keys do not provide any real security . It is likely that the architectural inclusion of an http / web-service interface provided the most flexibility for applications to be written natively or in HTML5. However, this flexibility may trade-off with security concerns. For example, if a native application were linked directly to the underlying framework services, there would be fewer concerns over remote attacks coming through the web-service interface. Leaving the interface as designed, mitigations to attacks could include further securing the interface layer with cryptographic protocols: e.g. encrypted information passing, key exchange (e.g. Elliptic-Curve Diffie-Hellman).","title":"Remote Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#user-level-native-attacks","text":"Modifying the CSV data-base Modifying the SQLite DB Tampering with the user-level binaries Tampering with the user daemons Spoofing the D-bus Interface Adding executables/libraries With direct access to the device, there are many security concerns on the native level. For example, as Cynara uses a text file data-base with comma-separated values (CSV), an attacker could simply modify the data-base to escalate privileges of an application. Once a single application has all the privileges possible on the system, exploits can come through in this manner. Similarly the SQLite database used by the Security Manager is not much different than a simple text file. There are many tools available to add, remove, modify entries in an SQLite data-base. On the next level, a common point of attack is to modify binaries or daemons for exploiting functionality. There are many Linux tools available to aid in this regard, including: IDA Pro , and radare2 . With the ability to modify binaries, an attacker can do any number of activities including: removing calls to security checks, redirecting control to bypass verification functionality, ignoring security policy handling, escalating privileges, etc. Additionally, another attack vector would be to spoof the D-bus interface. D-bus is a message passing system built upon Inter-Process Communication (IPC), where structured messages are passed based upon a protocol. The interface is generic and well documented. Therefore, modifying or adding binaries/libraries to spoof this interface is a relatively straight-forward process. Once the interface has been spoofed, the attacker can issue any number of commands that lead into control of low-level functionality. Protecting a system from native attacks requires a methodical approach. First, the system should reject processes that are not sanctioned to run. Signature-level verification at installation time will help in this regard, but run-time integrity verification is much better. Signatures need to originate from authorized parties, which is discussed further in a later section on the Application Store. On the next level, executables should not be allowed to do things where they have not been granted permission. DAC and SMACK policies can help in this regard. On the other hand, there remain concerns with memory accesses, system calls, and other process activity that may go undetected. For this reason, a secure environment which monitors all activity can give indication of all unauthorized activity on the system. Finally, it is very difficult to catch attacks of direct tampering in a system. These types of attacks require a defense-in-depth approach, where complementary software protection and hardening techniques are needed. Tamper-resistance and anti-reverse-engineering technologies include program transformations/obfuscation, integrity verification, and white-box cryptography. If applied in a mutually-dependent fashion and considering performance/security tradeoffs, the approach can provide an effective barrier to direct attacks to the system. Furthermore, the use of threat monitoring provides a valuable telemetry/analytics capability and the ability to react and renew a system under attack.","title":"User-level Native Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#root-level-native-attacks","text":"Tampering the system daemon Tampering Cynara Tampering the security manager Disabling SMACK Tampering the kernel Once root-level access (i.e. su) has been achieved on the device, there are many ways to compromise the system. The system daemon, Cynara , and the security manager are vulnerable to tampering attacks. For example, an executable can be modified in memory to jam a branch, jump to an address, or disregard a check. This can be as simple as replacing a branch instruction with a NOP, changing a memory value, or using a debugger (e.g. gdb, IDA) to change an instruction. Tampering these executables would mean that policies can be ignored and verification checks can be bypassed. Without going so far as to tamper an executable, the SMACK system is also vulnerable to attack. For example, if the kernel is stopped and restarted with the security=none flag, then SMACK is not enabled. Furthermore, systemd starts the loading of SMACK rules during start-up. If this start-up process is interfered with, then SMACK will not run. Alternatively, new policies can be added with smackload allowing unforseen privileges to alternative applications/executables. Another intrusion on the kernel level is to rebuild the kernel (as it is open-source) and replace it with a copy that has SMACK disabled, or even just the SMACK filesystem ( smackfs ) disabled. Without the extended label attributes, the SMACK system is disabled. Root-level access to the device has ultimate power, where the entire system can be compromised. More so, a system with this level access allows an attacker to craft a simpler point-attack which can operate on a level requiring fewer privileges (e.g. remote access, user-level access).","title":"Root-level Native Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#vulnerable-resources","text":"","title":"Vulnerable Resources"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#resource-afm-user-daemon","text":"The afm-user-daemon is in charge of handling applications on behalf of a user. Its main tasks are: Enumerate applications that the end user can run and keep this list available on demand. Start applications on behalf of the end user, set user running environment, set user security context. List current runnable or running applications. Stop (aka pause), continue (aka resume), terminate a running instance of a given application. Transfer requests for installation/uninstallation of applications to the corresponding system daemon afm-system-daemon. The afm-user-daemon launches applications. It builds a secure environment for the application before starting it within that environment. Different kinds of applications can be launched, based on a configuration file that describes how to launch an application of a given kind within a given launching mode: local or remote. Launching an application locally means that the application and its binder are launched together. Launching an application remotely translates in only launching the application binder. The UI by itself has to be activated remotely by a request (i.e. HTML5 homescreen in a browser). Once launched, running instances of the application receive a runid that identifies them. afm-user-daemon manages the list of applications that it has launched. When owning the right permissions, a client can get the list of running instances and details about a specific running instance. It can also terminate, stop or continue a given application. If the client owns the right permissions, afm-user-daemon delegates the task of installing and uninstalling applications to afm-system-daemon . afm-user-daemon is launched as a systemd service attached to a user session. Normally, the service file is located at /usr/lib/systemd/user/afm-user-daemon.service. Attacker goals: Disable afm-user-daemon . Tamper with the afm-user-daemon configuration. /usr/lib/systemd/user/afm-user-daemon.service. Application(widget) config.xml file. /etc/afm/afm-launch.conf (launcher configuration). Escalate user privileges to gain more access with afm-user-daemon . Install malicious application (widget). Tamper with afm-user-daemon on disk or in memory.","title":"Resource: afm-user-daemon"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#resource-afm-system-daemon","text":"The afm-system-daemon is in charge of installing applications on the AGL system. Its main tasks are: Install applications and setup security framework for newly installed applications. Uninstall applications. afm-system-daemon is launched as a systemd service attached to system. Normally, the service file is located at /lib/systemd/system/afm-systemdaemon.service. Attacker goals: Disable afm-system-daemon . Tamper with the afm-system-daemon configuration. Tamper afm-system-daemon on disk or in memory.","title":"Resource: afm-system-daemon"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.5_Application_framework/#resource-afb-daemon","text":"afb-binder is in charge of serving resources and features through an HTTP interface. afb-daemon is in charge of binding one instance of an application to the AGL framework and AGL system. The application and its companion binder run in a secured and isolated environment set for them. Applications are intended to access to AGL system through the binder. afb-daemon binders serve files through HTTP protocol and offers developers the capability to expose application API methods through HTTP or WebSocket protocol. Binder bindings are used to add APIs to afb-daemon . The user can write a binding for afb-daemon . The binder afb-daemon serves multiple purposes: It acts as a gateway for the application to access the system. It acts as an HTTP server for serving files to HTML5 applications. It allows HTML5 applications to have native extensions subject to security enforcement for accessing hardware resources or for speeding up parts of algorithm. Attacker goals: Break from isolation. Disable afb-daemon . Tamper afb-demon on disk or in memory. Tamper capabilities by creating/installing custom bindings for afb-daemon .","title":"Resource afb-daemon"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.6_Utilities/","text":"Utilities busybox : Software that provides several stripped-down Unix tools in a single executable file. Of course, it will be necessary to use a \"production\" version of busybox in order to avoid all the tools useful only in development mode. Domain Tool name State Platform-Utilities-1 busybox Used to provide a number of tools. Do not compile development tools. Functionalities to exclude in production mode In production mode, a number of tools must be disabled to prevent an attacker from finding logs for example. This is useful to limit the visible surface and thus complicate the fault finding process. The tools used only in development mode are marked by an ' agl-devel ' feature. When building in production mode, these tools will not be compiled. Domain Utility name and normal path State Platform-Utilities-1 chgrp in /bin/chgrp Disabled Platform-Utilities-2 chmod in /bin/chmod Disabled Platform-Utilities-3 chown in /bin/chown Disabled Platform-Utilities-4 dmesg in /bin/dmesg Disabled Platform-Utilities-5 Dnsdomainname in /bin/dnsdomainname Disabled Platform-Utilities-6 dropbear , Remove \"dropbear\" from /etc/init.d/rcs Disabled Platform-Utilities-7 Editors in (vi) /bin/vi Disabled Platform-Utilities-8 find in /bin/find Disabled Platform-Utilities-9 gdbserver in /bin/gdbserver Disabled Platform-Utilities-10 hexdump in /bin/hexdump Disabled Platform-Utilities-11 hostname in /bin/hostname Disabled Platform-Utilities-12 install in /bin/install Disabled Platform-Utilities-13 iostat in /bin/iostat Disabled Platform-Utilities-14 killall in /bin/killall Disabled Platform-Utilities-15 klogd in /sbin/klogd Disabled Platform-Utilities-16 logger in /bin/logger Disabled Platform-Utilities-17 lsmod in /sbin/lsmod Disabled Platform-Utilities-18 pmap in /bin/pmap Disabled Platform-Utilities-19 ps in /bin/ps Disabled Platform-Utilities-20 ps in /bin/ps Disabled Platform-Utilities-21 rpm in /bin/rpm Disabled Platform-Utilities-22 SSH Disabled Platform-Utilities-23 stbhotplug in /sbin/stbhotplug Disabled Platform-Utilities-24 strace in /bin/trace Disabled Platform-Utilities-25 su in /bin/su Disabled Platform-Utilities-26 syslogd in (logger) /bin/logger Disabled Platform-Utilities-27 top in /bin/top Disabled Platform-Utilities-28 UART in /proc/tty/driver/ Disabled Platform-Utilities-29 which in /bin/which Disabled Platform-Utilities-30 who and whoami in /bin/whoami Disabled Platform-Utilities-31 awk (busybox) Enabled Platform-Utilities-32 cut (busybox) Enabled Platform-Utilities-33 df (busybox) Enabled Platform-Utilities-34 echo (busybox) Enabled Platform-Utilities-35 fdisk (busybox) Enabled Platform-Utilities-36 grep (busybox) Enabled Platform-Utilities-37 mkdir (busybox) Enabled Platform-Utilities-38 mount (vfat) (busybox) Enabled Platform-Utilities-39 printf (busybox) Enabled Platform-Utilities-40 sed in /bin/sed (busybox) Enabled Platform-Utilities-41 tail (busybox) Enabled Platform-Utilities-42 tee (busybox) Enabled Platform-Utilities-43 test (busybox) Enabled The Enabled Unix/Linux utilities above shall be permitted as they are often used in the start-up scripts and for USB logging. If any of these utilities are not required by the device then those should be removed.","title":"Utilities"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.6_Utilities/#utilities","text":"busybox : Software that provides several stripped-down Unix tools in a single executable file. Of course, it will be necessary to use a \"production\" version of busybox in order to avoid all the tools useful only in development mode. Domain Tool name State Platform-Utilities-1 busybox Used to provide a number of tools. Do not compile development tools.","title":"Utilities"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.6_Utilities/#functionalities-to-exclude-in-production-mode","text":"In production mode, a number of tools must be disabled to prevent an attacker from finding logs for example. This is useful to limit the visible surface and thus complicate the fault finding process. The tools used only in development mode are marked by an ' agl-devel ' feature. When building in production mode, these tools will not be compiled. Domain Utility name and normal path State Platform-Utilities-1 chgrp in /bin/chgrp Disabled Platform-Utilities-2 chmod in /bin/chmod Disabled Platform-Utilities-3 chown in /bin/chown Disabled Platform-Utilities-4 dmesg in /bin/dmesg Disabled Platform-Utilities-5 Dnsdomainname in /bin/dnsdomainname Disabled Platform-Utilities-6 dropbear , Remove \"dropbear\" from /etc/init.d/rcs Disabled Platform-Utilities-7 Editors in (vi) /bin/vi Disabled Platform-Utilities-8 find in /bin/find Disabled Platform-Utilities-9 gdbserver in /bin/gdbserver Disabled Platform-Utilities-10 hexdump in /bin/hexdump Disabled Platform-Utilities-11 hostname in /bin/hostname Disabled Platform-Utilities-12 install in /bin/install Disabled Platform-Utilities-13 iostat in /bin/iostat Disabled Platform-Utilities-14 killall in /bin/killall Disabled Platform-Utilities-15 klogd in /sbin/klogd Disabled Platform-Utilities-16 logger in /bin/logger Disabled Platform-Utilities-17 lsmod in /sbin/lsmod Disabled Platform-Utilities-18 pmap in /bin/pmap Disabled Platform-Utilities-19 ps in /bin/ps Disabled Platform-Utilities-20 ps in /bin/ps Disabled Platform-Utilities-21 rpm in /bin/rpm Disabled Platform-Utilities-22 SSH Disabled Platform-Utilities-23 stbhotplug in /sbin/stbhotplug Disabled Platform-Utilities-24 strace in /bin/trace Disabled Platform-Utilities-25 su in /bin/su Disabled Platform-Utilities-26 syslogd in (logger) /bin/logger Disabled Platform-Utilities-27 top in /bin/top Disabled Platform-Utilities-28 UART in /proc/tty/driver/ Disabled Platform-Utilities-29 which in /bin/which Disabled Platform-Utilities-30 who and whoami in /bin/whoami Disabled Platform-Utilities-31 awk (busybox) Enabled Platform-Utilities-32 cut (busybox) Enabled Platform-Utilities-33 df (busybox) Enabled Platform-Utilities-34 echo (busybox) Enabled Platform-Utilities-35 fdisk (busybox) Enabled Platform-Utilities-36 grep (busybox) Enabled Platform-Utilities-37 mkdir (busybox) Enabled Platform-Utilities-38 mount (vfat) (busybox) Enabled Platform-Utilities-39 printf (busybox) Enabled Platform-Utilities-40 sed in /bin/sed (busybox) Enabled Platform-Utilities-41 tail (busybox) Enabled Platform-Utilities-42 tee (busybox) Enabled Platform-Utilities-43 test (busybox) Enabled The Enabled Unix/Linux utilities above shall be permitted as they are often used in the start-up scripts and for USB logging. If any of these utilities are not required by the device then those should be removed.","title":"Functionalities to exclude in production mode"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.7_Users/","text":"Users The user policy can group users by function within the car. For example, we can consider a driver and his passengers. Each user is assigned to a single group to simplify the management of space security. Root Access The main applications, those that provide the principal functionality of the embedded device, should not execute with root identity or any capability. If the main application is allowed to execute at any capability, then the entire system is at the mercy of the said application's good behaviour. Problems arise when an application is compromised and able to execute commands which could consistently and persistently compromise the system by implanting rogue applications. It is suggested that the middleware and the UI should run in a context on a user with no capability and all persistent resources should be maintained without any capability. One way to ensure this is by implementing a server-client paradigm. Services provided by the system's drivers can be shared this way. The other advantage of this approach is that multiple applications can share the same resources at the same time. Domain Object Recommendations Platform-Users-root-1 Main application Should not execute as root. Platform-Users-root-2 UI Should run in a context on a user with no capability. Root access should not be allowed for the following utilities: Domain Utility name State Platform-Users-root-3 login Not allowed Platform-Users-root-4 su Not allowed Platform-Users-root-5 ssh Not allowed Platform-Users-root-6 scp Not allowed Platform-Users-root-7 sftp Not allowed Root access should not be allowed for the console device. The development environment should allow users to login with pre-created user accounts. Switching to elevated privileges shall be allowed in the development environment via sudo . Capabilities Domain Improvement Platform-Users-Capabilities-1 Kernel or Platform-user? Platform-Users-Capabilities-2 Add config note. The goal is to restrict functionality that will not be useful in AGL . They are integrated into the LSM . Each privileged transaction is associated with a capability. These capabilities are divided into three groups: e: Effective: This means the capability is \u201cactivated\u201d. p: Permitted: This means the capability can be used/is allowed. i: Inherited: The capability is kept by child/subprocesses upon execve() for example.","title":"Users"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.7_Users/#users","text":"The user policy can group users by function within the car. For example, we can consider a driver and his passengers. Each user is assigned to a single group to simplify the management of space security.","title":"Users"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.7_Users/#root-access","text":"The main applications, those that provide the principal functionality of the embedded device, should not execute with root identity or any capability. If the main application is allowed to execute at any capability, then the entire system is at the mercy of the said application's good behaviour. Problems arise when an application is compromised and able to execute commands which could consistently and persistently compromise the system by implanting rogue applications. It is suggested that the middleware and the UI should run in a context on a user with no capability and all persistent resources should be maintained without any capability. One way to ensure this is by implementing a server-client paradigm. Services provided by the system's drivers can be shared this way. The other advantage of this approach is that multiple applications can share the same resources at the same time. Domain Object Recommendations Platform-Users-root-1 Main application Should not execute as root. Platform-Users-root-2 UI Should run in a context on a user with no capability. Root access should not be allowed for the following utilities: Domain Utility name State Platform-Users-root-3 login Not allowed Platform-Users-root-4 su Not allowed Platform-Users-root-5 ssh Not allowed Platform-Users-root-6 scp Not allowed Platform-Users-root-7 sftp Not allowed Root access should not be allowed for the console device. The development environment should allow users to login with pre-created user accounts. Switching to elevated privileges shall be allowed in the development environment via sudo .","title":"Root Access"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/5_Platform/1.2.5.7_Users/#capabilities","text":"Domain Improvement Platform-Users-Capabilities-1 Kernel or Platform-user? Platform-Users-Capabilities-2 Add config note. The goal is to restrict functionality that will not be useful in AGL . They are integrated into the LSM . Each privileged transaction is associated with a capability. These capabilities are divided into three groups: e: Effective: This means the capability is \u201cactivated\u201d. p: Permitted: This means the capability can be used/is allowed. i: Inherited: The capability is kept by child/subprocesses upon execve() for example.","title":"Capabilities"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.0_Abstract/","text":"Part 6 - Application Abstract Application Hardening : Best practices to apply to the build and release of user space applications, in order to reduce the number of attack surfaces used by potential attackers. The term of Application (App) has a very wide definition in AGL . Almost anything which is not in the core Operating System (OS) is an Application. Applications can be included in the base software package (image) or can be added at run-time. Application containment is achieved using the following protections: Linux Native protection Mandatory Access Control ( MAC ) AGL Platform protections Origin Tracking and Validation Application Privilege Management and Enforcement via Cynara Authenticated Transport via D-Bus Application Types AGL provides a framework for applications to be written in different forms: Web application: HTML5 + JavaScript Qt application: in a QML file Native application: in C While there is no harm in providing multiple types of applications, from a security perspective this does increase the attack surface for an intruder. The application framework ( AppFw ) consists of a number of utilities and daemons which provide context for the applications. Isolation is provided through SMACK labels. Application Store Although the Tizen system has defined a system of App signing and signing flow to avoid the spread of unauthorized Apps that might contain malware. At this point, it is unclear how much of this flow AGL will adopt. However, judging from the experience, it is an essential topic. For example, the Google Play Store controls the authorization of Apps through signing, and still, there are many accounts of Apps containing malware on the store . Tizen defines 5 levels of certificates and signing at each level, including an author, testing distributor, public level store distributor, partner level store distributor, and platform level store distributor. AGL may define a different number of third parties, but at a minimum an author and store distributor should be defined. Once the number of signatures has been established, verification of those signatures needs to be done at a minimum at installation time on the AGL device. It is important to ensure the robustness/integrity of the public key used for signature verification. If the public key is modified, then this compromised key can be used to verify an attacker's private key signature. Further to this, installation-time verification is limited. Attacks can happen to apps in-memory at runtime. Any modifications made after installation will be missed by installation-time verification. Integrity verification that runs during execution makes for a more complete security story. Acronyms and Abbreviations The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description 3GPP 3 rd G eneration P artnership P roject CASB C loud A ccess S ecurity B roker DAST D ynamic A pplication S ecurity T esting DPI D eep P acket I nspection IDS I ntrusion D etection S ystems IPS I ntrusion P revention S ystems IPSec I nternet P rotocol Sec urity LSM L inux S ecurity M odule MITM M an I n T he M iddle OSI O pen S ystems I nterconnection SATS S tatic A pplication S ecurity T esting","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.0_Abstract/#part-6-application","text":"","title":"Part 6 - Application"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.0_Abstract/#abstract","text":"Application Hardening : Best practices to apply to the build and release of user space applications, in order to reduce the number of attack surfaces used by potential attackers. The term of Application (App) has a very wide definition in AGL . Almost anything which is not in the core Operating System (OS) is an Application. Applications can be included in the base software package (image) or can be added at run-time. Application containment is achieved using the following protections: Linux Native protection Mandatory Access Control ( MAC ) AGL Platform protections Origin Tracking and Validation Application Privilege Management and Enforcement via Cynara Authenticated Transport via D-Bus","title":"Abstract"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.0_Abstract/#application-types","text":"AGL provides a framework for applications to be written in different forms: Web application: HTML5 + JavaScript Qt application: in a QML file Native application: in C While there is no harm in providing multiple types of applications, from a security perspective this does increase the attack surface for an intruder. The application framework ( AppFw ) consists of a number of utilities and daemons which provide context for the applications. Isolation is provided through SMACK labels.","title":"Application Types"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.0_Abstract/#application-store","text":"Although the Tizen system has defined a system of App signing and signing flow to avoid the spread of unauthorized Apps that might contain malware. At this point, it is unclear how much of this flow AGL will adopt. However, judging from the experience, it is an essential topic. For example, the Google Play Store controls the authorization of Apps through signing, and still, there are many accounts of Apps containing malware on the store . Tizen defines 5 levels of certificates and signing at each level, including an author, testing distributor, public level store distributor, partner level store distributor, and platform level store distributor. AGL may define a different number of third parties, but at a minimum an author and store distributor should be defined. Once the number of signatures has been established, verification of those signatures needs to be done at a minimum at installation time on the AGL device. It is important to ensure the robustness/integrity of the public key used for signature verification. If the public key is modified, then this compromised key can be used to verify an attacker's private key signature. Further to this, installation-time verification is limited. Attacks can happen to apps in-memory at runtime. Any modifications made after installation will be missed by installation-time verification. Integrity verification that runs during execution makes for a more complete security story.","title":"Application Store"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.0_Abstract/#acronyms-and-abbreviations","text":"The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description 3GPP 3 rd G eneration P artnership P roject CASB C loud A ccess S ecurity B roker DAST D ynamic A pplication S ecurity T esting DPI D eep P acket I nspection IDS I ntrusion D etection S ystems IPS I ntrusion P revention S ystems IPSec I nternet P rotocol Sec urity LSM L inux S ecurity M odule MITM M an I n T he M iddle OSI O pen S ystems I nterconnection SATS S tatic A pplication S ecurity T esting","title":"Acronyms and Abbreviations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.1_Installation/","text":"Local Domain Improvement Application-Installation-1 Talk about AppFw offline mode. Installation Applications can be delivered and installed with the base image using a special offline-mode provided by the AppFw . Apps can also be installed at run time. During early release, default Apps are installed on the image at first boot. Domain Object Recommendations Application-Installation-1 AppFw Provide offline-mode in order to install app with the base image. Application-Installation-2 Integrity Allow the installation of applications only if their integrity is good.","title":"Installation"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.1_Installation/#local","text":"Domain Improvement Application-Installation-1 Talk about AppFw offline mode.","title":"Local"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.1_Installation/#installation","text":"Applications can be delivered and installed with the base image using a special offline-mode provided by the AppFw . Apps can also be installed at run time. During early release, default Apps are installed on the image at first boot. Domain Object Recommendations Application-Installation-1 AppFw Provide offline-mode in order to install app with the base image. Application-Installation-2 Integrity Allow the installation of applications only if their integrity is good.","title":"Installation"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.2_Privilege_Management/","text":"Local Privilege Management Application privileges are managed by Cynara and the security manager in the AppFw . For more details, please refer to the AppFw documentation in Platform part.","title":"Privilege management"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.2_Privilege_Management/#local","text":"","title":"Local"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.2_Privilege_Management/#privilege-management","text":"Application privileges are managed by Cynara and the security manager in the AppFw . For more details, please refer to the AppFw documentation in Platform part.","title":"Privilege Management"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.3_Signature/","text":"App Signature Domain Improvement Application-Signature-1 Add content (see secure build in Secure development part).","title":"Signature"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.3_Signature/#app-signature","text":"Domain Improvement Application-Signature-1 Add content (see secure build in Secure development part).","title":"App Signature"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.4_Services/","text":"Services Domain Improvement Application-Services-1 Add content (Which services?). Application-Services-2 Add Binder.","title":"Services"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/6_Application/1.2.6.4_Services/#services","text":"Domain Improvement Application-Services-1 Add content (Which services?). Application-Services-2 Add Binder.","title":"Services"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.0_Abstract/","text":"Part 7 - Connectivity Abstract This part shows different Connectivity attacks on the car. Domain Improvement Connectivity-Abstract-1 Improve abstract. Acronyms and Abbreviations The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description ARP A ddress R esolution P rotocol BLE B luetooth L ow E nergy CAN C ar A rea N etwork CCMP C ounter-Mode/ C BC- M ac P rotocol EDGE E nhanced D ata R ates for GSM E volution - Evolution of GPRS GEA G PRS E ncryption A lgorithm GPRS G eneral P acket R adio S ervice (2,5G, 2G+) GSM G lobal S ystem for M obile Communications (2G) HSPA H igh S peed P acket A ccess (3G+) IMEI I nternational M obile E quipment I dentity LIN L ocal I nterconnect N etwork MOST M edia O riented S ystem T ransport NFC N ear F ield C ommunication OBD O n- B oard D iagnostics PATS P assive A nti- T heft S ystem PKE P assive K eyless E ntry PSK P hase- S hift K eying RDS R adio D ata S ystem RFID R adio F requency I dentification RKE R emote K eyless E ntry SDR S oftware D efined R adio SSP S ecure S imple P airing TKIP T emporal K ey I ntegrity P rotocol TPMS T ire P ressure M onitoring S ystem UMTS U niversal M obile T elecommunications S ystem (3G) USB U niversal S erial B us WEP W ired E quivalent P rivacy WPA W ifi P rotected A ccess","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.0_Abstract/#part-7-connectivity","text":"","title":"Part 7 - Connectivity"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.0_Abstract/#abstract","text":"This part shows different Connectivity attacks on the car. Domain Improvement Connectivity-Abstract-1 Improve abstract.","title":"Abstract"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.0_Abstract/#acronyms-and-abbreviations","text":"The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description ARP A ddress R esolution P rotocol BLE B luetooth L ow E nergy CAN C ar A rea N etwork CCMP C ounter-Mode/ C BC- M ac P rotocol EDGE E nhanced D ata R ates for GSM E volution - Evolution of GPRS GEA G PRS E ncryption A lgorithm GPRS G eneral P acket R adio S ervice (2,5G, 2G+) GSM G lobal S ystem for M obile Communications (2G) HSPA H igh S peed P acket A ccess (3G+) IMEI I nternational M obile E quipment I dentity LIN L ocal I nterconnect N etwork MOST M edia O riented S ystem T ransport NFC N ear F ield C ommunication OBD O n- B oard D iagnostics PATS P assive A nti- T heft S ystem PKE P assive K eyless E ntry PSK P hase- S hift K eying RDS R adio D ata S ystem RFID R adio F requency I dentification RKE R emote K eyless E ntry SDR S oftware D efined R adio SSP S ecure S imple P airing TKIP T emporal K ey I ntegrity P rotocol TPMS T ire P ressure M onitoring S ystem UMTS U niversal M obile T elecommunications S ystem (3G) USB U niversal S erial B us WEP W ired E quivalent P rivacy WPA W ifi P rotected A ccess","title":"Acronyms and Abbreviations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.1_Bus_And_Connectors/","text":"Bus We only speak about the CAN bus to take an example, because the different attacks on bus like FlewRay , ByteFlight , Most and Lin use retro engineering and the main argument to improve their security is to encrypt data packets. We just describe them a bit: CAN : Controller Area Network, developed in the early 1980s, is an event-triggered controller network for serial communication with data rates up to one MBit/s. CAN messages are classified over their respective identifier. CAN controller broadcast their messages to all connected nodes and all receiving nodes decide independently if they process the message. FlewRay : Is a deterministic and error-tolerant high-speed bus. With a data rate up to 10 MBit/s. ByteFlight : Is used for safety-critical applications in motor vehicles like air-bags. Byteflight runs at 10Mbps over 2 or 3 wires plastic optical fibers. Most : Media Oriented System Transport, is used for transmitting audio, video, voice, and control data via fiber optic cables. The speed is, for the synchronous way, up to 24 MBit/s and asynchronous way up to 14 MBit/s. MOST messages include always a clear sender and receiver address. LIN : Local Interconnect Network, is a single-wire subnet work for low-cost, serial communication between smart sensors and actuators with typical data rates up to 20 kBit/s. It is intended to be used from the year 2001 on everywhere in a car, where the bandwidth and versatility of a CAN network is not required. On just about every vehicle, ECU s ( E lectronic C ontrol U nits) communicate over a CAN bus, which is a two-wire bus using hardware arbitration for messages sent on the shared medium. This is essentially a trusted network where all traffic is visible to all controllers and any controller can send any message. A malicious ECU on the CAN bus can easily inject messages destined for any other device, including things like the instrument cluster and the head unit. There are common ways for hardware to do USB to CAN and open source software to send and receive messages. For example, there is a driver included in the Linux kernel that can be used to send/receive CAN signals. A malicious device on the CAN bus can cause a great number of harmful things to happen to the system, including: sending bogus information to other devices, sending unintended commands to ECUs, causing DOS (Denial Of Service) on the CAN bus, etc. Domain Tech name Recommendations Connectivity-BusAndConnector-Bus-1 CAN Implement hardware solution in order to prohibit sending unwanted signals. See Security in Automotive Bus Systems for more information. Connectors For the connectors, we supposed that they were disabled by default. For example, the USB must be disabled to avoid attacks like BadUSB. If not, configure the Kernel to only enable the minimum require USB devices. The connectors used to diagnose the car like OBD-II must be disabled outside garages. Domain Tech name Recommendations Connectivity-BusAndConnector-Connectors-1 USB Must be disabled. If not, only enable the minimum require USB devices. Connectivity-BusAndConnector-Connectors-2 USB Confidential data exchanged with the ECU over USB must be secure. Connectivity-BusAndConnector-Connectors-3 USB USB Boot on a ECU must be disable. Connectivity-BusAndConnector-Connectors-4 OBD-II Must be disabled outside garages.","title":"Bus and connectors"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.1_Bus_And_Connectors/#bus","text":"We only speak about the CAN bus to take an example, because the different attacks on bus like FlewRay , ByteFlight , Most and Lin use retro engineering and the main argument to improve their security is to encrypt data packets. We just describe them a bit: CAN : Controller Area Network, developed in the early 1980s, is an event-triggered controller network for serial communication with data rates up to one MBit/s. CAN messages are classified over their respective identifier. CAN controller broadcast their messages to all connected nodes and all receiving nodes decide independently if they process the message. FlewRay : Is a deterministic and error-tolerant high-speed bus. With a data rate up to 10 MBit/s. ByteFlight : Is used for safety-critical applications in motor vehicles like air-bags. Byteflight runs at 10Mbps over 2 or 3 wires plastic optical fibers. Most : Media Oriented System Transport, is used for transmitting audio, video, voice, and control data via fiber optic cables. The speed is, for the synchronous way, up to 24 MBit/s and asynchronous way up to 14 MBit/s. MOST messages include always a clear sender and receiver address. LIN : Local Interconnect Network, is a single-wire subnet work for low-cost, serial communication between smart sensors and actuators with typical data rates up to 20 kBit/s. It is intended to be used from the year 2001 on everywhere in a car, where the bandwidth and versatility of a CAN network is not required. On just about every vehicle, ECU s ( E lectronic C ontrol U nits) communicate over a CAN bus, which is a two-wire bus using hardware arbitration for messages sent on the shared medium. This is essentially a trusted network where all traffic is visible to all controllers and any controller can send any message. A malicious ECU on the CAN bus can easily inject messages destined for any other device, including things like the instrument cluster and the head unit. There are common ways for hardware to do USB to CAN and open source software to send and receive messages. For example, there is a driver included in the Linux kernel that can be used to send/receive CAN signals. A malicious device on the CAN bus can cause a great number of harmful things to happen to the system, including: sending bogus information to other devices, sending unintended commands to ECUs, causing DOS (Denial Of Service) on the CAN bus, etc. Domain Tech name Recommendations Connectivity-BusAndConnector-Bus-1 CAN Implement hardware solution in order to prohibit sending unwanted signals. See Security in Automotive Bus Systems for more information.","title":"Bus"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.1_Bus_And_Connectors/#connectors","text":"For the connectors, we supposed that they were disabled by default. For example, the USB must be disabled to avoid attacks like BadUSB. If not, configure the Kernel to only enable the minimum require USB devices. The connectors used to diagnose the car like OBD-II must be disabled outside garages. Domain Tech name Recommendations Connectivity-BusAndConnector-Connectors-1 USB Must be disabled. If not, only enable the minimum require USB devices. Connectivity-BusAndConnector-Connectors-2 USB Confidential data exchanged with the ECU over USB must be secure. Connectivity-BusAndConnector-Connectors-3 USB USB Boot on a ECU must be disable. Connectivity-BusAndConnector-Connectors-4 OBD-II Must be disabled outside garages.","title":"Connectors"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/","text":"Wireless In this part, we talk about possible remote attacks on a car, according to the different areas of possible attacks. For each communication channels, we describe attacks and how to prevent them with some recommendations. The main recommendation is to always follow the latest updates of these remote communication channels. Domain Object Recommendations Connectivity-Wireless-1 Update Always follow the latest updates of remote communication channels. We will see the following parts: Wifi Bluetooth Cellular Radio NFC Domain Improvement Connectivity-Wireless-1 Add communication channels (RFID, ZigBee?). For existing automotive-specific means, we take examples of existing system attacks from the IOActive document ( A Survey of Remote Automotive Attack Surfaces ) and from the ETH document ( Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars ). Telematics Passive Anti-Theft System (PATS) Tire Pressure Monitoring System (TPMS) Remote Keyless Entry/Start (RKE) Passive Keyless Entry (PKE) Wifi Attacks We can differentiate existing attacks on wifi in two categories: Those on WEP and those on WPA . WEP attacks: FMS : ( F luhrer, M antin and S hamir attack) is a \"Stream cipher attack on the widely used RC4 stream cipher. The attack allows an attacker to recover the key in an RC4 encrypted stream from a large number of messages in that stream.\" KoreK : \"Allows the attacker to reduce the key space\". PTW : ( P yshkin T ews W einmann attack). Chopchop : Found by KoreK, \"Weakness of the CRC32 checksum and the lack of replay protection.\" Fragmentation WPA attacks: Beck and Tews : Exploit weakness in TKIP . \"Allow the attacker to decrypt ARP packets and to inject traffic into a network, even allowing him to perform a DoS or an ARP poisoning\". KRACK : (K)ey (R)einstallation (A)tta(ck) ( jira AGL SPEC-1017 ). Recommendations Do not use WEP , PSK and TKIP . Use WPA2 with CCMP . Should protect data sniffing. Domain Tech name or object Recommendations Connectivity-Wireless-Wifi-1 WEP, PSK, TKIP Disabled Connectivity-Wireless-Wifi-2 WPA2 and AES-CCMP Used Connectivity-Wireless-Wifi-3 WPA2 Should protect data sniffing. Connectivity-Wireless-Wifi-4 PSK Changing regularly the password. Connectivity-Wireless-Wifi-5 Device Upgraded easily in software or firmware to have the last security update. See Wifi attacks WEP WPA and Breaking wep and wpa (Beck and Tews) for more information. Bluetooth Attacks Bluesnarfing attacks involve an attacker covertly gaining access to your Bluetooth-enabled device for the purpose of retrieving information, including addresses, calendar information or even the device's I nternational M obile E quipment I dentity. With the IMEI , an attacker could route your incoming calls to his cell phone. Bluebugging is a form of Bluetooth attack often caused by a lack of awareness. Similar to bluesnarfing, bluebugging accesses and uses all phone features but is limited by the transmitting power of class 2 Bluetooth radios, normally capping its range at 10-15 meters. Bluejacking is the sending of unsolicited messages. BLE : B luetooth L ow E nergy attacks . DoS : Drain a device's battery or temporarily paralyze the phone. Recommendations Not allowing Bluetooth pairing attempts without the driver's first manually placing the vehicle in pairing mode. Monitoring. Use BLE with caution. For v2.1 and later devices using S ecure S imple P airing ( SSP ), avoid using the \"Just Works\" association model. The device must verify that an authenticated link key was generated during pairing. Domain Tech name Recommendations Connectivity-Wireless-Bluetooth-1 BLE Use with caution. Connectivity-Wireless-Bluetooth-2 Bluetooth Monitoring Connectivity-Wireless-Bluetooth-3 SSP Avoid using the \"Just Works\" association model. Connectivity-Wireless-Bluetooth-4 Visibility Configured by default as undiscoverable. Except when needed. Connectivity-Wireless-Bluetooth-5 Anti-scanning Used, inter alia, to slow down brute force attacks. See Low energy and the automotive transformation , Gattacking Bluetooth Smart Devices , Comprehensive Experimental Analyses of Automotive Attack Surfaces and With Low Energy comes Low Security for more information. Cellular Attacks IMSI-Catcher : Is a telephone eavesdropping device used for intercepting mobile phone traffic and tracking location data of mobile phone users. Essentially a \"fake\" mobile tower acting between the target mobile phone and the service provider's real towers, it is considered a man-in-the-middle ( MITM ) attack. Lack of mutual authentication ( GPRS / EDGE ) and encryption with GEA0 . Fall back from UMTS / HSPA to GPRS / EDGE (Jamming against UMTS / HSPA ). 4G DoS attack. Recommendations Check antenna legitimacy. Domain Tech name Recommendations Connectivity-Wireless-Cellular-1 GPRS/EDGE Avoid Connectivity-Wireless-Cellular-2 UMTS/HSPA Protected against Jamming. See A practical attack against GPRS/EDGE/UMTS/HSPA mobile data communications for more information. Radio Attacks Interception of data with low cost material ( SDR with hijacked DVB-T/DAB for example). Recommendations Use the R adio D ata S ystem ( RDS ) only to send signals for audio output and meta concerning radio. Domain Tech name Recommendations Connectivity-Wireless-Radio-1 RDS Only audio output and meta concerning radio. NFC Attacks MITM : Relay and replay attack. Recommendations Should implements protection against relay and replay attacks (Tokens, etc...). Disable unneeded and unapproved services and profiles. NFC should be use encrypted link (secure channel). A standard key agreement protocol like Diffie-Hellmann based on RSA or Elliptic Curves could be applied to establish a shared secret between two devices. Automotive NFC device should be certified by NFC forum entity: The NFC Forum Certification Mark shows that products meet global interoperability standards. NFC Modified Miller coding is preferred over NFC Manchester coding. Domain Tech name Recommendations Connectivity-Wireless-NFC-1 NFC Protected against relay and replay attacks. Connectivity-Wireless-NFC-2 Device Disable unneeded and unapproved services and profiles.","title":"Wireless"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#wireless","text":"In this part, we talk about possible remote attacks on a car, according to the different areas of possible attacks. For each communication channels, we describe attacks and how to prevent them with some recommendations. The main recommendation is to always follow the latest updates of these remote communication channels. Domain Object Recommendations Connectivity-Wireless-1 Update Always follow the latest updates of remote communication channels. We will see the following parts: Wifi Bluetooth Cellular Radio NFC Domain Improvement Connectivity-Wireless-1 Add communication channels (RFID, ZigBee?). For existing automotive-specific means, we take examples of existing system attacks from the IOActive document ( A Survey of Remote Automotive Attack Surfaces ) and from the ETH document ( Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars ). Telematics Passive Anti-Theft System (PATS) Tire Pressure Monitoring System (TPMS) Remote Keyless Entry/Start (RKE) Passive Keyless Entry (PKE)","title":"Wireless"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#wifi","text":"","title":"Wifi"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#attacks","text":"We can differentiate existing attacks on wifi in two categories: Those on WEP and those on WPA . WEP attacks: FMS : ( F luhrer, M antin and S hamir attack) is a \"Stream cipher attack on the widely used RC4 stream cipher. The attack allows an attacker to recover the key in an RC4 encrypted stream from a large number of messages in that stream.\" KoreK : \"Allows the attacker to reduce the key space\". PTW : ( P yshkin T ews W einmann attack). Chopchop : Found by KoreK, \"Weakness of the CRC32 checksum and the lack of replay protection.\" Fragmentation WPA attacks: Beck and Tews : Exploit weakness in TKIP . \"Allow the attacker to decrypt ARP packets and to inject traffic into a network, even allowing him to perform a DoS or an ARP poisoning\". KRACK : (K)ey (R)einstallation (A)tta(ck) ( jira AGL SPEC-1017 ).","title":"Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#recommendations","text":"Do not use WEP , PSK and TKIP . Use WPA2 with CCMP . Should protect data sniffing. Domain Tech name or object Recommendations Connectivity-Wireless-Wifi-1 WEP, PSK, TKIP Disabled Connectivity-Wireless-Wifi-2 WPA2 and AES-CCMP Used Connectivity-Wireless-Wifi-3 WPA2 Should protect data sniffing. Connectivity-Wireless-Wifi-4 PSK Changing regularly the password. Connectivity-Wireless-Wifi-5 Device Upgraded easily in software or firmware to have the last security update. See Wifi attacks WEP WPA and Breaking wep and wpa (Beck and Tews) for more information.","title":"Recommendations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#bluetooth","text":"","title":"Bluetooth"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#attacks_1","text":"Bluesnarfing attacks involve an attacker covertly gaining access to your Bluetooth-enabled device for the purpose of retrieving information, including addresses, calendar information or even the device's I nternational M obile E quipment I dentity. With the IMEI , an attacker could route your incoming calls to his cell phone. Bluebugging is a form of Bluetooth attack often caused by a lack of awareness. Similar to bluesnarfing, bluebugging accesses and uses all phone features but is limited by the transmitting power of class 2 Bluetooth radios, normally capping its range at 10-15 meters. Bluejacking is the sending of unsolicited messages. BLE : B luetooth L ow E nergy attacks . DoS : Drain a device's battery or temporarily paralyze the phone.","title":"Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#recommendations_1","text":"Not allowing Bluetooth pairing attempts without the driver's first manually placing the vehicle in pairing mode. Monitoring. Use BLE with caution. For v2.1 and later devices using S ecure S imple P airing ( SSP ), avoid using the \"Just Works\" association model. The device must verify that an authenticated link key was generated during pairing. Domain Tech name Recommendations Connectivity-Wireless-Bluetooth-1 BLE Use with caution. Connectivity-Wireless-Bluetooth-2 Bluetooth Monitoring Connectivity-Wireless-Bluetooth-3 SSP Avoid using the \"Just Works\" association model. Connectivity-Wireless-Bluetooth-4 Visibility Configured by default as undiscoverable. Except when needed. Connectivity-Wireless-Bluetooth-5 Anti-scanning Used, inter alia, to slow down brute force attacks. See Low energy and the automotive transformation , Gattacking Bluetooth Smart Devices , Comprehensive Experimental Analyses of Automotive Attack Surfaces and With Low Energy comes Low Security for more information.","title":"Recommendations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#cellular","text":"","title":"Cellular"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#attacks_2","text":"IMSI-Catcher : Is a telephone eavesdropping device used for intercepting mobile phone traffic and tracking location data of mobile phone users. Essentially a \"fake\" mobile tower acting between the target mobile phone and the service provider's real towers, it is considered a man-in-the-middle ( MITM ) attack. Lack of mutual authentication ( GPRS / EDGE ) and encryption with GEA0 . Fall back from UMTS / HSPA to GPRS / EDGE (Jamming against UMTS / HSPA ). 4G DoS attack.","title":"Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#recommendations_2","text":"Check antenna legitimacy. Domain Tech name Recommendations Connectivity-Wireless-Cellular-1 GPRS/EDGE Avoid Connectivity-Wireless-Cellular-2 UMTS/HSPA Protected against Jamming. See A practical attack against GPRS/EDGE/UMTS/HSPA mobile data communications for more information.","title":"Recommendations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#radio","text":"","title":"Radio"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#attacks_3","text":"Interception of data with low cost material ( SDR with hijacked DVB-T/DAB for example).","title":"Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#recommendations_3","text":"Use the R adio D ata S ystem ( RDS ) only to send signals for audio output and meta concerning radio. Domain Tech name Recommendations Connectivity-Wireless-Radio-1 RDS Only audio output and meta concerning radio.","title":"Recommendations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#nfc","text":"","title":"NFC"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#attacks_4","text":"MITM : Relay and replay attack.","title":"Attacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.2_Wireless/#recommendations_4","text":"Should implements protection against relay and replay attacks (Tokens, etc...). Disable unneeded and unapproved services and profiles. NFC should be use encrypted link (secure channel). A standard key agreement protocol like Diffie-Hellmann based on RSA or Elliptic Curves could be applied to establish a shared secret between two devices. Automotive NFC device should be certified by NFC forum entity: The NFC Forum Certification Mark shows that products meet global interoperability standards. NFC Modified Miller coding is preferred over NFC Manchester coding. Domain Tech name Recommendations Connectivity-Wireless-NFC-1 NFC Protected against relay and replay attacks. Connectivity-Wireless-NFC-2 Device Disable unneeded and unapproved services and profiles.","title":"Recommendations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.3_Cloud/","text":"Cloud Download authentication : Authentication is the security process that validates the claimed identity of a device, entity or person, relying on one or more characteristics bound to that device, entity or person. Authorization : Parses the network to allow access to some or all network functionality by providing rules and allowing access or denying access based on a subscriber's profile and services purchased. Domain Object Recommendations Application-Cloud-Download-1 authentication Must implement authentication process. Application-Cloud-Download-2 Authorization Must implement Authorization process. Infrastructure Deep Packet Inspection : DPI provides techniques to analyze the payload of each packet, adding an extra layer of security. DPI can detect and neutralize attacks that would be missed by other security mechanisms. A DoS protection in order to avoid that the Infrastructure is no more accessible for a period of time. Scanning tools such as SATS and DAST assessments perform vulnerability scans on the source code and data flows on web applications. Many of these scanning tools run different security tests that stress applications under certain attack scenarios to discover security issues. IDS & IPS : IDS detect and log inappropriate, incorrect, or anomalous activity. IDS can be located in the telecommunications networks and/or within the host server or computer. Telecommunications carriers build intrusion detection capability in all network connections to routers and servers, as well as offering it as a service to enterprise customers. Once IDS systems have identified an attack, IPS ensures that malicious packets are blocked before they cause any harm to backend systems and networks. IDS typically functions via one or more of three systems: Pattern matching. Anomaly detection. Protocol behavior. Domain Object Recommendations Application-Cloud-Infrastructure-1 Packet Should implement a DPI. Application-Cloud-Infrastructure-2 DoS Must implement a DoS protection. Application-Cloud-Infrastructure-3 Test Should implement scanning tools like SATS and DAST. Application-Cloud-Infrastructure-4 Log Should implement security tools (IDS and IPS). Application-Cloud-Infrastructure-5 App integrity Applications must be signed by the code signing authority. Transport For data transport, it is necessary to encrypt data end-to-end . To prevent MITM attacks, no third party should be able to interpret transported data. Another aspect is the data anonymization in order to protect the leakage of private information on the user or any other third party. The use of standards such as IPSec provides \" private and secure communications over IP networks, through the use of cryptographic security services, is a set of protocols using algorithms to transport secure data over an IP network. \". In addition, IPSec operates at the network layer of the OSI model, contrary to previous standards that operate at the application layer. This makes its application independent and means that users do not need to configure each application to IPSec standards. IPSec provides the services below : Confidentiality: A service that makes it impossible to interpret data if it is not the recipient. It is the encryption function that provides this service by transforming intelligible (unencrypted) data into unintelligible (encrypted) data. Authentication: A service that ensures that a piece of data comes from where it is supposed to come from. Integrity: A service that consists in ensuring that data has not been tampered with accidentally or fraudulently. Replay Protection: A service that prevents attacks by re-sending a valid intercepted packet to the network for the same authorization. This service is provided by the presence of a sequence number. Key management: Mechanism for negotiating the length of encryption keys between two IPSec elements and exchange of these keys. An additional means of protection would be to do the monitoring between users and the cloud as a CASB will provide. Domain Object Recommendations Application-Cloud-Transport-1 Integrity, confidentiality and legitimacy Should implement IPSec standards.","title":"Cloud"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.3_Cloud/#cloud","text":"","title":"Cloud"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.3_Cloud/#download","text":"authentication : Authentication is the security process that validates the claimed identity of a device, entity or person, relying on one or more characteristics bound to that device, entity or person. Authorization : Parses the network to allow access to some or all network functionality by providing rules and allowing access or denying access based on a subscriber's profile and services purchased. Domain Object Recommendations Application-Cloud-Download-1 authentication Must implement authentication process. Application-Cloud-Download-2 Authorization Must implement Authorization process.","title":"Download"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.3_Cloud/#infrastructure","text":"Deep Packet Inspection : DPI provides techniques to analyze the payload of each packet, adding an extra layer of security. DPI can detect and neutralize attacks that would be missed by other security mechanisms. A DoS protection in order to avoid that the Infrastructure is no more accessible for a period of time. Scanning tools such as SATS and DAST assessments perform vulnerability scans on the source code and data flows on web applications. Many of these scanning tools run different security tests that stress applications under certain attack scenarios to discover security issues. IDS & IPS : IDS detect and log inappropriate, incorrect, or anomalous activity. IDS can be located in the telecommunications networks and/or within the host server or computer. Telecommunications carriers build intrusion detection capability in all network connections to routers and servers, as well as offering it as a service to enterprise customers. Once IDS systems have identified an attack, IPS ensures that malicious packets are blocked before they cause any harm to backend systems and networks. IDS typically functions via one or more of three systems: Pattern matching. Anomaly detection. Protocol behavior. Domain Object Recommendations Application-Cloud-Infrastructure-1 Packet Should implement a DPI. Application-Cloud-Infrastructure-2 DoS Must implement a DoS protection. Application-Cloud-Infrastructure-3 Test Should implement scanning tools like SATS and DAST. Application-Cloud-Infrastructure-4 Log Should implement security tools (IDS and IPS). Application-Cloud-Infrastructure-5 App integrity Applications must be signed by the code signing authority.","title":"Infrastructure"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/7_Connectivity/1.2.7.3_Cloud/#transport","text":"For data transport, it is necessary to encrypt data end-to-end . To prevent MITM attacks, no third party should be able to interpret transported data. Another aspect is the data anonymization in order to protect the leakage of private information on the user or any other third party. The use of standards such as IPSec provides \" private and secure communications over IP networks, through the use of cryptographic security services, is a set of protocols using algorithms to transport secure data over an IP network. \". In addition, IPSec operates at the network layer of the OSI model, contrary to previous standards that operate at the application layer. This makes its application independent and means that users do not need to configure each application to IPSec standards. IPSec provides the services below : Confidentiality: A service that makes it impossible to interpret data if it is not the recipient. It is the encryption function that provides this service by transforming intelligible (unencrypted) data into unintelligible (encrypted) data. Authentication: A service that ensures that a piece of data comes from where it is supposed to come from. Integrity: A service that consists in ensuring that data has not been tampered with accidentally or fraudulently. Replay Protection: A service that prevents attacks by re-sending a valid intercepted packet to the network for the same authorization. This service is provided by the presence of a sequence number. Key management: Mechanism for negotiating the length of encryption keys between two IPSec elements and exchange of these keys. An additional means of protection would be to do the monitoring between users and the cloud as a CASB will provide. Domain Object Recommendations Application-Cloud-Transport-1 Integrity, confidentiality and legitimacy Should implement IPSec standards.","title":"Transport"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.0_Abstract/","text":"Part 8 - Update ( OTA ) Abstract Updating applications and firmware is essential for the development of new features and even more to fix security bugs. However, if a malicious third party manages to alter the content during transport, it could alter the functioning of the system and/or applications. The security of the updates is therefore a critical point to evaluate in order to guarantee the integrity, the confidentiality and the legitimacy of the transmitted data. Attack Vectors Updates Over The Air are one of the most common points where an attacker will penetrate. An OTA update mechanism is one of the highest threats in the system. If an attacker is able to install his own application or firmware on the system, he can get the same level of access that the original application or firmware had. From that point, the intruder can get unfettered access to the rest of the system, which might include making modifications, downloading other pieces of software, and stealing assets. Man In The Middle (MITM) The man-in-the-middle attack is the most classic example of an attack, where an adversary inserts himself between two communicating entities and grabs whatever is being communicated. In the case of OTA attacks, the connection in the network may be intercepted: On the internet, before the cloud back-end. At the base station, 3G,4G,5G connection to the internet. At the receiving antenna, connection to the car. Between the receiving antenna and the gateway router (if present), connection within the car. Between the gateway router and the target component (IVI, In-Vehicle Infotainment unit). There are many ways to mount a MITM attack. For example, proxy tools like Burp Proxy can be used to intercept web traffic as a man-in-the-middle. Under the guise of being a testing tool, the proxy server is often used in attack scenarios. It runs on a variety of platforms. As another example, false base station attacks are known to be fairly easy to set-up. The problem is apparently fairly prevalent in countries like China and in the UK. These fake base stations are sometimes just eavesdropping on the communication, but others have the potential to do serious harm. Defenses against MITM attacks include encrypted and signed data pipes. Furthermore, architects and developers are also recommended to encrypt and sign the payloads that are being passed over these pipes, to defend against perusal of the data. Man At The End (MATE) The man-at-the-end attack is when an intruder analyzes the end-point of the communication when software is accessing the data communication. This is a more severe attack type where the attacker can: Steal keys. For example, a simple debugging session in running software could reveal a key used in memory. Tamper software. For example, replacing just one function call in software with a NOP (i.e. no operation) can drastically change the behavior of the program. Jam branches of control. For example, making a program take one branch of control rather than the intended branch can mean the difference between an authorized and a non-authorized installation. Modify important data. For example, if the data changed is a key or data leading to a control path, then this attack can be severe. In the case of OTA updates, MATE attacks are particularly problematic for the system. One of the consequences of MATE attacks can be installed software that allows installation of any other software. For example, an attacker might install remote access software to control any part of the system. Acronyms and Abbreviations The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description FOTA F irmware O ver T he A ir MATE M an A t T he E nd MITM M an I n T he M iddle OTA O ver T he A ir SOTA S oftware O ver T he A ir TUF T he U pdate F ramework","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.0_Abstract/#part-8-update-ota","text":"","title":"Part 8 - Update (OTA)"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.0_Abstract/#abstract","text":"Updating applications and firmware is essential for the development of new features and even more to fix security bugs. However, if a malicious third party manages to alter the content during transport, it could alter the functioning of the system and/or applications. The security of the updates is therefore a critical point to evaluate in order to guarantee the integrity, the confidentiality and the legitimacy of the transmitted data.","title":"Abstract"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.0_Abstract/#attack-vectors","text":"Updates Over The Air are one of the most common points where an attacker will penetrate. An OTA update mechanism is one of the highest threats in the system. If an attacker is able to install his own application or firmware on the system, he can get the same level of access that the original application or firmware had. From that point, the intruder can get unfettered access to the rest of the system, which might include making modifications, downloading other pieces of software, and stealing assets.","title":"Attack Vectors"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.0_Abstract/#man-in-the-middle-mitm","text":"The man-in-the-middle attack is the most classic example of an attack, where an adversary inserts himself between two communicating entities and grabs whatever is being communicated. In the case of OTA attacks, the connection in the network may be intercepted: On the internet, before the cloud back-end. At the base station, 3G,4G,5G connection to the internet. At the receiving antenna, connection to the car. Between the receiving antenna and the gateway router (if present), connection within the car. Between the gateway router and the target component (IVI, In-Vehicle Infotainment unit). There are many ways to mount a MITM attack. For example, proxy tools like Burp Proxy can be used to intercept web traffic as a man-in-the-middle. Under the guise of being a testing tool, the proxy server is often used in attack scenarios. It runs on a variety of platforms. As another example, false base station attacks are known to be fairly easy to set-up. The problem is apparently fairly prevalent in countries like China and in the UK. These fake base stations are sometimes just eavesdropping on the communication, but others have the potential to do serious harm. Defenses against MITM attacks include encrypted and signed data pipes. Furthermore, architects and developers are also recommended to encrypt and sign the payloads that are being passed over these pipes, to defend against perusal of the data.","title":"Man In The Middle (MITM)"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.0_Abstract/#man-at-the-end-mate","text":"The man-at-the-end attack is when an intruder analyzes the end-point of the communication when software is accessing the data communication. This is a more severe attack type where the attacker can: Steal keys. For example, a simple debugging session in running software could reveal a key used in memory. Tamper software. For example, replacing just one function call in software with a NOP (i.e. no operation) can drastically change the behavior of the program. Jam branches of control. For example, making a program take one branch of control rather than the intended branch can mean the difference between an authorized and a non-authorized installation. Modify important data. For example, if the data changed is a key or data leading to a control path, then this attack can be severe. In the case of OTA updates, MATE attacks are particularly problematic for the system. One of the consequences of MATE attacks can be installed software that allows installation of any other software. For example, an attacker might install remote access software to control any part of the system.","title":"Man At The End (MATE)"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.0_Abstract/#acronyms-and-abbreviations","text":"The following table lists the terms utilized within this part of the document. Acronyms or Abbreviations Description FOTA F irmware O ver T he A ir MATE M an A t T he E nd MITM M an I n T he M iddle OTA O ver T he A ir SOTA S oftware O ver T he A ir TUF T he U pdate F ramework","title":"Acronyms and Abbreviations"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.1_Firmware_Over_The_Air/","text":"Firmware Over The Air The firmware update is critical since its alteration back to compromise the entire system. It is therefore necessary to take appropriate protective measures. AGL includes the meta-updater Yocto layer that enables OTA software updates via Uptane , an automotive-specific extension to The Update Framework . Uptane and TUF are open standards that define a secure protocol for delivering and verifying updates even when the servers and network--internet and car-internal--aren't fully trusted. meta-updater includes the application aktualizr , developed Advanced Telematic Systems (now part of HERE Technologies) that enables OTA for an ECU. aktualizr combined with Uptane is suitable for updating the firmware, software, and other packages on even functionally critical ECUs. aktualizr can be enabled with the free, open souce backend ota-community-edition . This FOTA update mechanism can be enabled through the agl-sota feature. Building To build an AGL image that uses aktualizr , the following can be used. source meta-agl/scripts/aglsetup.sh -m <machine> agl-sota <other-features...> During the build, meta-updater will use credentials downloaded from ota-community-edition to sign metadata verifying the build as authentic. These signatures are part of the Uptane framework and are used to verify FOTA updates. Atomic Upgrades with Rollbacks aktualizr 's primary method of updating firmware is to use libostree with binary diffs. The binary diffs use the least amout of bandwidth, and by it's nature libostree stores current and previous firmware versions on disk or in flash memory to allow for rollbacks. libostree is a content addressable object store much like git . Versions are specified via SHA2-256. These hashes are signed in the Uptane metadata and are robust against cryptographic compromise.","title":"FOTA"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.1_Firmware_Over_The_Air/#firmware-over-the-air","text":"The firmware update is critical since its alteration back to compromise the entire system. It is therefore necessary to take appropriate protective measures. AGL includes the meta-updater Yocto layer that enables OTA software updates via Uptane , an automotive-specific extension to The Update Framework . Uptane and TUF are open standards that define a secure protocol for delivering and verifying updates even when the servers and network--internet and car-internal--aren't fully trusted. meta-updater includes the application aktualizr , developed Advanced Telematic Systems (now part of HERE Technologies) that enables OTA for an ECU. aktualizr combined with Uptane is suitable for updating the firmware, software, and other packages on even functionally critical ECUs. aktualizr can be enabled with the free, open souce backend ota-community-edition . This FOTA update mechanism can be enabled through the agl-sota feature.","title":"Firmware Over The Air"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.1_Firmware_Over_The_Air/#building","text":"To build an AGL image that uses aktualizr , the following can be used. source meta-agl/scripts/aglsetup.sh -m <machine> agl-sota <other-features...> During the build, meta-updater will use credentials downloaded from ota-community-edition to sign metadata verifying the build as authentic. These signatures are part of the Uptane framework and are used to verify FOTA updates.","title":"Building"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.1_Firmware_Over_The_Air/#atomic-upgrades-with-rollbacks","text":"aktualizr 's primary method of updating firmware is to use libostree with binary diffs. The binary diffs use the least amout of bandwidth, and by it's nature libostree stores current and previous firmware versions on disk or in flash memory to allow for rollbacks. libostree is a content addressable object store much like git . Versions are specified via SHA2-256. These hashes are signed in the Uptane metadata and are robust against cryptographic compromise.","title":"Atomic Upgrades with Rollbacks"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.2_Software_Over_The_Air/","text":"Software Over The Air Software updates in connected vehicles are a very useful feature, which can deliver significant benefits. If not implemented with security in mind, software updates can incur serious vulnerabilities. Any software update system must ensure that not only are the software updates to devices done in a secure way, but also that the repositories and servers hosting these updates are adequately protected. As the process of updating software migrates from a Dealership update model towards an OTA update model, securing these processes becomes a high priority. SOTA is made possible by AppFw (See Platform part). It will be possible to manage in a simple way the packets (i.g. Android like). Domain Improvement Update-SOTA-1 Part to complete.","title":"SOTA"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/8_Update_%28Over_The_Air%29/1.2.8.2_Software_Over_The_Air/#software-over-the-air","text":"Software updates in connected vehicles are a very useful feature, which can deliver significant benefits. If not implemented with security in mind, software updates can incur serious vulnerabilities. Any software update system must ensure that not only are the software updates to devices done in a secure way, but also that the repositories and servers hosting these updates are adequately protected. As the process of updating software migrates from a Dealership update model towards an OTA update model, securing these processes becomes a high priority. SOTA is made possible by AppFw (See Platform part). It will be possible to manage in a simple way the packets (i.g. Android like). Domain Improvement Update-SOTA-1 Part to complete.","title":"Software Over The Air"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/9_Secure_development/1.2.9.0_Abstract/","text":"Part 9 - Secure development In order to save a lot of time in code auditing, developers must follow coding guidelines. Secure build Kernel build Tools like: Code optimisation . Kernel Drivers test with docs . Domain Improvement SecureDev-SecureBuild-1 Add content. App/Widget signatures Domain Improvement SecureDev-Signatures-1 Add content. Code audit These tools are used to check the correct implementation of functionalities and compliance with related good practices. Continuous Code Quality . Domain Improvement SecureDev-CodeAudit-1 Add CVE analyser. SecureDev-CodeAudit-2 OSSTMM . SATS RATS (Maybe to old). Flaw Finder . wiki list . Mathematical approach . It is necessary to verify that the application code does not use functions that are depreciated and recognized as unsecured or cause problems. DATS wiki list .","title":"Introduction"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/9_Secure_development/1.2.9.0_Abstract/#part-9-secure-development","text":"In order to save a lot of time in code auditing, developers must follow coding guidelines.","title":"Part 9 - Secure development"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/9_Secure_development/1.2.9.0_Abstract/#secure-build","text":"","title":"Secure build"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/9_Secure_development/1.2.9.0_Abstract/#kernel-build","text":"Tools like: Code optimisation . Kernel Drivers test with docs . Domain Improvement SecureDev-SecureBuild-1 Add content.","title":"Kernel build"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/9_Secure_development/1.2.9.0_Abstract/#appwidget-signatures","text":"Domain Improvement SecureDev-Signatures-1 Add content.","title":"App/Widget signatures"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/9_Secure_development/1.2.9.0_Abstract/#code-audit","text":"These tools are used to check the correct implementation of functionalities and compliance with related good practices. Continuous Code Quality . Domain Improvement SecureDev-CodeAudit-1 Add CVE analyser. SecureDev-CodeAudit-2 OSSTMM .","title":"Code audit"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/9_Secure_development/1.2.9.0_Abstract/#sats","text":"RATS (Maybe to old). Flaw Finder . wiki list . Mathematical approach . It is necessary to verify that the application code does not use functions that are depreciated and recognized as unsecured or cause problems.","title":"SATS"},{"location":"2_Architecture_Guides/2.2_Security_Blueprint/9_Secure_development/1.2.9.0_Abstract/#dats","text":"wiki list .","title":"DATS"},{"location":"3_Developer_Guides/1_AGL_Layers/1_Overview/","text":"Overview The AGL Project is an automotive-specific development environment that provides a Linux distribution (AGL UCB ). AGL uses layers designed to be compatible with the Yocto Project and the OpenEmbedded Project (OE) . This section provides information about the layers used by the AGL Project: meta-agl : Minimal set of software needed to create an AGL distribution used to boot a system. AGL profiles are built on top of this minimal set of software. meta-agl-demo : Provides a reference or demo platform and applications for the AGL Distribution. The reference UI is part of the meta-agl-demo layer. meta-agl-devel : Contains components under development or being tested. This layer also contains software packages that OEMs need but do not exist in AGL.","title":"Overview"},{"location":"3_Developer_Guides/1_AGL_Layers/1_Overview/#overview","text":"The AGL Project is an automotive-specific development environment that provides a Linux distribution (AGL UCB ). AGL uses layers designed to be compatible with the Yocto Project and the OpenEmbedded Project (OE) . This section provides information about the layers used by the AGL Project: meta-agl : Minimal set of software needed to create an AGL distribution used to boot a system. AGL profiles are built on top of this minimal set of software. meta-agl-demo : Provides a reference or demo platform and applications for the AGL Distribution. The reference UI is part of the meta-agl-demo layer. meta-agl-devel : Contains components under development or being tested. This layer also contains software packages that OEMs need but do not exist in AGL.","title":"Overview"},{"location":"3_Developer_Guides/1_AGL_Layers/2_meta-agl/","text":"Introduction The meta-agl layer provides the minimal set of software to boot an AGL Distribution system. You use this layer as the minimal core on which to build AGL profiles. NOTE: The meta-agl layer does not include a reference UI. The reference UI is included as part of the meta-agl-demo layer. Furthermore, meta-agl does not include additional components, such as security, which are part of the meta-agl-extra layer. Sub-Layers The meta-agl layer itself contains many sub-layers and files. Following is a \"tree\" look at the layer: . \u251c\u2500\u2500 docs \u251c\u2500\u2500 meta-agl \u251c\u2500\u2500 meta-agl-bsp \u251c\u2500\u2500 meta-agl-distro \u251c\u2500\u2500 meta-agl-profile-cluster \u251c\u2500\u2500 meta-agl-profile-cluster-qt5 \u251c\u2500\u2500 meta-agl-profile-core \u251c\u2500\u2500 meta-agl-profile-graphical \u251c\u2500\u2500 meta-agl-profile-graphical-html5 \u251c\u2500\u2500 meta-agl-profile-graphical-qt5 \u251c\u2500\u2500 meta-agl-profile-hud \u251c\u2500\u2500 meta-agl-profile-telematics \u251c\u2500\u2500 meta-app-framework \u251c\u2500\u2500 meta-netboot \u251c\u2500\u2500 meta-security \u251c\u2500\u2500 README-AGL.md \u251c\u2500\u2500 README.md \u251c\u2500\u2500 scripts \u251c\u2500\u2500 templates This list provides some overview information on the files and sub-layers in meta-agl : docs : Contains files that support AGL documentation. meta-agl : Contains layer configuration for the meta-agl layer. meta-agl-bsp : Contains adaptations for recipes and required packages to boot an AGL distribution on targeted hardware and emulation (i.e. QEMU). meta-agl-distro : Contains distro configuration and supporting scripts. meta-agl-profile-cluster : The middleware for the AGL cluster profile. The set of packages required for AGL Cluster Distribution. Profiles include support for Wayland images. meta-agl-profile-cluster-qt5 : The middleware for the AGL Qt5-based cluster profile. The set of packages required for AGL Qt5-based Cluster Distribution. Profiles include support for Wayland images with Qt5. meta-agl-profile-core : Configuration and recipes for the AGL core profiles. meta-agl-profile-graphical : Configuration and recipes supporting graphical user interfaces. meta-agl-profile-graphical-html5 : Configuration and recipes supporting profiles with HTML user interface support. meta-agl-profile-graphical-qt5 : Configuration and recipes supporting profiles with Qt5-based user interface support. meta-agl-profile-hud : Configuration and recipes supporting profiles with Head-Up-Display (HUD) support. meta-agl-profile-telematics : Configuration and recipes supporting profiles with telematics support. meta-app-framework : Configuration and recipes supporting the AGL Application Framework. meta-netboot : Contains recipes and configuration adjustments to allow network boot through network block device (NBD) since network file system (NFS) does not support security labels. meta-security : Configuration and recipes supporting security applications. scripts : AGL development setup and support scripts. templates : Base, feature, and machine templates used in the AGL development environment. Packagegroups This section describes the AGL packagegroup design: packagegroup-agl-image-minimal packagegroup-agl-core-automotive.bb packagegroup-agl-core-connectivity.bb packagegroup-agl-core-graphics.bb packagegroup-agl-core-kernel.bb packagegroup-agl-core-multimedia.bb packagegroup-agl-core-navi-lbs.bb packagegroup-agl-core-os-commonlibs.bb packagegroup-agl-core-security.bb packagegroup-agl-core-speech-services.bb The previous list of Packagegroups are used to create the agl-image-minimal image, which is a small image just capable of allowing a device to boot. Subsystem should maintain packagegroup-agl-core-[subsystem].bb which should hold sufficient packages to build agl-image-minimal . packagegroup-agl-image-ivi packagegroup-agl-ivi-automotive.bb packagegroup-agl-ivi-connectivity.bb packagegroup-agl-ivi-graphics.bb packagegroup-agl-ivi-kernel.bb packagegroup-agl-ivi-multimedia.bb packagegroup-agl-ivi-navi-lbs.bb packagegroup-agl-ivi-os-commonlibs.bb packagegroup-agl-ivi-security.bb packagegroup-agl-ivi-speech-services.bb The previous list of Packagegroups are used to create the agl-image-ivi image, which is a baseline image (i.e. Service Layer and Operating System Layer defined in AGL Spec v1.0) for the AGL profiles. packagegroup-agl-test.bb Additional tools used in QA tests (for agl-image*-qa).","title":"meta-agl"},{"location":"3_Developer_Guides/1_AGL_Layers/2_meta-agl/#introduction","text":"The meta-agl layer provides the minimal set of software to boot an AGL Distribution system. You use this layer as the minimal core on which to build AGL profiles. NOTE: The meta-agl layer does not include a reference UI. The reference UI is included as part of the meta-agl-demo layer. Furthermore, meta-agl does not include additional components, such as security, which are part of the meta-agl-extra layer.","title":"Introduction"},{"location":"3_Developer_Guides/1_AGL_Layers/2_meta-agl/#sub-layers","text":"The meta-agl layer itself contains many sub-layers and files. Following is a \"tree\" look at the layer: . \u251c\u2500\u2500 docs \u251c\u2500\u2500 meta-agl \u251c\u2500\u2500 meta-agl-bsp \u251c\u2500\u2500 meta-agl-distro \u251c\u2500\u2500 meta-agl-profile-cluster \u251c\u2500\u2500 meta-agl-profile-cluster-qt5 \u251c\u2500\u2500 meta-agl-profile-core \u251c\u2500\u2500 meta-agl-profile-graphical \u251c\u2500\u2500 meta-agl-profile-graphical-html5 \u251c\u2500\u2500 meta-agl-profile-graphical-qt5 \u251c\u2500\u2500 meta-agl-profile-hud \u251c\u2500\u2500 meta-agl-profile-telematics \u251c\u2500\u2500 meta-app-framework \u251c\u2500\u2500 meta-netboot \u251c\u2500\u2500 meta-security \u251c\u2500\u2500 README-AGL.md \u251c\u2500\u2500 README.md \u251c\u2500\u2500 scripts \u251c\u2500\u2500 templates This list provides some overview information on the files and sub-layers in meta-agl : docs : Contains files that support AGL documentation. meta-agl : Contains layer configuration for the meta-agl layer. meta-agl-bsp : Contains adaptations for recipes and required packages to boot an AGL distribution on targeted hardware and emulation (i.e. QEMU). meta-agl-distro : Contains distro configuration and supporting scripts. meta-agl-profile-cluster : The middleware for the AGL cluster profile. The set of packages required for AGL Cluster Distribution. Profiles include support for Wayland images. meta-agl-profile-cluster-qt5 : The middleware for the AGL Qt5-based cluster profile. The set of packages required for AGL Qt5-based Cluster Distribution. Profiles include support for Wayland images with Qt5. meta-agl-profile-core : Configuration and recipes for the AGL core profiles. meta-agl-profile-graphical : Configuration and recipes supporting graphical user interfaces. meta-agl-profile-graphical-html5 : Configuration and recipes supporting profiles with HTML user interface support. meta-agl-profile-graphical-qt5 : Configuration and recipes supporting profiles with Qt5-based user interface support. meta-agl-profile-hud : Configuration and recipes supporting profiles with Head-Up-Display (HUD) support. meta-agl-profile-telematics : Configuration and recipes supporting profiles with telematics support. meta-app-framework : Configuration and recipes supporting the AGL Application Framework. meta-netboot : Contains recipes and configuration adjustments to allow network boot through network block device (NBD) since network file system (NFS) does not support security labels. meta-security : Configuration and recipes supporting security applications. scripts : AGL development setup and support scripts. templates : Base, feature, and machine templates used in the AGL development environment.","title":"Sub-Layers"},{"location":"3_Developer_Guides/1_AGL_Layers/2_meta-agl/#packagegroups","text":"This section describes the AGL packagegroup design: packagegroup-agl-image-minimal packagegroup-agl-core-automotive.bb packagegroup-agl-core-connectivity.bb packagegroup-agl-core-graphics.bb packagegroup-agl-core-kernel.bb packagegroup-agl-core-multimedia.bb packagegroup-agl-core-navi-lbs.bb packagegroup-agl-core-os-commonlibs.bb packagegroup-agl-core-security.bb packagegroup-agl-core-speech-services.bb The previous list of Packagegroups are used to create the agl-image-minimal image, which is a small image just capable of allowing a device to boot. Subsystem should maintain packagegroup-agl-core-[subsystem].bb which should hold sufficient packages to build agl-image-minimal . packagegroup-agl-image-ivi packagegroup-agl-ivi-automotive.bb packagegroup-agl-ivi-connectivity.bb packagegroup-agl-ivi-graphics.bb packagegroup-agl-ivi-kernel.bb packagegroup-agl-ivi-multimedia.bb packagegroup-agl-ivi-navi-lbs.bb packagegroup-agl-ivi-os-commonlibs.bb packagegroup-agl-ivi-security.bb packagegroup-agl-ivi-speech-services.bb The previous list of Packagegroups are used to create the agl-image-ivi image, which is a baseline image (i.e. Service Layer and Operating System Layer defined in AGL Spec v1.0) for the AGL profiles. packagegroup-agl-test.bb Additional tools used in QA tests (for agl-image*-qa).","title":"Packagegroups"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/","text":"Introduction The meta-agl-demo layer is the reference user interface layer for the DEMO platform of Automotive Grade Linux (AGL). The layer provides a reference platform and applications. The BitBake target name for the DEMO platform is agl-demo-platform , which is the full DEMO platform image. Layer Dependencies This section describes dependencies for the meta-agl-demo layer. Dependencies are grouped into base, hardware, and feature dependencies. Base Dependencies The meta-agl-demo layer has the following base dependencies: Yocto Project Release: URI: git://git.yoctoproject.org/poky Branch: \"thud\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. AGL meta-agl Layer: URI: https://gerrit.automotivelinux.org/gerrit/AGL/meta-agl Branch: \"master\" OpenEmbedded meta-openembedded Layer: Branch: \"thud\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. Specifically, out of meta-openembedded , these sub-layers are used: meta-oe meta-multimedia meta-networking meta-python Yocto Project meta-qt5 Layer from the OpenEmbedded Layer Index : URI: https://github.com/meta-qt5/meta-qt5.git Branch: \"thud\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. Hardware Dependencies Aside from the previously listed base dependencies, if you are using a supported Renesas board supported Renesas board, these dependencies exist: AGL's meta-renesas Layer: URI: https://gerrit.automotivelinux.org/gerrit/AGL/meta-renesas Feature Dependencies The meta-agl-demo layer has the following AGL feature dependencies: Yocto Project meta-security Layer: URI: https://git.yoctoproject.org/cgit/cgit.cgi/meta-security Branch: \"master\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. AGL's meta-app-framework Layer within the meta-agl Layer: URI: https://gerrit.automotivelinux.org/gerrit/gitweb?p=AGL/meta-agl.git Branch: \"master\" The agl-sota Feature: Here Technologies' meta-updater Layer: URI: https://github.com/advancedtelematic/meta-updater/ Branch: \"thud\" Here Technologies' meta-updater-qemux86-64 Layer: URI: https://github.com/advancedtelematic/meta-updater-qemux86-64/ Branch: \"thud\" OpenEmbedded's meta-openembedded Layer: URI: https://github.com/openembedded/meta-openembedded Branch: \"thud\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. Specifically, out of meta-openembedded , these sub-layers are used: meta-filesystems meta-oe meta-python The agl-netboot Feature: AGL's meta-netboot Layer within the meta-agl Layer: URI: https://gerrit.automotivelinux.org/gerrit/gitweb?p=AGL/meta-agl.git Branch: \"master\" Packagegroups AGL DEMO Platform's packagegroups consist of the following: packagegroup-agl-demo-platform This packagegroup is used for generating the agl-demo-platform image, which is the full image for the AGL distributions IVI profile. You can see the recipe (i.e. agl-demo-platform.bb ) that installs the packagegroup-agl-demo-platform packagegroup here . As meta-agl's design of packagegroups, the agl-demo-platform.bb recipe installs only packagegroup-agl-demo-platform and the packages of the DEMO applications. agl-demo-platform contains the following three packagegroups: packagegroup-agl-image-minimal packagegroup-agl-image-ivi packagegroup-agl-demo-platform packagegroup-agl-appfw* These packagegroups contain packages for the AGL distribution's Application Framework. Subsystem should maintain packagegroup-agl-appfw-[subsystem].bb , which should hold sufficient packages for the Application Framework. Subsystems also can maintain their own packagegroups using appropriate recipes-*/ . For example, Qt5 has two packagegroups in meta-agl-demo : packagegroup-agl-appfw-native-qt5 and packagegroup-agl-demo-qt-examples , which are under recipes-qt/ . The packagegroup-agl-appfw-native-qt5 is included by packagegroup-agl-appfw-native because Qt5 belongs to native application framework of AGL Distro. Because the packagegroup-agl-demo-qt-examples is not mandatory for the AGL Application Framework and the AGL DEMO, the packagegroup is added to the layer's local.conf file only when needed.","title":"meta-agl-demo"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/#introduction","text":"The meta-agl-demo layer is the reference user interface layer for the DEMO platform of Automotive Grade Linux (AGL). The layer provides a reference platform and applications. The BitBake target name for the DEMO platform is agl-demo-platform , which is the full DEMO platform image.","title":"Introduction"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/#layer-dependencies","text":"This section describes dependencies for the meta-agl-demo layer. Dependencies are grouped into base, hardware, and feature dependencies.","title":"Layer Dependencies"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/#base-dependencies","text":"The meta-agl-demo layer has the following base dependencies: Yocto Project Release: URI: git://git.yoctoproject.org/poky Branch: \"thud\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. AGL meta-agl Layer: URI: https://gerrit.automotivelinux.org/gerrit/AGL/meta-agl Branch: \"master\" OpenEmbedded meta-openembedded Layer: Branch: \"thud\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. Specifically, out of meta-openembedded , these sub-layers are used: meta-oe meta-multimedia meta-networking meta-python Yocto Project meta-qt5 Layer from the OpenEmbedded Layer Index : URI: https://github.com/meta-qt5/meta-qt5.git Branch: \"thud\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information.","title":"Base Dependencies"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/#hardware-dependencies","text":"Aside from the previously listed base dependencies, if you are using a supported Renesas board supported Renesas board, these dependencies exist: AGL's meta-renesas Layer: URI: https://gerrit.automotivelinux.org/gerrit/AGL/meta-renesas","title":"Hardware Dependencies"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/#feature-dependencies","text":"The meta-agl-demo layer has the following AGL feature dependencies: Yocto Project meta-security Layer: URI: https://git.yoctoproject.org/cgit/cgit.cgi/meta-security Branch: \"master\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. AGL's meta-app-framework Layer within the meta-agl Layer: URI: https://gerrit.automotivelinux.org/gerrit/gitweb?p=AGL/meta-agl.git Branch: \"master\" The agl-sota Feature: Here Technologies' meta-updater Layer: URI: https://github.com/advancedtelematic/meta-updater/ Branch: \"thud\" Here Technologies' meta-updater-qemux86-64 Layer: URI: https://github.com/advancedtelematic/meta-updater-qemux86-64/ Branch: \"thud\" OpenEmbedded's meta-openembedded Layer: URI: https://github.com/openembedded/meta-openembedded Branch: \"thud\" Tested Revision: See the default.xml manifest file for the AGL-repo repository for revision information. Specifically, out of meta-openembedded , these sub-layers are used: meta-filesystems meta-oe meta-python The agl-netboot Feature: AGL's meta-netboot Layer within the meta-agl Layer: URI: https://gerrit.automotivelinux.org/gerrit/gitweb?p=AGL/meta-agl.git Branch: \"master\"","title":"Feature Dependencies"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/#packagegroups","text":"AGL DEMO Platform's packagegroups consist of the following:","title":"Packagegroups"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/#packagegroup-agl-demo-platform","text":"This packagegroup is used for generating the agl-demo-platform image, which is the full image for the AGL distributions IVI profile. You can see the recipe (i.e. agl-demo-platform.bb ) that installs the packagegroup-agl-demo-platform packagegroup here . As meta-agl's design of packagegroups, the agl-demo-platform.bb recipe installs only packagegroup-agl-demo-platform and the packages of the DEMO applications. agl-demo-platform contains the following three packagegroups: packagegroup-agl-image-minimal packagegroup-agl-image-ivi packagegroup-agl-demo-platform","title":"packagegroup-agl-demo-platform"},{"location":"3_Developer_Guides/1_AGL_Layers/3_meta-agl-demo/#packagegroup-agl-appfw","text":"These packagegroups contain packages for the AGL distribution's Application Framework. Subsystem should maintain packagegroup-agl-appfw-[subsystem].bb , which should hold sufficient packages for the Application Framework. Subsystems also can maintain their own packagegroups using appropriate recipes-*/ . For example, Qt5 has two packagegroups in meta-agl-demo : packagegroup-agl-appfw-native-qt5 and packagegroup-agl-demo-qt-examples , which are under recipes-qt/ . The packagegroup-agl-appfw-native-qt5 is included by packagegroup-agl-appfw-native because Qt5 belongs to native application framework of AGL Distro. Because the packagegroup-agl-demo-qt-examples is not mandatory for the AGL Application Framework and the AGL DEMO, the packagegroup is added to the layer's local.conf file only when needed.","title":"packagegroup-agl-appfw*"},{"location":"3_Developer_Guides/1_AGL_Layers/4_meta-agl-devel/","text":"Introduction The meta-agl-devel layer contains components that are being tested or still in development. The layer also contains software packages that Original Equipment Manufacturers (OEMs) need but are not included in the AGL software. Sub-Layers The meta-agl-devel layer contains the following files and sub-layers: . \u251c\u2500\u2500 meta-agl-telemetry \u251c\u2500\u2500 meta-audio-4a-framework \u251c\u2500\u2500 meta-audio-soundmanager-framework \u251c\u2500\u2500 meta-egvirt \u251c\u2500\u2500 meta-gstrecorder-rcar-gen3 \u251c\u2500\u2500 meta-hmi-framework \u251c\u2500\u2500 meta-oem-extra-libs \u251c\u2500\u2500 README.md \u251c\u2500\u2500 templates The following list provides a summary of these sub-layers: meta-agl-telemetry : Provides the smallest AGL image. The image is designed to be used when a device requires restricted scope of responsibilites (e.g. collecting vehicle telemetry). meta-audio-4a-framework : A collection of recipes used for the first integration of 4A (i.e. Advanced AGL Audio Architecture). meta-pipewire : A collection of recipes used for the integration of the pipewire sound system. meta-audio-soundmanager-framework : Supports the Soundmanager Audio Framework features, which maps to the agl-audio-soundmanager-framework AGL feature. meta-egvirt : The AGL Virtualization Expert Group (EG-VIRT) layer. This layer supports the design, test, implementation, and assessment of virtualization technologies (e.g. containers, hypervisors, system partitioners, and so forth) aimed at AGL ARMv8 and Intel platforms. meta-gstrecorder-rcar-gen3 : Supports streaming audio and video for the Pro and Premier board kits (e.g. Renesas R-Car Starter Kit Pro Board and Renesas R-Car Starter Kit Premier Board ). meta-hmi-framework : Provides AGL's Human Machine Interface (HMI) framework through resource management consisting of sounds, windows, and input control. For more information, see the HMI-Framework Page of the AGL Wiki. meta-oem-extra-libs : Provides libraries and software packages needed by OEMs but not provided by the AGL software. templates : Feature templates that support the meta-agl-devel layer. Additional Sub-Layer Information This section provides additional information for the meta-egvirt , meta-oem-extra-libs , and meta-hmi-framework layers. Virtualization Support The meta-egvirt layer enables virtualization support in AGL. The AGL Virtualization Expert (EG-VIRT) group is responsible for design and implementation of AGL virtualization solutions (.e.g the Virtualization platform architecture of AGL). You can read about EG-VERT's efforts on the \" Virtualization Expert Group's \" page of the AGL wiki. Additionally, you can learn more about virtualization as it applies to AGL by reading \" The Automotive Grade Linux Software Defined Connected Car Architecture \" whitepaper. OEM Extra Libraries The meta-oem-extra-libs layer provides additional software packages many OEMs need but are not part of the AGL source. Following is the list of packages this layer provides: boost fixesproto imagemagick iptables Xorg-macros zlib eglibc = glibc libcurl libgif libneon mongoose fuse protocol buffers bsdiff module-init-tools libcroco libtiff librsvg libpcap To add these packages to your library, you need to include the agl-oem-extra-libs AGL feature when you initialize your build environment using the aglsetup.sh script. For information on how to use the aglsetup.sh script to initialize your build environment, see the \" Initializing Your Build Environment \" section. Once you have included the AGL feature, you can build your image. HMI Framework The meta-hmi-framework layer supports the Human-Machine Interface (HMI) Framework. The HMI-Framework is the User Interface (UI) to control the Infotainment System. Work continues to close the gap between the user experience of a smart phone and the Infotainment System in a vehicle, for example. You can find more out about HMI Framework progress on the \" HMI Framework \" page on the AGL Wiki. To add HMI Framework support to your image, you need to include the hmi-framework AGL feature when you initialize your build environment using the aglsetup.sh script. For information on how to use the aglsetup.sh script to initialize your build environment, see the \" Initializing Your Build Environment \" section. Once you have included the AGL feature, you can build your image.","title":"meta-agl-devel"},{"location":"3_Developer_Guides/1_AGL_Layers/4_meta-agl-devel/#introduction","text":"The meta-agl-devel layer contains components that are being tested or still in development. The layer also contains software packages that Original Equipment Manufacturers (OEMs) need but are not included in the AGL software.","title":"Introduction"},{"location":"3_Developer_Guides/1_AGL_Layers/4_meta-agl-devel/#sub-layers","text":"The meta-agl-devel layer contains the following files and sub-layers: . \u251c\u2500\u2500 meta-agl-telemetry \u251c\u2500\u2500 meta-audio-4a-framework \u251c\u2500\u2500 meta-audio-soundmanager-framework \u251c\u2500\u2500 meta-egvirt \u251c\u2500\u2500 meta-gstrecorder-rcar-gen3 \u251c\u2500\u2500 meta-hmi-framework \u251c\u2500\u2500 meta-oem-extra-libs \u251c\u2500\u2500 README.md \u251c\u2500\u2500 templates The following list provides a summary of these sub-layers: meta-agl-telemetry : Provides the smallest AGL image. The image is designed to be used when a device requires restricted scope of responsibilites (e.g. collecting vehicle telemetry). meta-audio-4a-framework : A collection of recipes used for the first integration of 4A (i.e. Advanced AGL Audio Architecture). meta-pipewire : A collection of recipes used for the integration of the pipewire sound system. meta-audio-soundmanager-framework : Supports the Soundmanager Audio Framework features, which maps to the agl-audio-soundmanager-framework AGL feature. meta-egvirt : The AGL Virtualization Expert Group (EG-VIRT) layer. This layer supports the design, test, implementation, and assessment of virtualization technologies (e.g. containers, hypervisors, system partitioners, and so forth) aimed at AGL ARMv8 and Intel platforms. meta-gstrecorder-rcar-gen3 : Supports streaming audio and video for the Pro and Premier board kits (e.g. Renesas R-Car Starter Kit Pro Board and Renesas R-Car Starter Kit Premier Board ). meta-hmi-framework : Provides AGL's Human Machine Interface (HMI) framework through resource management consisting of sounds, windows, and input control. For more information, see the HMI-Framework Page of the AGL Wiki. meta-oem-extra-libs : Provides libraries and software packages needed by OEMs but not provided by the AGL software. templates : Feature templates that support the meta-agl-devel layer.","title":"Sub-Layers"},{"location":"3_Developer_Guides/1_AGL_Layers/4_meta-agl-devel/#additional-sub-layer-information","text":"This section provides additional information for the meta-egvirt , meta-oem-extra-libs , and meta-hmi-framework layers.","title":"Additional Sub-Layer Information"},{"location":"3_Developer_Guides/1_AGL_Layers/4_meta-agl-devel/#virtualization-support","text":"The meta-egvirt layer enables virtualization support in AGL. The AGL Virtualization Expert (EG-VIRT) group is responsible for design and implementation of AGL virtualization solutions (.e.g the Virtualization platform architecture of AGL). You can read about EG-VERT's efforts on the \" Virtualization Expert Group's \" page of the AGL wiki. Additionally, you can learn more about virtualization as it applies to AGL by reading \" The Automotive Grade Linux Software Defined Connected Car Architecture \" whitepaper.","title":"Virtualization Support"},{"location":"3_Developer_Guides/1_AGL_Layers/4_meta-agl-devel/#oem-extra-libraries","text":"The meta-oem-extra-libs layer provides additional software packages many OEMs need but are not part of the AGL source. Following is the list of packages this layer provides: boost fixesproto imagemagick iptables Xorg-macros zlib eglibc = glibc libcurl libgif libneon mongoose fuse protocol buffers bsdiff module-init-tools libcroco libtiff librsvg libpcap To add these packages to your library, you need to include the agl-oem-extra-libs AGL feature when you initialize your build environment using the aglsetup.sh script. For information on how to use the aglsetup.sh script to initialize your build environment, see the \" Initializing Your Build Environment \" section. Once you have included the AGL feature, you can build your image.","title":"OEM Extra Libraries"},{"location":"3_Developer_Guides/1_AGL_Layers/4_meta-agl-devel/#hmi-framework","text":"The meta-hmi-framework layer supports the Human-Machine Interface (HMI) Framework. The HMI-Framework is the User Interface (UI) to control the Infotainment System. Work continues to close the gap between the user experience of a smart phone and the Infotainment System in a vehicle, for example. You can find more out about HMI Framework progress on the \" HMI Framework \" page on the AGL Wiki. To add HMI Framework support to your image, you need to include the hmi-framework AGL feature when you initialize your build environment using the aglsetup.sh script. For information on how to use the aglsetup.sh script to initialize your build environment, see the \" Initializing Your Build Environment \" section. Once you have included the AGL feature, you can build your image.","title":"HMI Framework"},{"location":"4_APIs_and_Services/4.1_API_Reference/0_api-introduction/","text":"Available APIs Introduction of Available APIs with categorization. If multiple categories apply, they will all be listed in the third column (e.g. first row in the following). API Description Profile agl-service-audiomixer Audio Mixer API agl-service-bluetooth bluetooth binding Infotainment agl-service-bluetooth-avrcp AGL service that allow multimedia control over Bluetooth AVRCP profile Infotainment agl-service-bluetooth-pbap Bluetooth Phone Book Access Protocoll service Infotainment agl-service-can-low-level Low level CAN service made to decode and write on CAN bus. Instrument Cluster agl-service-data-persistence AGL binding for data persistence Instrument Cluster agl-service-geoclue AGL Geoclue service to backup GPS positioning with network-based positioning Infotainment agl-service-geofence AGL geofence binding to signal vehicle POI bounding box events Infotainment agl-service-gps GPS binding Infotainment agl-service-gstreamer (deprecated) GStreamer binding for multimedia control and playback Infotainment agl-service-harvester V2C interface that collect data to TimeSeries database agl-service-homescreen Applications need a new binding to communicate with homescreen Infotainment agl-service-homescreen-2017 Binding for applications to communicate with the homescreen-2017 Infotainment agl-service-hvac Unnamed repository agl-service-identity-agent Identity Agent agl-service-iiodevices iiodevices support Telematics/Connectivity agl-service-mediaplayer AGL Media Player service that allows applications to control playing media. Infotainment agl-service-mediascanner AGL Media Scanning service that allows applications to detect and index media at... Telematics/Connectivity agl-service-navigation Navigation API with binding Infotainment agl-service-network AGL Network service providing support for management of networking interfaces in... agl-service-nfc AGL service NFC binding agl-service-radio radio binding agl-service-signal-composer AGL High Level Signaling service to handle CAN, LIN, and others signaling source... Instrument Cluster agl-service-soundmanager Binding for applications to communicate with the soundmanager agl-service-soundmanager-2017 Binding for applications to communicate with the soundmanager-2017 agl-service-speech AGL App Framework Binding for Speech Services Telematics/Connectivity agl-service-steering-wheel And binding service for steering wheel demo Instrument Cluster agl-service-taskmanager Simple taskmanager service to retrieve data from procps agl-service-telephony Unnamed repository agl-service-unicens Infotainment network setup and access (using Unified Centralized Network Stack) Infotainment agl-service-weather AGL binding that uses OpenWeathermap data to display current conditions on Homes... Telematics/Connectivity agl-service-wifi wifi binding Telematics/Connectivity agl-service-windowmanager Binding for applications to communicate with the windowmanager agl-service-windowmanager-2017 Binding for applications to communicate with the windowmanager-2017 agl-service-xds AGL binding used to control collected data from AGL supervision. (empty) agl-service-xds-monitoring UNDER DEVELOPMENT","title":"API Reference"},{"location":"4_APIs_and_Services/4.1_API_Reference/0_api-introduction/#available-apis","text":"Introduction of Available APIs with categorization. If multiple categories apply, they will all be listed in the third column (e.g. first row in the following). API Description Profile agl-service-audiomixer Audio Mixer API agl-service-bluetooth bluetooth binding Infotainment agl-service-bluetooth-avrcp AGL service that allow multimedia control over Bluetooth AVRCP profile Infotainment agl-service-bluetooth-pbap Bluetooth Phone Book Access Protocoll service Infotainment agl-service-can-low-level Low level CAN service made to decode and write on CAN bus. Instrument Cluster agl-service-data-persistence AGL binding for data persistence Instrument Cluster agl-service-geoclue AGL Geoclue service to backup GPS positioning with network-based positioning Infotainment agl-service-geofence AGL geofence binding to signal vehicle POI bounding box events Infotainment agl-service-gps GPS binding Infotainment agl-service-gstreamer (deprecated) GStreamer binding for multimedia control and playback Infotainment agl-service-harvester V2C interface that collect data to TimeSeries database agl-service-homescreen Applications need a new binding to communicate with homescreen Infotainment agl-service-homescreen-2017 Binding for applications to communicate with the homescreen-2017 Infotainment agl-service-hvac Unnamed repository agl-service-identity-agent Identity Agent agl-service-iiodevices iiodevices support Telematics/Connectivity agl-service-mediaplayer AGL Media Player service that allows applications to control playing media. Infotainment agl-service-mediascanner AGL Media Scanning service that allows applications to detect and index media at... Telematics/Connectivity agl-service-navigation Navigation API with binding Infotainment agl-service-network AGL Network service providing support for management of networking interfaces in... agl-service-nfc AGL service NFC binding agl-service-radio radio binding agl-service-signal-composer AGL High Level Signaling service to handle CAN, LIN, and others signaling source... Instrument Cluster agl-service-soundmanager Binding for applications to communicate with the soundmanager agl-service-soundmanager-2017 Binding for applications to communicate with the soundmanager-2017 agl-service-speech AGL App Framework Binding for Speech Services Telematics/Connectivity agl-service-steering-wheel And binding service for steering wheel demo Instrument Cluster agl-service-taskmanager Simple taskmanager service to retrieve data from procps agl-service-telephony Unnamed repository agl-service-unicens Infotainment network setup and access (using Unified Centralized Network Stack) Infotainment agl-service-weather AGL binding that uses OpenWeathermap data to display current conditions on Homes... Telematics/Connectivity agl-service-wifi wifi binding Telematics/Connectivity agl-service-windowmanager Binding for applications to communicate with the windowmanager agl-service-windowmanager-2017 Binding for applications to communicate with the windowmanager-2017 agl-service-xds AGL binding used to control collected data from AGL supervision. (empty) agl-service-xds-monitoring UNDER DEVELOPMENT","title":"Available APIs"},{"location":"5_How_To_Contribute/1_Getting_Linux_Foundation_account/","text":"In order to participate in the development of the Automotive Grade Linux project, you will need a Linux Foundation account. You will need to use your LF ID to access to all the AGL community development tools, including Gerrit , Jira and the Wiki (for editing, only). NOTE: Further information about Contributing to the AGL Distro available at AGL wiki . Creating Linux Foundation ID Go to the Linux Foundation ID website . Select the option I need to create a Linux Foundation ID , and fill out the form that appears. (It is advised to authenticate through email instead of logging through Facebook/Google/Github.) Wait a few minutes, then look for an email message with the subject line: Validate your Linux Foundation ID email . Open the received URL to validate your email address. Verify that your browser displays the message You have successfully validated your e-mail address . Access Gerrit by selecting Sign In , and use your new Linux Foundation account ID to sign in. Configuring Gerrit to Use SSH Gerrit uses SSH to interact with your Git client. If you already have an SSH key pair, you can skip the part of this section that explains how to generate one. What follows explains how to generate an SSH key pair in a Linux environment --- follow the equivalent steps on your OS. First, create an SSH key pair with the command: $ ssh-keygen -t rsa -C \"John Doe john.doe@example.com\" Note: This will ask you for a password to protect the private key as it generates a unique key. Please keep this password private, and DO NOT enter a blank password. The generated SSH key pair can be found in the files ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub . Next, add the private key in the id_rsa file to your key ring, e.g.: $ ssh-add ~/.ssh/id_rsa Finally, add the public key of the generated key pair to the Gerrit server, with the following steps: Go to Gerrit . Click on your account name in the upper right corner. From the pop-up menu, select Settings . On the left side menu, click on SSH Public Keys . Paste the contents of your public key ~/.ssh/id_rsa.pub and click Add key . Note: The id_rsa.pub file can be opened with any text editor. Ensure that all the contents of the file are selected, copied and pasted into the Add SSH key window in Gerrit. Note: The SSH key generation instructions operate on the assumption that you are using the default naming. It is possible to generate multiple SSH keys and to name the resulting files differently. See the ssh-keygen documentation for details on how to do that. Once you have generated non-default keys, you need to configure SSH to use the correct key for Gerrit. In that case, you need to create a ~/.ssh/config file modeled after the one below. sh host gerrit.automotivelinux.org HostName gerrit.automotivelinux.org IdentityFile ~/.ssh/id_rsa_automotivelinux_gerrit User <LFID> <LFID> is your Linux Foundation ID and the value of IdentityFile is the name of the public key file you generated. Warning: Potential Security Risk! Do not copy your private key ~/.ssh/id_rsa . Use only the public ~/.ssh/id_rsa.pub .","title":"Getting Linux Foundation account"},{"location":"5_How_To_Contribute/1_Getting_Linux_Foundation_account/#creating-linux-foundation-id","text":"Go to the Linux Foundation ID website . Select the option I need to create a Linux Foundation ID , and fill out the form that appears. (It is advised to authenticate through email instead of logging through Facebook/Google/Github.) Wait a few minutes, then look for an email message with the subject line: Validate your Linux Foundation ID email . Open the received URL to validate your email address. Verify that your browser displays the message You have successfully validated your e-mail address . Access Gerrit by selecting Sign In , and use your new Linux Foundation account ID to sign in.","title":"Creating Linux Foundation ID"},{"location":"5_How_To_Contribute/1_Getting_Linux_Foundation_account/#configuring-gerrit-to-use-ssh","text":"Gerrit uses SSH to interact with your Git client. If you already have an SSH key pair, you can skip the part of this section that explains how to generate one. What follows explains how to generate an SSH key pair in a Linux environment --- follow the equivalent steps on your OS. First, create an SSH key pair with the command: $ ssh-keygen -t rsa -C \"John Doe john.doe@example.com\" Note: This will ask you for a password to protect the private key as it generates a unique key. Please keep this password private, and DO NOT enter a blank password. The generated SSH key pair can be found in the files ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub . Next, add the private key in the id_rsa file to your key ring, e.g.: $ ssh-add ~/.ssh/id_rsa Finally, add the public key of the generated key pair to the Gerrit server, with the following steps: Go to Gerrit . Click on your account name in the upper right corner. From the pop-up menu, select Settings . On the left side menu, click on SSH Public Keys . Paste the contents of your public key ~/.ssh/id_rsa.pub and click Add key . Note: The id_rsa.pub file can be opened with any text editor. Ensure that all the contents of the file are selected, copied and pasted into the Add SSH key window in Gerrit. Note: The SSH key generation instructions operate on the assumption that you are using the default naming. It is possible to generate multiple SSH keys and to name the resulting files differently. See the ssh-keygen documentation for details on how to do that. Once you have generated non-default keys, you need to configure SSH to use the correct key for Gerrit. In that case, you need to create a ~/.ssh/config file modeled after the one below. sh host gerrit.automotivelinux.org HostName gerrit.automotivelinux.org IdentityFile ~/.ssh/id_rsa_automotivelinux_gerrit User <LFID> <LFID> is your Linux Foundation ID and the value of IdentityFile is the name of the public key file you generated. Warning: Potential Security Risk! Do not copy your private key ~/.ssh/id_rsa . Use only the public ~/.ssh/id_rsa.pub .","title":"Configuring Gerrit to Use SSH"},{"location":"5_How_To_Contribute/2_Using_Jira_for_current_work_items/","text":"This document has been created to give further insight into the work in progress towards the Automotive Grade Linux architecture based on the community roadmap. The requirements for the roadmap are being tracked in Jira . On this page you will see all the public (and restricted) boards that have been created. For example the Board Name CI and Automated Test Expert Group : When you click on CI and Automated Test Expert Group under Board name you will be directed to a page that contains the following columns: The meanings to these columns are as follows: NOT STARTED \u2013 list of items slated for the current sprint (sprints are defined in 2 week iterations), but are not currently in progress IN PROGRESS \u2013 items currently being worked by someone in the community. DONE \u2013 items merged and complete in the sprint. If there is an item you are interested in working on, want more information or have questions, or if there is an item that you feel needs to be in higher priority, please add comments directly to the Jira item. All feedback and help is very much appreciated.","title":"Using Jira for current work items"},{"location":"5_How_To_Contribute/3_Working_with_Gerrit/","text":"Follow these instructions to collaborate on AGL through the Gerrit review system. Please be sure that you are subscribed to the mailing list and of course, you can reach out on IRC at the #automotive channel on Freenode.net Gerrit assigns the following roles to users: Submitters : May submit changes for consideration, review other code changes, and make recommendations for acceptance or rejection by voting +1 or -1, respectively. Maintainers : May approve or reject changes based upon feedback from reviewers voting +2 or -2, respectively. Getting deeper into Gerrit A comprehensive walk-through of Gerrit is beyond the scope of this document. There are plenty of resources available on the Internet. A good summary can be found here and Basic Gerrit Walkthrough for GitHub Users . Working with a local clone of the repository To work on something, whether a new feature or a bugfix: Open the Gerrit repo page . Select the repository you wish to work on. Open a terminal window and clone the project locally using the Clone with git hook URL. Be sure that ssh is also selected, as this will make authentication much simpler. For example, for documentation repository: $ git clone \"ssh://<LFID>@gerrit.automotivelinux.org:29418/AGL/documentation\" && scp -p -P 29418 <LFID>@gerrit.automotivelinux.org:hooks/commit-msg \"documentation/.git/hooks/\" Setup user and email for git config $ cd documentation $ git.config --global user.name \"Your Full Name\" $ git config --global user.email \"your@email.com\" NOTE: To only configure for a particular repository : $ cd documentation $ git.config user.name \"Your Full Name\" $ git config user.email \"your@email.com\" Create a descriptively-named branch off of your cloned repository $ git checkout -b issue-nname Using git review There's a very useful tool for working with Gerrit called git-review . This command-line tool can automate most of the ensuing sections for you. Ofcourse, reading the information below is also highly recommended so that you understand what's going on behind the scenes. # for first time use only $ git review -s If .gitreview is missing, add the following section to .git/config , and replace <LFID> with your LFID id. [ remote \"gerrit\" ] url = ssh://<LFID>@gerrit.automotivelinux.org:29418/AGL/documentation.git fetch = +refs/heads/*:refs/remotes/gerrit/* Then submit your change with git review . $ cd documentation $ git review When you update your patch, you can commit with git commit --amend , and then repeat the git review command. Typical Review Workflow New Fresh Change $ cd documentation # Working Repository $ git remote -v update # Updating wrt remote $ git checkout -b mytopicbranch origin/master # Creating new branch ### CODE the CHANGES $ git add <file> # Track the changed files $ git commit -s # Signed Commit Message $ git review # Submit Changes to review Updating existing Gerrit Review $ cd documentation # Working Repository $ git review -d 25678 # Download review, 25678 is change number ### CODE the CHANGES $ git add <file> # Track the changed files $ git commit -s # Signed Commit Message $ git review # Submit Changes to review $ git checkout master # Return to master branch Reviewing Using Gerrit Add : This button allows the change submitter to manually add names of people who should review a change; start typing a name and the system will auto-complete based on the list of people registered and with access to the system. They will be notified by email that you are requesting their input. Abandon : This button is available to the submitter only; it allows a committer to abandon a change and remove it from the merge queue. Change-ID : This ID is generated by Gerrit (or system). It becomes useful when the review process determines that your commit(s) have to be amended. You may submit a new version; and if the same Change-ID header (and value) are present, Gerrit will remember it and present it as another version of the same change. Status : Currently, the example change is in review status, as indicated by \u201cNeeds Verified\u201d in the upper-left corner. The list of Reviewers will all emit their opinion, voting +1 if they agree to the merge, -1 if they disagree. Gerrit users with a Maintainer role can agree to the merge or refuse it by voting +2 or -2 respectively. Notifications are sent to the email address in your commit message's Signed-off-by line. Visit your Gerrit dashboard , to check the progress of your requests. The history tab in Gerrit will show you the in-line comments and the author of the review.","title":"Working with Gerrit"},{"location":"5_How_To_Contribute/3_Working_with_Gerrit/#getting-deeper-into-gerrit","text":"A comprehensive walk-through of Gerrit is beyond the scope of this document. There are plenty of resources available on the Internet. A good summary can be found here and Basic Gerrit Walkthrough for GitHub Users .","title":"Getting deeper into Gerrit"},{"location":"5_How_To_Contribute/3_Working_with_Gerrit/#working-with-a-local-clone-of-the-repository","text":"To work on something, whether a new feature or a bugfix: Open the Gerrit repo page . Select the repository you wish to work on. Open a terminal window and clone the project locally using the Clone with git hook URL. Be sure that ssh is also selected, as this will make authentication much simpler. For example, for documentation repository: $ git clone \"ssh://<LFID>@gerrit.automotivelinux.org:29418/AGL/documentation\" && scp -p -P 29418 <LFID>@gerrit.automotivelinux.org:hooks/commit-msg \"documentation/.git/hooks/\" Setup user and email for git config $ cd documentation $ git.config --global user.name \"Your Full Name\" $ git config --global user.email \"your@email.com\" NOTE: To only configure for a particular repository : $ cd documentation $ git.config user.name \"Your Full Name\" $ git config user.email \"your@email.com\" Create a descriptively-named branch off of your cloned repository $ git checkout -b issue-nname","title":"Working with a local clone of the repository"},{"location":"5_How_To_Contribute/3_Working_with_Gerrit/#using-git-review","text":"There's a very useful tool for working with Gerrit called git-review . This command-line tool can automate most of the ensuing sections for you. Ofcourse, reading the information below is also highly recommended so that you understand what's going on behind the scenes. # for first time use only $ git review -s If .gitreview is missing, add the following section to .git/config , and replace <LFID> with your LFID id. [ remote \"gerrit\" ] url = ssh://<LFID>@gerrit.automotivelinux.org:29418/AGL/documentation.git fetch = +refs/heads/*:refs/remotes/gerrit/* Then submit your change with git review . $ cd documentation $ git review When you update your patch, you can commit with git commit --amend , and then repeat the git review command.","title":"Using git review"},{"location":"5_How_To_Contribute/3_Working_with_Gerrit/#typical-review-workflow","text":"New Fresh Change $ cd documentation # Working Repository $ git remote -v update # Updating wrt remote $ git checkout -b mytopicbranch origin/master # Creating new branch ### CODE the CHANGES $ git add <file> # Track the changed files $ git commit -s # Signed Commit Message $ git review # Submit Changes to review Updating existing Gerrit Review $ cd documentation # Working Repository $ git review -d 25678 # Download review, 25678 is change number ### CODE the CHANGES $ git add <file> # Track the changed files $ git commit -s # Signed Commit Message $ git review # Submit Changes to review $ git checkout master # Return to master branch","title":"Typical Review Workflow"},{"location":"5_How_To_Contribute/3_Working_with_Gerrit/#reviewing-using-gerrit","text":"Add : This button allows the change submitter to manually add names of people who should review a change; start typing a name and the system will auto-complete based on the list of people registered and with access to the system. They will be notified by email that you are requesting their input. Abandon : This button is available to the submitter only; it allows a committer to abandon a change and remove it from the merge queue. Change-ID : This ID is generated by Gerrit (or system). It becomes useful when the review process determines that your commit(s) have to be amended. You may submit a new version; and if the same Change-ID header (and value) are present, Gerrit will remember it and present it as another version of the same change. Status : Currently, the example change is in review status, as indicated by \u201cNeeds Verified\u201d in the upper-left corner. The list of Reviewers will all emit their opinion, voting +1 if they agree to the merge, -1 if they disagree. Gerrit users with a Maintainer role can agree to the merge or refuse it by voting +2 or -2 respectively. Notifications are sent to the email address in your commit message's Signed-off-by line. Visit your Gerrit dashboard , to check the progress of your requests. The history tab in Gerrit will show you the in-line comments and the author of the review.","title":"Reviewing Using Gerrit"},{"location":"5_How_To_Contribute/4_Submitting_Changes/","text":"Carefully review the following before submitting a change. These guidelines apply to developers that are new to open source, as well as to experienced open source developers. Change Requirements This section contains guidelines for submitting code changes for review. For more information on how to submit a change using Gerrit, please see Working with Gerrit . Changes are submitted as Git commits. Each commit must contain: a short and descriptive subject line that is 72 characters or fewer, followed by a blank line. a change description with your logic or reasoning for the changes, followed by a blank line a Signed-off-by line, followed by a colon (Signed-off-by:) a Change-Id identifier line, followed by a colon (Change-Id:). Gerrit won't accept patches without this identifier. A commit with the above details is considered well-formed. This page is a very useful for the same. All changes and topics sent to Gerrit must be well-formed. Informationally, commit messages must include: what the change does, why you chose that approach, and how you know it works -- for example, which tests you ran. For example: One commit fixes whitespace issues, another renames a function and a third one changes the code's functionality. An example commit file is illustrated below in detail: A short description of your change with no period at the end You can add more details here in several paragraphs, but please keep each line width less than 80 characters. A bug fix should include the issue number. Bug-AGL: [ SPEC-<JIRA-ID> ] Change-Id: IF7b6ac513b2eca5f2bab9728ebd8b7e504d3cebe1 Signed-off-by: Your Name <commit-sender@email.address> Include the issue ID in the one line description of your commit message for readability. Gerrit will link issue IDs automatically to the corresponding entry in Jira. Each commit must also contain the following line at the bottom of the commit message: Signed-off-by: Your Name <your@email.address> The name in the Signed-off-by line and your email must match the change authorship information. Make sure your :file: .git/config is set up correctly. Always submit the full set of changes via Gerrit. When a change is included in the set to enable other changes, but it will not be part of the final set, please let the reviewers know this.","title":"Submitting Changes"},{"location":"5_How_To_Contribute/4_Submitting_Changes/#change-requirements","text":"This section contains guidelines for submitting code changes for review. For more information on how to submit a change using Gerrit, please see Working with Gerrit . Changes are submitted as Git commits. Each commit must contain: a short and descriptive subject line that is 72 characters or fewer, followed by a blank line. a change description with your logic or reasoning for the changes, followed by a blank line a Signed-off-by line, followed by a colon (Signed-off-by:) a Change-Id identifier line, followed by a colon (Change-Id:). Gerrit won't accept patches without this identifier. A commit with the above details is considered well-formed. This page is a very useful for the same. All changes and topics sent to Gerrit must be well-formed. Informationally, commit messages must include: what the change does, why you chose that approach, and how you know it works -- for example, which tests you ran. For example: One commit fixes whitespace issues, another renames a function and a third one changes the code's functionality. An example commit file is illustrated below in detail: A short description of your change with no period at the end You can add more details here in several paragraphs, but please keep each line width less than 80 characters. A bug fix should include the issue number. Bug-AGL: [ SPEC-<JIRA-ID> ] Change-Id: IF7b6ac513b2eca5f2bab9728ebd8b7e504d3cebe1 Signed-off-by: Your Name <commit-sender@email.address> Include the issue ID in the one line description of your commit message for readability. Gerrit will link issue IDs automatically to the corresponding entry in Jira. Each commit must also contain the following line at the bottom of the commit message: Signed-off-by: Your Name <your@email.address> The name in the Signed-off-by line and your email must match the change authorship information. Make sure your :file: .git/config is set up correctly. Always submit the full set of changes via Gerrit. When a change is included in the set to enable other changes, but it will not be part of the final set, please let the reviewers know this.","title":"Change Requirements"},{"location":"5_How_To_Contribute/5_Reviewing_Changes/","text":"Click on a link for incoming or outgoing review. The details of the change and its current status are loaded: Status: Displays the current status of the change. Reply: Click on this button after reviewing to add a final review message and a score, -1, 0 or +1. Patch Sets: If multiple revisions of a patch exist, this button enables navigation among revisions to see the changes. By default, the most recent revision is presented. Download: This button brings up another window with multiple options to download or checkout the current changeset. The button on the right copies the line to your clipboard. You can easily paste it into your git interface to work with the patch as you prefer. Underneath the commit information, the files that have been changed by this patch are displayed. Click on a filename to review it. Select the code base to differentiate against. The default is Base and it will generally be what is needed. The review page presents the changes made to the file. At the top of the review, the presentation shows some general navigation options. Navigate through the patch set using the arrows on the top right corner. It is possible to go to the previous or next file in the set or to return to the main change screen. Click on the yellow sticky pad to add comments to the whole file. The focus of the page is on the comparison window. The changes made are presented in green on the right versus the base version on the left. Double click to highlight the text within the actual change to provide feedback on a specific section of the code. Press c once the code is highlighted to add comments to that section. After adding the comment, it is saved as a Draft . Once you have reviewed all files and provided feedback, click the green up arrow at the top right to return to the main change page. Click the Reply button, write some final comments, and submit your score for the patch set. Click Post to submit the review of each reviewed file, as well as your final comment and score. Gerrit sends an email to the change-submitter and all listed reviewers. Finally, it logs the review for future reference. All individual comments are saved as Draft until the Post button is clicked.","title":"Reviewing Changes"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/","text":"This document presents some best practices to help you use Gerrit more effectively. The intent is to show how content can be submitted easily. Use the recommended practices to reduce your troubleshooting time and improve participation in the community. Commit Messages Gerrit follows the Git commit message format. Ensure the headers are at the bottom and don't contain blank lines between one another. The following example shows the format and content expected in a commit message: Brief (no more than 50 chars) one line description. Elaborate summary of the changes made referencing why (motivation), what was changed and how it was tested. Note also any changes to documentation made to remain consistent with the code changes, wrapping text at 72 chars/line. Bug-AGL: SPEC-<JIRA-ID> Change-Id: LONGHEXHASH Signed-off-by: Your Name your.email \\@ example.org The Gerrit server provides a precommit hook to autogenerate the Change-Id which is one time use. Recommended reading: How to Write a Git Commit Message . Avoid Pushing Untested Work to a Gerrit Server To avoid pushing untested work to Gerrit. Check your work at least three times before pushing your change to Gerrit. Be mindful of what information you are publishing. Keeping Track of Changes Set Gerrit to send you emails: Gerrit will add you to the email distribution list for a change if a developer adds you as a reviewer, or if you comment on a specific Patch Set. Opening a change in Gerrit's review interface is a quick way to follow that change. Watch projects in the Gerrit projects section at Gerrit , select at least New Changes, New Patch Sets, All Comments and Submitted Changes . Always track the projects you are working on; also see the feedback/comments mailing list to learn and help others ramp up. Topic branches Topic branches are temporary branches that you push to commit a set of logically-grouped dependent commits: To push changes from REMOTE/master tree to Gerrit for being reviewed as a topic in TopicName use the following command as an example: $ git push REMOTE HEAD:refs/for/master/TopicName The topic will show up in the review UI and in the Open Changes List . Topic branches will disappear from the master tree when its content is merged. Finding Available Topics $ ssh -p 29418 <LFID>@gerrit.automotivelinux.org gerrit query \\ status:open branch:master | grep topic: | sort -u gerrit.automotivelinux.org is the current URL where the project is hosted. status : Indicates the topic's current status: open , merged, abandoned, draft, merge conflict. project : Refers to the current name of the project, in this case fabric. branch : The topic is searched at this branch. topic : The name of an specific topic, leave it blank to include them all. sort : Sorts the found topics, in this case by update (-u). Downloading or Checking Out a Change In the review UI, on the top right corner, the Download link provides a list of commands and hyperlinks to checkout or download diffs or files. We recommend the use of the git review plugin. The steps to install git review are beyond the scope of this document. Refer to the git review documentation for the installation process. To check out a specific change using Git, the following command usually works: $ git review -d CHANGEID If you don't have Git-review installed, the following commands will do the same thing: $ git fetch REMOTE refs/changes/NN/CHANGEIDNN/VERSION \\ && git checkout FETCH_HEAD For example, for the 4th version of change 2464, NN is the first two digits (24): $ git fetch REMOTE refs/changes/24/2464/4 \\ && git checkout FETCH_HEAD Using Sandbox Branches You can create your own branches to develop features. The branches are pushed to the refs/heads/sandbox/USERNAME/BRANCHNAME location. These commands ensure the branch is created in Gerrit's server. $ git checkout -b sandbox/USERNAME/BRANCHNAME $ git push --set-upstream REMOTE HEAD:refs/heads/sandbox/USERNAME/BRANCHNAME Usually, the process to create content is: develop the code, break the information into small commits, submit changes, apply feedback, rebase. The next command pushes forcibly without review: $ git push REMOTE sandbox/USERNAME/BRANCHNAME You can also push forcibly with review: $ git push REMOTE HEAD:ref/for/sandbox/USERNAME/BRANCHNAME Updating the Version of a Change During the review process, you might be asked to update your change. It is possible to submit multiple versions of the same change. Each version of the change is called a patch set. Always maintain the Change-Id that was assigned. For example, there is a list of commits, c0...c7 , which were submitted as a topic branch: $ git log REMOTE/master..master c0 ... c7 $ git push REMOTE HEAD:refs/for/master/SOMETOPIC After you get reviewers' feedback, there are changes in c3 and c4 that must be fixed. If the fix requires rebasing, rebasing changes the commit Ids, see the rebasing section for more information. However, you must keep the same Change-Id and push the changes again: $ git push REMOTE HEAD:refs/for/master/SOMETOPIC This new push creates a patches revision, your local history is then cleared. However you can still access the history of your changes in Gerrit on the review UI section, for each change. It is also permitted to add more commits when pushing new versions. Rebasing Rebasing is usually the last step before pushing changes to Gerrit; this allows you to make the necessary Change-Ids . The Change-Ids must be kept the same. squash: mixes two or more commits into a single one. reword: changes the commit message. edit: changes the commit content. reorder: allows you to interchange the order of the commits. rebase: stacks the commits on top of the master. Rebasing During a Pull Before pushing a rebase to your master, ensure that the history has a consecutive order. For example, your REMOTE/master has the list of commits from a0 to a4 ; Then, your changes c0...c7 are on top of a4 ; thus: $ git log --oneline REMOTE/master..master a0 a1 a2 a3 a4 c0 c1 ... c7 If REMOTE/master receives commits a5 , a6 and a7 . Pull with a rebase as follows: $ git pull --rebase REMOTE master This pulls a5-a7 and re-apply c0-c7 on top of them: $ git log --oneline REMOTE/master..master a0 ... a7 c0 c1 ... c7 Getting Better Logs from Git Use these commands to change the configuration of Git in order to produce better logs: $ git config log.abbrevCommit true The command above sets the log to abbreviate the commits' hash. $ git config log.abbrev 5 The command above sets the abbreviation length to the last 5 characters of the hash. $ git config format.pretty oneline The command above avoids the insertion of an unnecessary line before the Author line.","title":"Gerrit Recommended Practices"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#commit-messages","text":"Gerrit follows the Git commit message format. Ensure the headers are at the bottom and don't contain blank lines between one another. The following example shows the format and content expected in a commit message: Brief (no more than 50 chars) one line description. Elaborate summary of the changes made referencing why (motivation), what was changed and how it was tested. Note also any changes to documentation made to remain consistent with the code changes, wrapping text at 72 chars/line. Bug-AGL: SPEC-<JIRA-ID> Change-Id: LONGHEXHASH Signed-off-by: Your Name your.email \\@ example.org The Gerrit server provides a precommit hook to autogenerate the Change-Id which is one time use. Recommended reading: How to Write a Git Commit Message .","title":"Commit Messages"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#avoid-pushing-untested-work-to-a-gerrit-server","text":"To avoid pushing untested work to Gerrit. Check your work at least three times before pushing your change to Gerrit. Be mindful of what information you are publishing.","title":"Avoid Pushing Untested Work to a Gerrit Server"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#keeping-track-of-changes","text":"Set Gerrit to send you emails: Gerrit will add you to the email distribution list for a change if a developer adds you as a reviewer, or if you comment on a specific Patch Set. Opening a change in Gerrit's review interface is a quick way to follow that change. Watch projects in the Gerrit projects section at Gerrit , select at least New Changes, New Patch Sets, All Comments and Submitted Changes . Always track the projects you are working on; also see the feedback/comments mailing list to learn and help others ramp up.","title":"Keeping Track of Changes"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#topic-branches","text":"Topic branches are temporary branches that you push to commit a set of logically-grouped dependent commits: To push changes from REMOTE/master tree to Gerrit for being reviewed as a topic in TopicName use the following command as an example: $ git push REMOTE HEAD:refs/for/master/TopicName The topic will show up in the review UI and in the Open Changes List . Topic branches will disappear from the master tree when its content is merged.","title":"Topic branches"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#finding-available-topics","text":"$ ssh -p 29418 <LFID>@gerrit.automotivelinux.org gerrit query \\ status:open branch:master | grep topic: | sort -u gerrit.automotivelinux.org is the current URL where the project is hosted. status : Indicates the topic's current status: open , merged, abandoned, draft, merge conflict. project : Refers to the current name of the project, in this case fabric. branch : The topic is searched at this branch. topic : The name of an specific topic, leave it blank to include them all. sort : Sorts the found topics, in this case by update (-u).","title":"Finding Available Topics"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#downloading-or-checking-out-a-change","text":"In the review UI, on the top right corner, the Download link provides a list of commands and hyperlinks to checkout or download diffs or files. We recommend the use of the git review plugin. The steps to install git review are beyond the scope of this document. Refer to the git review documentation for the installation process. To check out a specific change using Git, the following command usually works: $ git review -d CHANGEID If you don't have Git-review installed, the following commands will do the same thing: $ git fetch REMOTE refs/changes/NN/CHANGEIDNN/VERSION \\ && git checkout FETCH_HEAD For example, for the 4th version of change 2464, NN is the first two digits (24): $ git fetch REMOTE refs/changes/24/2464/4 \\ && git checkout FETCH_HEAD","title":"Downloading or Checking Out a Change"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#using-sandbox-branches","text":"You can create your own branches to develop features. The branches are pushed to the refs/heads/sandbox/USERNAME/BRANCHNAME location. These commands ensure the branch is created in Gerrit's server. $ git checkout -b sandbox/USERNAME/BRANCHNAME $ git push --set-upstream REMOTE HEAD:refs/heads/sandbox/USERNAME/BRANCHNAME Usually, the process to create content is: develop the code, break the information into small commits, submit changes, apply feedback, rebase. The next command pushes forcibly without review: $ git push REMOTE sandbox/USERNAME/BRANCHNAME You can also push forcibly with review: $ git push REMOTE HEAD:ref/for/sandbox/USERNAME/BRANCHNAME","title":"Using Sandbox Branches"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#updating-the-version-of-a-change","text":"During the review process, you might be asked to update your change. It is possible to submit multiple versions of the same change. Each version of the change is called a patch set. Always maintain the Change-Id that was assigned. For example, there is a list of commits, c0...c7 , which were submitted as a topic branch: $ git log REMOTE/master..master c0 ... c7 $ git push REMOTE HEAD:refs/for/master/SOMETOPIC After you get reviewers' feedback, there are changes in c3 and c4 that must be fixed. If the fix requires rebasing, rebasing changes the commit Ids, see the rebasing section for more information. However, you must keep the same Change-Id and push the changes again: $ git push REMOTE HEAD:refs/for/master/SOMETOPIC This new push creates a patches revision, your local history is then cleared. However you can still access the history of your changes in Gerrit on the review UI section, for each change. It is also permitted to add more commits when pushing new versions.","title":"Updating the Version of a Change"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#rebasing","text":"Rebasing is usually the last step before pushing changes to Gerrit; this allows you to make the necessary Change-Ids . The Change-Ids must be kept the same. squash: mixes two or more commits into a single one. reword: changes the commit message. edit: changes the commit content. reorder: allows you to interchange the order of the commits. rebase: stacks the commits on top of the master.","title":"Rebasing"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#rebasing-during-a-pull","text":"Before pushing a rebase to your master, ensure that the history has a consecutive order. For example, your REMOTE/master has the list of commits from a0 to a4 ; Then, your changes c0...c7 are on top of a4 ; thus: $ git log --oneline REMOTE/master..master a0 a1 a2 a3 a4 c0 c1 ... c7 If REMOTE/master receives commits a5 , a6 and a7 . Pull with a rebase as follows: $ git pull --rebase REMOTE master This pulls a5-a7 and re-apply c0-c7 on top of them: $ git log --oneline REMOTE/master..master a0 ... a7 c0 c1 ... c7","title":"Rebasing During a Pull"},{"location":"5_How_To_Contribute/6_Gerrit_Recommended_Practices/#getting-better-logs-from-git","text":"Use these commands to change the configuration of Git in order to produce better logs: $ git config log.abbrevCommit true The command above sets the log to abbreviate the commits' hash. $ git config log.abbrev 5 The command above sets the abbreviation length to the last 5 characters of the hash. $ git config format.pretty oneline The command above avoids the insertion of an unnecessary line before the Author line.","title":"Getting Better Logs from Git"},{"location":"5_How_To_Contribute/7_General_Guidelines/","text":"Getting help If you are looking for something to work on, or need some expert assistance in debugging a problem or working out a fix to an issue, our community is always eager to help. We hang out on various developer meetings , IRC (#automotive on freenode.net) and the mailing lists . We will be glad to help. The only silly question is the one you don't ask. Questions are in fact a great way to help improve the project as they highlight where our documentation could be clearer. Reporting bugs If you are a user and you have found a bug, please submit an issue using JIRA . Before you create a new JIRA issue, please try to search the existing items to be sure no one else has previously reported it. If it has been previously reported, then you might add a comment that you also are interested in seeing the defect fixed. If it has not been previously reported, create a new JIRA. Please try to provide sufficient information for someone else to reproduce the issue. One of the project's maintainers should respond to your issue within 24 hours. If not, please bump the issue with a comment and request that it be reviewed. Submitting your fix If you just submitted a JIRA for a bug you've discovered, and would like to provide a fix, we would welcome that gladly! Please assign the JIRA issue to yourself, then you can submit a change request (CR). NOTE: If you need help with submitting your first CR, we have created a brief tutorial for you. Fixing issues and working stories Review the open issue list and find something that interests you. It is wise to start with something relatively straight forward and achievable, and that no one is already assigned. If no one is assigned, then assign the issue to yourself. Please be considerate and rescind the assignment if you cannot finish in a reasonable time, or add a comment saying that you are still actively working the issue if you need a little more time. Reviewing submitted Change Requests (CRs) Another way to contribute and learn about Automotive Grade Linux is to help the maintainers with the review of the CRs that are open. Indeed maintainers have the difficult role of having to review all the CRs that are being submitted and evaluate whether they should be merged or not. You can review the code and/or documentation changes, test the changes, and tell the submitters and maintainers what you think. Once your review and/or test is complete just reply to the CR with your findings, by adding comments and/or voting. A comment saying something like \"I tried it on system X and it works\" or possibly \"I got an error on system X: xxx \" will help the maintainers in their evaluation. As a result, maintainers will be able to process CRs faster and everybody will gain from it. Just browse through the open CRs on Gerrit to get started. Making Feature/Enhancement Proposals Review JIRA to be sure that there isn't already an open (or recently closed) proposal for the same function. If there isn't, to make a proposal we recommend that you open a JIRA Epic, Story or Improvement, whichever seems to best fit the circumstance and link or inline a \"one pager\" of the proposal that states what the feature would do and, if possible, how it might be implemented. It would help also to make a case for why the feature should be added, such as identifying specific use case(s) for which the feature is needed and a case for what the benefit would be should the feature be implemented. Once the JIRA issue is created, and the \"one pager\" either attached, inlined in the description field, or a link to a publicly accessible document is added to the description, send an introductory email to the agl-dev community mailing list linking the JIRA issue, and soliciting feedback. Discussion of the proposed feature should be conducted in the JIRA issue itself, so that we have a consistent pattern within our community as to where to find design discussion. Getting the support of three or more of the AGL maintainers for the new feature will greatly enhance the probability that the feature's related CRs will be merged. What makes a good change request? One change at a time. Not five, not three, not ten. One and only one. Why? Because it limits the blast area of the change. If we have a regression, it is much easier to identify the culprit commit than if we have some composite change that impacts more of the code. Include a link to the JIRA story for the change. Why? Because a) we want to track our velocity to better judge what we think we can deliver and when and b) because we can justify the change more effectively. In many cases, there should be some discussion around a proposed change and we want to link back to that from the change itself. Include unit and integration tests (or changes to existing tests) with every change. This does not mean just happy path testing, either. It also means negative testing of any defensive code that it correctly catches input errors. When you write code, you are responsible to test it and provide the tests that demonstrate that your change does what it claims. Why? Because without this we have no clue whether our current code base actually works. Minimize the lines of code per CR. Why? If you send a 1,000 or 2,000 LOC change, how long do you think it takes to review all of that code? Keep your changes to < 200-300 LOC, if possible. If you have a larger change, decompose it into multiple independent changess. If you are adding a bunch of new functions to fulfill the requirements of a new capability, add them separately with their tests, and then write the code that uses them to deliver the capability. Of course, there are always exceptions. If you add a small change and then add 300 LOC of tests, you will be forgiven;-) If you need to make a change that has broad impact or a bunch of generated code (protobufs, etc.). Again, there can be exceptions. NOTE: Large change requests, e.g. those with more than 300 LOC are more likely than not going to receive a -2, and you'll be asked to refactor the change to conform with this guidance. Do not stack change requests (e.g. submit a CR from the same local branch as your previous CR) unless they are related. This will minimize merge conflicts and allow changes to be merged more quickly. If you stack requests your subsequent requests may be held up because of review comments in the preceding requests. Write a meaningful commit message. Include a meaningful 50 (or less) character title, followed by a blank line, followed by a more comprehensive description of the change. Each change MUST include the JIRA identifier corresponding to the change (e.g. [SPEC-1234]). This can be in the title but should also be in the body of the commit message. See the complete requirements for an acceptable change request. NOTE: That Gerrit will automatically create a hyperlink to the JIRA item. Bug-AGL: [ SPEC-<JIRA-ID> ] .... Fix [ SPEC-<JIRA-ID> ] .... Finally, be responsive. Don't let a change request fester with review comments such that it gets to a point that it requires a rebase. It only further delays getting it merged and adds more work for you - to remediate the merge conflicts. Legal stuff We have tried to make it as easy as possible to make contributions. This applies to how we handle the legal aspects of contribution. We simply ask that when submitting a patch for review, the developer must include a sign-off statement in the commit message. Signed-off-by: John Doe <john.doe@example.com> You can include this automatically when you commit a change to your local git repository using git commit -s .","title":"General Guidelines"},{"location":"5_How_To_Contribute/7_General_Guidelines/#getting-help","text":"If you are looking for something to work on, or need some expert assistance in debugging a problem or working out a fix to an issue, our community is always eager to help. We hang out on various developer meetings , IRC (#automotive on freenode.net) and the mailing lists . We will be glad to help. The only silly question is the one you don't ask. Questions are in fact a great way to help improve the project as they highlight where our documentation could be clearer.","title":"Getting help"},{"location":"5_How_To_Contribute/7_General_Guidelines/#reporting-bugs","text":"If you are a user and you have found a bug, please submit an issue using JIRA . Before you create a new JIRA issue, please try to search the existing items to be sure no one else has previously reported it. If it has been previously reported, then you might add a comment that you also are interested in seeing the defect fixed. If it has not been previously reported, create a new JIRA. Please try to provide sufficient information for someone else to reproduce the issue. One of the project's maintainers should respond to your issue within 24 hours. If not, please bump the issue with a comment and request that it be reviewed.","title":"Reporting bugs"},{"location":"5_How_To_Contribute/7_General_Guidelines/#submitting-your-fix","text":"If you just submitted a JIRA for a bug you've discovered, and would like to provide a fix, we would welcome that gladly! Please assign the JIRA issue to yourself, then you can submit a change request (CR). NOTE: If you need help with submitting your first CR, we have created a brief tutorial for you.","title":"Submitting your fix"},{"location":"5_How_To_Contribute/7_General_Guidelines/#fixing-issues-and-working-stories","text":"Review the open issue list and find something that interests you. It is wise to start with something relatively straight forward and achievable, and that no one is already assigned. If no one is assigned, then assign the issue to yourself. Please be considerate and rescind the assignment if you cannot finish in a reasonable time, or add a comment saying that you are still actively working the issue if you need a little more time.","title":"Fixing issues and working stories"},{"location":"5_How_To_Contribute/7_General_Guidelines/#reviewing-submitted-change-requests-crs","text":"Another way to contribute and learn about Automotive Grade Linux is to help the maintainers with the review of the CRs that are open. Indeed maintainers have the difficult role of having to review all the CRs that are being submitted and evaluate whether they should be merged or not. You can review the code and/or documentation changes, test the changes, and tell the submitters and maintainers what you think. Once your review and/or test is complete just reply to the CR with your findings, by adding comments and/or voting. A comment saying something like \"I tried it on system X and it works\" or possibly \"I got an error on system X: xxx \" will help the maintainers in their evaluation. As a result, maintainers will be able to process CRs faster and everybody will gain from it. Just browse through the open CRs on Gerrit to get started.","title":"Reviewing submitted Change Requests (CRs)"},{"location":"5_How_To_Contribute/7_General_Guidelines/#making-featureenhancement-proposals","text":"Review JIRA to be sure that there isn't already an open (or recently closed) proposal for the same function. If there isn't, to make a proposal we recommend that you open a JIRA Epic, Story or Improvement, whichever seems to best fit the circumstance and link or inline a \"one pager\" of the proposal that states what the feature would do and, if possible, how it might be implemented. It would help also to make a case for why the feature should be added, such as identifying specific use case(s) for which the feature is needed and a case for what the benefit would be should the feature be implemented. Once the JIRA issue is created, and the \"one pager\" either attached, inlined in the description field, or a link to a publicly accessible document is added to the description, send an introductory email to the agl-dev community mailing list linking the JIRA issue, and soliciting feedback. Discussion of the proposed feature should be conducted in the JIRA issue itself, so that we have a consistent pattern within our community as to where to find design discussion. Getting the support of three or more of the AGL maintainers for the new feature will greatly enhance the probability that the feature's related CRs will be merged.","title":"Making Feature/Enhancement Proposals"},{"location":"5_How_To_Contribute/7_General_Guidelines/#what-makes-a-good-change-request","text":"One change at a time. Not five, not three, not ten. One and only one. Why? Because it limits the blast area of the change. If we have a regression, it is much easier to identify the culprit commit than if we have some composite change that impacts more of the code. Include a link to the JIRA story for the change. Why? Because a) we want to track our velocity to better judge what we think we can deliver and when and b) because we can justify the change more effectively. In many cases, there should be some discussion around a proposed change and we want to link back to that from the change itself. Include unit and integration tests (or changes to existing tests) with every change. This does not mean just happy path testing, either. It also means negative testing of any defensive code that it correctly catches input errors. When you write code, you are responsible to test it and provide the tests that demonstrate that your change does what it claims. Why? Because without this we have no clue whether our current code base actually works. Minimize the lines of code per CR. Why? If you send a 1,000 or 2,000 LOC change, how long do you think it takes to review all of that code? Keep your changes to < 200-300 LOC, if possible. If you have a larger change, decompose it into multiple independent changess. If you are adding a bunch of new functions to fulfill the requirements of a new capability, add them separately with their tests, and then write the code that uses them to deliver the capability. Of course, there are always exceptions. If you add a small change and then add 300 LOC of tests, you will be forgiven;-) If you need to make a change that has broad impact or a bunch of generated code (protobufs, etc.). Again, there can be exceptions. NOTE: Large change requests, e.g. those with more than 300 LOC are more likely than not going to receive a -2, and you'll be asked to refactor the change to conform with this guidance. Do not stack change requests (e.g. submit a CR from the same local branch as your previous CR) unless they are related. This will minimize merge conflicts and allow changes to be merged more quickly. If you stack requests your subsequent requests may be held up because of review comments in the preceding requests. Write a meaningful commit message. Include a meaningful 50 (or less) character title, followed by a blank line, followed by a more comprehensive description of the change. Each change MUST include the JIRA identifier corresponding to the change (e.g. [SPEC-1234]). This can be in the title but should also be in the body of the commit message. See the complete requirements for an acceptable change request. NOTE: That Gerrit will automatically create a hyperlink to the JIRA item. Bug-AGL: [ SPEC-<JIRA-ID> ] .... Fix [ SPEC-<JIRA-ID> ] .... Finally, be responsive. Don't let a change request fester with review comments such that it gets to a point that it requires a rebase. It only further delays getting it merged and adds more work for you - to remediate the merge conflicts.","title":"What makes a good change request?"},{"location":"5_How_To_Contribute/7_General_Guidelines/#legal-stuff","text":"We have tried to make it as easy as possible to make contributions. This applies to how we handle the legal aspects of contribution. We simply ask that when submitting a patch for review, the developer must include a sign-off statement in the commit message. Signed-off-by: John Doe <john.doe@example.com> You can include this automatically when you commit a change to your local git repository using git commit -s .","title":"Legal stuff"},{"location":"5_How_To_Contribute/8_Adding_Documentation/","text":"The documentation gerrit repository contains AGL documentation website template and content, rendering is visible at https://automotivegradelinux.readthedocs.io/en/latest/ . The documentation site is hosted on readthedocs and corresponding builds are mentioned here . Download Repository Clone with commit-msg hook : $ git clone \"ssh://<LFID>@gerrit.automotivelinux.org:29418/AGL/documentation\" && scp -p -P 29418 <LFID>@gerrit.automotivelinux.org:hooks/commit-msg \"documentation/.git/hooks/\" Building a local site Change into the directory $ cd documentation Install MkDocs and rtd-dropdown theme $ sudo pip install -r requirements.txt Serve locally (defaultly rendered at 127.0.0.1:8000/ ): $ sudo mkdocs serve Process to add new or edit existing markdown files to AGL documentation: Directory Structure Find existing or add new markdowns in the following directory structure. documentation \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 0_Getting_Started \u2502 \u2502 \u251c\u2500\u2500 1_Quickstart \u2502 \u2502 \u2514\u2500\u2500 2_Building_AGL_Image | \u251c\u2500\u2500 ..... | | | \u251c\u2500\u2500<Chapter-Number>_<Chapter-Name> | | \u251c\u2500\u2500<Subchapter-Number>_<Subchapter-Name> | | | \u251c\u2500\u2500<Index-Number>_<Markdown-Title>.md | | | \u251c\u2500\u2500 ..... Markdown Formatting Add following at the start of each markdown : --- title: <enter-title> --- Internal Linking : [ <enter-title> ]( ../<Chapter-Number>_<Chapter-Name>/<Subchapter-Number>_<Subchapter-Name>/<Index-Number>_<Markdown-Title>.md ) Test Hyperlinks LinkChecker is a tool that allows to check all the hyperlinks in the site. For testing hyperlinks as soon as the local site is running, do: $ linkchecker http://localhost:8000 The linkchecker output will display the broken link and there location in the site. Submitting changes Install Git Review #recent version of git-review (>=1.28.0 is required) $ sudo pip3 install git-review Write commit message # track all the new changes $ git add . # Write the commit message $ git commit --signoff Push changes for review to Gerrit # first time only $ git review -s # then to push use $ git review","title":"Adding Documentation"},{"location":"5_How_To_Contribute/8_Adding_Documentation/#download-repository","text":"Clone with commit-msg hook : $ git clone \"ssh://<LFID>@gerrit.automotivelinux.org:29418/AGL/documentation\" && scp -p -P 29418 <LFID>@gerrit.automotivelinux.org:hooks/commit-msg \"documentation/.git/hooks/\"","title":"Download Repository"},{"location":"5_How_To_Contribute/8_Adding_Documentation/#building-a-local-site","text":"Change into the directory $ cd documentation Install MkDocs and rtd-dropdown theme $ sudo pip install -r requirements.txt Serve locally (defaultly rendered at 127.0.0.1:8000/ ): $ sudo mkdocs serve Process to add new or edit existing markdown files to AGL documentation:","title":"Building a local site"},{"location":"5_How_To_Contribute/8_Adding_Documentation/#directory-structure","text":"Find existing or add new markdowns in the following directory structure. documentation \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 0_Getting_Started \u2502 \u2502 \u251c\u2500\u2500 1_Quickstart \u2502 \u2502 \u2514\u2500\u2500 2_Building_AGL_Image | \u251c\u2500\u2500 ..... | | | \u251c\u2500\u2500<Chapter-Number>_<Chapter-Name> | | \u251c\u2500\u2500<Subchapter-Number>_<Subchapter-Name> | | | \u251c\u2500\u2500<Index-Number>_<Markdown-Title>.md | | | \u251c\u2500\u2500 .....","title":"Directory Structure"},{"location":"5_How_To_Contribute/8_Adding_Documentation/#markdown-formatting","text":"Add following at the start of each markdown : --- title: <enter-title> --- Internal Linking : [ <enter-title> ]( ../<Chapter-Number>_<Chapter-Name>/<Subchapter-Number>_<Subchapter-Name>/<Index-Number>_<Markdown-Title>.md )","title":"Markdown Formatting"},{"location":"5_How_To_Contribute/8_Adding_Documentation/#test-hyperlinks","text":"LinkChecker is a tool that allows to check all the hyperlinks in the site. For testing hyperlinks as soon as the local site is running, do: $ linkchecker http://localhost:8000 The linkchecker output will display the broken link and there location in the site.","title":"Test Hyperlinks"},{"location":"5_How_To_Contribute/8_Adding_Documentation/#submitting-changes","text":"Install Git Review #recent version of git-review (>=1.28.0 is required) $ sudo pip3 install git-review Write commit message # track all the new changes $ git add . # Write the commit message $ git commit --signoff Push changes for review to Gerrit # first time only $ git review -s # then to push use $ git review","title":"Submitting changes"},{"location":"5_How_To_Contribute/9_Contribution_Checklist/","text":"Open Source Code Contribution Checklist General Does the component have a name ? (Pick one fitting the purpose and the project.) Is a separate git repo required for the component ? Does the component have a README.md containing all basic information about it ? Description. Dependencies. Build instructions. Installation instructions. Usage instructions. Example invocations. Does the component have a CONTRIBUTIONS.md file? (Containing all necessary information on how to contribute, e.g. pointing to project website? ) License Is the license an OSI approved open source software license? Are all files under an OSI approved open source license? Does the component have a LICENSE (or COPYING) file detailing the license of the code? Do the source code files have the license mentioned in the header? Do the source code files have an SPDX tag? (Note: An SPDX tag can be used in a file header instead of the license note) Are there files with other licenses in their header? If so, LICENSE should be the for the majority of the files and LICENSE.xyz for the exceptions. docs/ Are there docs/ folder for the component ? e.g. Are all APIs described inclusive description, usage and example invocations ? e.g. Are all cmdline tools or options described in the documentation ? e.g. Is the program flow described ? Contain Changelog.md ? (Keep track of major changes in the changelog.) tests/ Must have tests available. Must have simple invocation scripts available. Must have instructions for CI available. Must contribute CI test definitions. Git repository Must have: a .gitreview file. Option: Can have a .gitignore file. Option: Can have a .editorconfig file. All code needs to build against master. Is a backport to a release branch required ? Code contributions submitted need to have a Sign-off-by! (Follow DCO .) Yocto/OE Recipes need to follow the guidelines of : new-recipe-writing-a-new-recipe . Recipes follow the bitbake style guide . Your 'meta-*' layer needs to pass the yocto-check-layer tool. Gerrit Reviews All gerrit reviews need to be addressed. All issues are to be discussed with the experts. Issues are to be discussed in the EG first. Consent needs to be reached. Gerrit commits need two upvotes (not from authors!) to be merged. Uploads should be 'ready for review' or marked 'WIP'.","title":"Contribution Checklist"},{"location":"5_How_To_Contribute/9_Contribution_Checklist/#general","text":"Does the component have a name ? (Pick one fitting the purpose and the project.) Is a separate git repo required for the component ? Does the component have a README.md containing all basic information about it ? Description. Dependencies. Build instructions. Installation instructions. Usage instructions. Example invocations. Does the component have a CONTRIBUTIONS.md file? (Containing all necessary information on how to contribute, e.g. pointing to project website? )","title":"General"},{"location":"5_How_To_Contribute/9_Contribution_Checklist/#license","text":"Is the license an OSI approved open source software license? Are all files under an OSI approved open source license? Does the component have a LICENSE (or COPYING) file detailing the license of the code? Do the source code files have the license mentioned in the header? Do the source code files have an SPDX tag? (Note: An SPDX tag can be used in a file header instead of the license note) Are there files with other licenses in their header? If so, LICENSE should be the for the majority of the files and LICENSE.xyz for the exceptions.","title":"License"},{"location":"5_How_To_Contribute/9_Contribution_Checklist/#docs","text":"Are there docs/ folder for the component ? e.g. Are all APIs described inclusive description, usage and example invocations ? e.g. Are all cmdline tools or options described in the documentation ? e.g. Is the program flow described ? Contain Changelog.md ? (Keep track of major changes in the changelog.)","title":"docs/"},{"location":"5_How_To_Contribute/9_Contribution_Checklist/#tests","text":"Must have tests available. Must have simple invocation scripts available. Must have instructions for CI available. Must contribute CI test definitions.","title":"tests/"},{"location":"5_How_To_Contribute/9_Contribution_Checklist/#git-repository","text":"Must have: a .gitreview file. Option: Can have a .gitignore file. Option: Can have a .editorconfig file. All code needs to build against master. Is a backport to a release branch required ? Code contributions submitted need to have a Sign-off-by! (Follow DCO .)","title":"Git repository"},{"location":"5_How_To_Contribute/9_Contribution_Checklist/#yoctooe","text":"Recipes need to follow the guidelines of : new-recipe-writing-a-new-recipe . Recipes follow the bitbake style guide . Your 'meta-*' layer needs to pass the yocto-check-layer tool.","title":"Yocto/OE"},{"location":"5_How_To_Contribute/9_Contribution_Checklist/#gerrit-reviews","text":"All gerrit reviews need to be addressed. All issues are to be discussed with the experts. Issues are to be discussed in the EG first. Consent needs to be reached. Gerrit commits need two upvotes (not from authors!) to be merged. Uploads should be 'ready for review' or marked 'WIP'.","title":"Gerrit Reviews"}]}